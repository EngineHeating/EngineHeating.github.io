<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>保存并读取N9030A波形数据并作图</title>
      <link href="/2024/03/20/%E4%BF%9D%E5%AD%98%E5%B9%B6%E8%AF%BB%E5%8F%96N9030%E6%B3%A2%E5%BD%A2%E6%95%B0%E6%8D%AE%E5%B9%B6%E4%BD%9C%E5%9B%BE/"/>
      <url>/2024/03/20/%E4%BF%9D%E5%AD%98%E5%B9%B6%E8%AF%BB%E5%8F%96N9030%E6%B3%A2%E5%BD%A2%E6%95%B0%E6%8D%AE%E5%B9%B6%E4%BD%9C%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="保存并读取N9030A波形数据并作图"><a href="#保存并读取N9030A波形数据并作图" class="headerlink" title="保存并读取N9030A波形数据并作图"></a>保存并读取N9030A波形数据并作图</h1><p>本例用到QCustomPlot库，用于绘制二维图，基础配置见上文。</p><blockquote><p>一开始希望保存为CSV文件，但查找帮助文档后发现唯独保存为DATA（CSV）格式没有对应的SPCI指令。多次尝试无果后换为保存为state格式尝试，最终可以实现。</p><ul><li><strong>state格式</strong>可以保存观测点、mark点、中心频率等分析仪的设置参数，并且可recall后加载到分析仪上原封不动的显示。<strong>csv格式</strong>基本为用逗号隔开的纯文本格式。</li></ul></blockquote><p>下面是一个可运行的函数，点击按钮后，QWidegt控件会进行绘图。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_TextButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//连接N9030A并加载State文件</span></span><br><span class="line">        status = <span class="built_in">viOpenDefaultRM</span>(&amp;defaultRM);</span><br><span class="line">        <span class="built_in">viOpen</span>(defaultRM,<span class="string">&quot;TCPIP0::192.168.80.69::inst0::INSTR&quot;</span>,VI_NULL,VI_NULL,&amp;instrument);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存文件</span></span><br><span class="line">        QString str = <span class="string">&quot;:MMEMory:STORe:STATe &#x27;state2.state&#x27;&quot;</span>;</span><br><span class="line">        <span class="type">char</span>*  ch;</span><br><span class="line">        QByteArray ba = str.<span class="built_in">toLatin1</span>(); <span class="comment">// QString类型转char</span></span><br><span class="line">        ch=ba.<span class="built_in">data</span>();</span><br><span class="line">        status = <span class="built_in">viWrite</span>(instrument,(ViBuf)ch,<span class="built_in">strlen</span>(ch),&amp;writeCount);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        str = <span class="string">&quot;:MMEMory:LOAD:STATe &#x27;state2.state&#x27;&quot;</span>;</span><br><span class="line">        ba = str.<span class="built_in">toLatin1</span>();</span><br><span class="line">        ch=ba.<span class="built_in">data</span>();</span><br><span class="line">        status = <span class="built_in">viWrite</span>(instrument,(ViBuf)ch,<span class="built_in">strlen</span>(ch),&amp;writeCount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取波形数据</span></span><br><span class="line">        str = <span class="string">&quot;:TRACe:DATA? TRACE1&quot;</span>;</span><br><span class="line">        ba = str.<span class="built_in">toLatin1</span>();</span><br><span class="line">        ch = ba.<span class="built_in">data</span>();</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> buffer[<span class="number">20000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        status = <span class="built_in">viWrite</span>(instrument,(ViBuf)ch,<span class="built_in">strlen</span>(ch),&amp;writeCount);</span><br><span class="line">        status = <span class="built_in">viRead</span>(instrument, buffer,<span class="number">30000</span>, &amp;readCount);</span><br><span class="line">        str = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(buffer);</span><br><span class="line">        <span class="keyword">if</span> (status == VI_SUCCESS) &#123;</span><br><span class="line">            buffer[readCount] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Read Error!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换波形数据</span></span><br><span class="line">        QStringList strList = str.<span class="built_in">split</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        QVector&lt;<span class="type">double</span>&gt; x, y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;strList.<span class="built_in">count</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            QString s = strList.<span class="built_in">at</span>(i);</span><br><span class="line">            <span class="type">double</span> d = s.<span class="built_in">toDouble</span>();</span><br><span class="line">            y.<span class="built_in">append</span>(d);</span><br><span class="line">            x.<span class="built_in">append</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制波形</span></span><br><span class="line">        QCustomPlot *plot = ui-&gt;plot;</span><br><span class="line">        plot-&gt;<span class="built_in">addGraph</span>();</span><br><span class="line">        plot-&gt;<span class="built_in">graph</span>(<span class="number">0</span>)-&gt;<span class="built_in">setData</span>(x, y);</span><br><span class="line">        plot-&gt;<span class="built_in">graph</span>(<span class="number">0</span>)-&gt;<span class="built_in">setPen</span>(<span class="built_in">QPen</span>(Qt::red));<span class="comment">//曲线为红色</span></span><br><span class="line">        plot-&gt;xAxis-&gt;<span class="built_in">setLabel</span>(<span class="string">&quot;X&quot;</span>);</span><br><span class="line">        plot-&gt;yAxis-&gt;<span class="built_in">setLabel</span>(<span class="string">&quot;Y&quot;</span>);</span><br><span class="line">        plot-&gt;<span class="built_in">rescaleAxes</span>();</span><br><span class="line">        plot-&gt;<span class="built_in">setInteractions</span>(QCP::iRangeDrag|QCP::iRangeZoom|QCP::iSelectPlottables); <span class="comment">//交互：可鼠标拖动，可滚轮缩放，可选中波形</span></span><br><span class="line">        plot-&gt;<span class="built_in">replot</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        <span class="built_in">viClose</span>(instrument);</span><br><span class="line">        <span class="built_in">viClose</span>(defaultRM);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里最初尝试时，经常遇到程序崩溃异常退出，最终将<code>buffer</code>数组拉大后得以正常，原因未知。</p><p>运行后发现波形可以显示，但横轴值不对，原因是根据代码中的<code>x.append(i);</code>语句，横轴数据是从<code>0</code>开始，步长为<code>1</code>的连续整数序列，因此横轴范围是<code>0</code>到<code>1000</code>，步长为<code>1</code>。</p><p>对转换波形数据部分进行如下修改：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换波形数据</span></span><br><span class="line">QStringList strList = str.<span class="built_in">split</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">QVector&lt;<span class="type">double</span>&gt; x, y;</span><br><span class="line"></span><br><span class="line">QString start = ui-&gt;StartfreqEdit-&gt;<span class="built_in">text</span>();</span><br><span class="line">QString stop = ui-&gt;StopfreqEdit_2-&gt;<span class="built_in">text</span>();</span><br><span class="line"><span class="type">double</span> startX = start.<span class="built_in">toDouble</span>();<span class="comment">//  设置起始值</span></span><br><span class="line"><span class="type">double</span> stopX = stop.<span class="built_in">toDouble</span>();</span><br><span class="line"><span class="type">double</span> step = (stopX-startX)/<span class="number">1000</span>;</span><br><span class="line"><span class="built_in">qDebug</span>()&lt;&lt;startX;</span><br><span class="line"><span class="built_in">qDebug</span>()&lt;&lt;stopX;</span><br><span class="line"><span class="built_in">qDebug</span>()&lt;&lt;step;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;strList.<span class="built_in">count</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">    QString s = strList.<span class="built_in">at</span>(i);</span><br><span class="line">    <span class="type">double</span> d = s.<span class="built_in">toDouble</span>();</span><br><span class="line">    y.<span class="built_in">append</span>(d);</span><br><span class="line">    x.<span class="built_in">append</span>(startX + i*step);<span class="comment">//设置步长</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里默认设置产生1000个数据点，如需修改后续可进行修改。修改后如图所示：</p><p><img src="https://raw.githubusercontent.com/EngineHeating/MyPicGo/main/20230424134447.png" alt="20230424134447"> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>QCustomPlot库的使用——绘制曲线</title>
      <link href="/2024/03/20/QCustomPlot%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%BB%98%E5%88%B6%E6%9B%B2%E7%BA%BF/"/>
      <url>/2024/03/20/QCustomPlot%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%BB%98%E5%88%B6%E6%9B%B2%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="1-配置库"><a href="#1-配置库" class="headerlink" title="1. 配置库"></a>1. 配置库</h1><h2 id="1-1-下载与预配置"><a href="#1-1-下载与预配置" class="headerlink" title="1.1 下载与预配置"></a>1.1 下载与预配置</h2><ul><li>下载压缩包，然后吧.cpp和.h文件放入工程目录中</li><li>在mainwindow.h中引用下载的.h文件<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;qcustomplot.h&quot;</span></span></span><br></pre></td></tr></table></figure></li><li>Q4.0以上版本需要在.pro文件中加入：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QT += printsupport</span><br></pre></td></tr></table></figure></li><li>在UI设计界面，拖入<strong>Widget</strong>,然后右键-&gt;提升为…然后在弹出的对话框中，在<strong>提升为类名</strong>那里输入QCustomPlot，然后头文件那里会自动填充为qcustomplot.h。单击添加按钮将QCustomPlot加入提升类列表中，最后单击提升就可以了。</li></ul><p> <img src="https://raw.githubusercontent.com/EngineHeating/MyPicGo/main/20230405212452.png" alt="20230405212452"> </p><p> 可见，类中已经显示为QCustomPlot。预配置完成，<strong>这个可以用来作为坐标轴画图。</strong></p><h2 id="1-2-第一个demo：画一个简单抛物线"><a href="#1-2-第一个demo：画一个简单抛物线" class="headerlink" title="1.2 第一个demo：画一个简单抛物线"></a>1.2 第一个demo：画一个简单抛物线</h2><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成数据，画出的是抛物线</span></span><br><span class="line"><span class="function">QVector&lt;<span class="type">double</span>&gt; <span class="title">x</span><span class="params">(<span class="number">101</span>)</span>, <span class="title">y</span><span class="params">(<span class="number">101</span>)</span></span>; <span class="comment">//初始化向量x和y</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">101</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">  x[i] = i/<span class="number">50.0</span> - <span class="number">1</span>; <span class="comment">// x范围[-1,1]</span></span><br><span class="line">  y[i] = x[i]*x[i]; <span class="comment">// y=x*x</span></span><br><span class="line">&#125;</span><br><span class="line">ui-&gt;customPlot-&gt;<span class="built_in">addGraph</span>();<span class="comment">//添加数据曲线（一个图像可以有多个数据曲线）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// graph(0);可以获取某个数据曲线（按添加先后排序）</span></span><br><span class="line"><span class="comment">// setData();为数据曲线关联数据</span></span><br><span class="line">ui-&gt;customPlot-&gt;<span class="built_in">graph</span>(<span class="number">0</span>)-&gt;<span class="built_in">setData</span>(x, y);</span><br><span class="line">ui-&gt;customPlot-&gt;<span class="built_in">graph</span>(<span class="number">0</span>)-&gt;<span class="built_in">setName</span>(<span class="string">&quot;第一个示例&quot;</span>);<span class="comment">// 设置图例名称</span></span><br><span class="line"><span class="comment">// 为坐标轴添加标签</span></span><br><span class="line">ui-&gt;customPlot-&gt;xAxis-&gt;<span class="built_in">setLabel</span>(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">ui-&gt;customPlot-&gt;yAxis-&gt;<span class="built_in">setLabel</span>(<span class="string">&quot;y&quot;</span>);</span><br><span class="line"><span class="comment">// 设置坐标轴的范围，以看到所有数据</span></span><br><span class="line">ui-&gt;customPlot-&gt;xAxis-&gt;<span class="built_in">setRange</span>(<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">ui-&gt;customPlot-&gt;yAxis-&gt;<span class="built_in">setRange</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">ui-&gt;customPlot-&gt;legend-&gt;<span class="built_in">setVisible</span>(<span class="literal">true</span>); <span class="comment">// 显示图例</span></span><br><span class="line"><span class="comment">// 重画图像,类似于plot函数</span></span><br><span class="line">ui-&gt;customPlot-&gt;<span class="built_in">replot</span>();</span><br></pre></td></tr></table></figure><p>1</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>动态链接库的使用</title>
      <link href="/2024/03/20/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
      <url>/2024/03/20/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="动态链接库的使用"><a href="#动态链接库的使用" class="headerlink" title="动态链接库的使用"></a>动态链接库的使用</h1><h2 id="一、在VS中创建动态链接库"><a href="#一、在VS中创建动态链接库" class="headerlink" title="一、在VS中创建动态链接库"></a>一、在VS中创建动态链接库</h2><p>首先生成的main文件无需改动，要做的是创建自己的DLL文件。分别创建头文件.h和源文件.cpp。</p><p>.h文件中如下例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>extern “C”：作用是告诉编译器代码按C语言的方式进行编译</li><li>_declspec(dllexport)：此修饰符告诉编译器和链接器被它修饰的函数或变量需要从DLL导出。与其相对的代码是_declspec(dllimport) 此修饰符告诉编译器和链接器被它修饰的函数或变量需要从DLL导入。</li><li>int Add(int a, int b)需要被其他程序调用的函数</li></ul><p>.cpp文件如下例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TestDLL.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后进行编译，这里无法运行是正常的。</p><h2 id="二、创建需要调用的CPP项目"><a href="#二、创建需要调用的CPP项目" class="headerlink" title="二、创建需要调用的CPP项目"></a>二、创建需要调用的CPP项目</h2><p>将上步生成的.dll文件和.lib文件放入此项目根目录，将上步的.h文件添加进本项目。编写本CPP项目时，须有如下调用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TestDLL.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;Dlldemo.lib&quot;</span>)</span></span><br></pre></td></tr></table></figure><p>main函数如下例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TestDLL.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;DLL1.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> c = <span class="built_in">add</span>(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;5+3=%d&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、动态库与静态库"><a href="#三、动态库与静态库" class="headerlink" title="三、动态库与静态库"></a>三、动态库与静态库</h2><p>库有两种：<strong>静态库</strong>（.a、.lib）和<strong>动态库</strong>（.so、.dll）。所谓静态、动态是指<br>链接。</p><p>lib是编译时需要的，dll是运行时需要的。</p><p>如果要完成源代码的编译，有lib就够了。</p><p>如果也使动态连接的程序运行起来，有dll就够了。</p><p>在开发和调试阶段，当然最好都有。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++课后练习留档</title>
      <link href="/2024/03/20/C++%20Primer%20%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E7%95%99%E6%A1%A3/"/>
      <url>/2024/03/20/C++%20Primer%20%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E7%95%99%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="C-Primer-Essential-C-课后练习留档"><a href="#C-Primer-Essential-C-课后练习留档" class="headerlink" title="C++ Primer&#x2F;Essential C++ 课后练习留档"></a>C++ Primer&#x2F;Essential C++ 课后练习留档</h1><h2 id="第1章开始"><a href="#第1章开始" class="headerlink" title="第1章开始"></a>第1章开始</h2><h3 id="练习1-3"><a href="#练习1-3" class="headerlink" title="练习1.3"></a>练习1.3</h3><blockquote><p>编写程序，在标准输出上打印Hello World.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Hello, World&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习1-4"><a href="#练习1-4" class="headerlink" title="练习1.4"></a>练习1.4</h3><blockquote><p>我们的程序使用加法运算符+将两个数相加。编写程序使用乘法运算符*打印两个数的积。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> mul1, mul2;</span><br><span class="line">std::cin &gt;&gt; mul1 &gt;&gt; mul2;</span><br><span class="line">std::cout &lt;&lt; mul1 * mul2 &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习1-5"><a href="#练习1-5" class="headerlink" title="练习1.5"></a>练习1.5</h3><blockquote><p>我们将所有输出操作放在一条很长的语句中。重写程序，将每个运算对象的打印操作放在一条独立的语句中。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Enter two numbers:&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="type">int</span> v1 = <span class="number">0</span>, v2 = <span class="number">0</span>;</span><br><span class="line">std::cin &gt;&gt; v1 &gt;&gt; v2;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;The number of &quot;</span>;</span><br><span class="line">std::cout &lt;&lt; v1;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot; and &quot;</span>;</span><br><span class="line">std::cout &lt;&lt; v2;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot; is &quot;</span>;</span><br><span class="line">std::cout &lt;&lt; v1 + v2 &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习1-6"><a href="#练习1-6" class="headerlink" title="练习1.6"></a>练习1.6</h3><blockquote><p>(非书上题)输出所有三位数的水仙花数。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> m = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((i * <span class="number">100</span> + j * <span class="number">10</span> + k) == (i*i*i + j*j*j + k*k*k))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">m++;</span><br><span class="line">k++;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (m &lt; <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CPP基础</title>
      <link href="/2024/03/20/CPP%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/03/20/CPP%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>在基础知识部分，好像只有头文件的引用和输入输出函数发生了变化。</p><p>头文件下加入<code>using namespace std;</code></p><p><code>#include&lt;stdio.h&gt;——&gt;#include&lt; iostream&gt;</code></p><p><code>printf——&gt;cout</code></p><p><code>scanf——&gt;cin</code></p><p>C++有字符串类型string,这是C语言所不具备的。</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><h4 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;             <span class="comment">//假设a的地址为1000</span></span><br><span class="line"><span class="type">int</span> *p = &amp;a;</span><br></pre></td></tr></table></figure><p>这是定义了一个指向int形变量a的指针。此时<code>p = &amp;a = 1000</code>,<code>*p = a = 10</code>。</p><blockquote><p>&amp;：取址运算符，取&amp;后面的变量的地址值。</p><p>*： 取值运算符：取*后面的地址里保存的变量值。</p></blockquote><h4 id="指针传入函数"><a href="#指针传入函数" class="headerlink" title="指针传入函数"></a>指针传入函数</h4><p>调用一个函数时，通常不会将变量直接传入函数，而是将调用的变量复制一份副本传入函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//没用指针，交换失败</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">swap</span>(a, b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a:10</span></span><br><span class="line"><span class="comment">//b:20</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">swap</span>(&amp;a, &amp;b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a:20</span></span><br><span class="line"><span class="comment">//b:10</span></span><br></pre></td></tr></table></figure><h4 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> b[<span class="number">5</span>];   <span class="comment">//假设b[0]地址为1500，则b[1]地址为1504……</span></span><br></pre></td></tr></table></figure><p>不能对b进行别的操作，想要用指针对数组进行操作，需定义一个新的指针指向这个数组，如：<code>int *pb = &amp;b[0];</code>.如果此时进行<code>pb++</code>，则<code>pb = &amp;b[1]</code>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CPP核心编程</title>
      <link href="/2024/03/20/CPP%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/03/20/CPP%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="CPP核心编程"><a href="#CPP核心编程" class="headerlink" title="CPP核心编程"></a>CPP核心编程</h1><h2 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1 内存分区模型"></a>1 内存分区模型</h2><p>C++程序执行时，将内存大致分为4个区域：</p><ul><li>代码区</li><li>全局区</li><li>栈区</li><li>堆区</li></ul><h3 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h3><p>程序编译后，生成了exe可执行文件，未执行该程序前分为两个区域：</p><p>代码区：</p><ul><li>存放CPU执行的机器指令</li><li>代码区是<strong>共享</strong>的。对于被频繁执行的程序，只需存储一份代码</li><li>代码区是<strong>只读</strong>的。防止程序意外修改它的指令。</li></ul><p>全局区：</p><ul><li>存放全局变量(函数外定义的变量)、静态变量（static）、常量（3种）</li><li>该区域数据程序结束后由操作系统释放。</li></ul><h3 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h3><p>栈区：</p><ul><li>编译器自动分配释放，存放函数的参数值，局部变量等；</li><li>注：不要返回局部变量的地址。</li></ul><p>堆区：</p><ul><li>堆区数据由程序员管理和释放</li><li>堆区数据由new关键字开辟内存<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-3-new运算符"><a href="#1-3-new运算符" class="headerlink" title="1.3 new运算符"></a>1.3 new运算符</h3><p>在堆区开辟数据，由delete释放。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *arr = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>]; <span class="comment">//分配10个int数据组成的数组，arr指针指向第一个Int</span></span><br><span class="line"><span class="keyword">delete</span>[] arr;   <span class="comment">//arr必须指向一个动态分配的数组或者为空</span></span><br></pre></td></tr></table></figure><h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2 引用"></a>2 引用</h2><h3 id="2-1-基本操作"><a href="#2-1-基本操作" class="headerlink" title="2.1 基本操作"></a>2.1 基本操作</h3><p>作用：给变量起别名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a; <span class="comment">//给a起一个别名为b</span></span><br></pre></td></tr></table></figure><ul><li>引用必须初始化</li><li>引用一经初始化后不可更改</li></ul><h3 id="2-2-引用做函数参数及返回值"><a href="#2-2-引用做函数参数及返回值" class="headerlink" title="2.2 引用做函数参数及返回值"></a>2.2 引用做函数参数及返回值</h3><p><strong>作用</strong>：函数传参时，可以用引用让形参修饰实参，简化指针修改实参。</p><p><strong>注意</strong>：不要返回局部变量引用</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/20/hello-world/"/>
      <url>/2024/03/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇测试博客</title>
      <link href="/2024/03/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/03/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p><hr>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
