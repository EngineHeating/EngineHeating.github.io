<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LeetCode | 142. 环形链表 II</title>
      <link href="/2025/04/07/leetcode/142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/"/>
      <url>/2025/04/07/leetcode/142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-142- 环形链表 II"><a href="#LeetCode-142- 环形链表 II" class="headerlink" title="LeetCode | 142. 环形链表 II"></a>LeetCode | 142. 环形链表 II</h1><h2 id="题目"><a href="# 题目" class="headerlink" title="题目"></a>题目 </h2><p> 给定一个链表，返回链表开始入环的第一个节点。  如果链表无环，则返回  <code>null</code>。</p><p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意，<code>pos</code> 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</strong></p><p><strong>说明：</strong>不允许修改给定的链表。</p><p><strong>进阶：</strong></p><ul><li>你是否可以使用 <code>O(1)</code> 空间解决此题？</li></ul><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png"></p><pre><strong>输入：</strong>head = [3,2,0,-4], pos = 1<strong>输出：</strong>返回索引为 1 的链表节点<strong>解释：</strong>链表中有一个环，其尾部连接到第二个节点。</pre><p><strong>示例  2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png"></p><pre><strong>输入：</strong>head = [1,2], pos = 0<strong>输出：</strong>返回索引为 0 的链表节点<strong>解释：</strong>链表中有一个环，其尾部连接到第一个节点。</pre><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png"></p><pre><strong>输入：</strong>head = [1], pos = -1<strong>输出：</strong>返回 null<strong>解释：</strong>链表中没有环。</pre><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围在范围 <code>[0, 10&lt;sup&gt;4&lt;/sup&gt;]</code> 内</li><li><code>-10&lt;sup&gt;5&lt;/sup&gt; &lt;= Node.val &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li></ul><h2 id="思路"><a href="# 思路" class="headerlink" title="思路"></a>思路 </h2><p><strong> 第一次没有思路，看了题解。</strong></p><p>法一：哈希表法</p><p>遍历链表，将每个链表结点存入哈希表（数值由 0 变 1），直到发现对应结点的 value 为 1 时说明找到了循环的结点，或是找到空结点说明没有循环链表。</p><p>法二：快慢指针</p><p>设定快慢指针，一次循环中，快指针走 2 步，慢指针走一步，如果是环形链表，则二者一定会在环内相遇，此时，令慢指针指向头结点，此时二者同时向前走，直到相遇结点，该结点即为所找入口节点。</p><h2 id="AC 代码"><a href="#AC 代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 哈希表实现</span></span><br><span class="line">        unordered_map&lt;ListNode*, <span class="type">int</span>&gt; map;</span><br><span class="line">        <span class="keyword">while</span>(head)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(map.<span class="built_in">count</span>(head))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> head;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                map[head] = <span class="number">1</span>;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode | 49. 字母异位词分组</title>
      <link href="/2025/04/07/leetcode/49.%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/"/>
      <url>/2025/04/07/leetcode/49.%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-49- 字母异位词分组"><a href="#LeetCode-49- 字母异位词分组" class="headerlink" title="LeetCode | 49. 字母异位词分组"></a>LeetCode | 49. 字母异位词分组 </h1><h2 id="题目"><a href="# 题目" class="headerlink" title="题目"></a> 题目 </h2><p> 给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p><p><strong>示例:</strong></p><pre><strong>输入:</strong> <code>["eat", "tea", "tan", "ate", "nat", "bat"]</code><strong>输出:</strong>[["ate","eat","tea"],  ["nat","tan"],  ["bat"]]</pre><p><strong>说明：</strong></p><ul><li>所有输入均为小写字母。</li><li>不考虑答案输出的顺序。</li></ul><h2 id="思路"><a href="# 思路" class="headerlink" title="思路"></a>思路 </h2><p><strong> 第一次没有思路，看了题解。</strong></p><p>法一：字符串计数</p><p>创建一个 26 位字符串，每一位对应一个字母出现的次数，作为哈希表的 key，相同的 s 代表异位词，存入同一个 key 的 vector 中。</p><p>法二：排序</p><p>将每个字符串先进行排序，然后用 find()寻找当前哈希表是否出现过排序后的字符串，如果出现过，就把原字符串添加到这个组下，否则就新创一个分组并添加。</p><h2 id="AC 代码"><a href="#AC 代码" class="headerlink" title="AC 代码"></a>AC 代码 </h2><p> 法一：字符串计数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class="line">        unordered_map&lt;string,vector&lt;string&gt;&gt; strmap;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; strs.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">string <span class="title">s</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span></span>;    <span class="comment">// 创建一个 26 位字符串，每一位对应一个字母出现的次数，作为哈希表的 key</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; strs[i].<span class="built_in">length</span>(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                s[strs[i][j] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            strmap[s].<span class="built_in">push_back</span>(strs[i]);   <span class="comment">// 相同的 s 代表异位词，存入同一个 key 的 vector 中</span></span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; output;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = strmap.<span class="built_in">begin</span>(); it != strmap.<span class="built_in">end</span>(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            output.<span class="built_in">push_back</span>(it-&gt;second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class="line">        <span class="comment">// 看了题解</span></span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; output;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; strmap;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; strs.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            string str = strs[i];</span><br><span class="line">            string sortstr = str;</span><br><span class="line">            <span class="built_in">sort</span>(sortstr.<span class="built_in">begin</span>(), sortstr.<span class="built_in">end</span>());</span><br><span class="line">            <span class="keyword">if</span>(strmap.<span class="built_in">find</span>(sortstr) == strmap.<span class="built_in">end</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                strmap[sortstr] = output.<span class="built_in">size</span>();</span><br><span class="line">                output.<span class="built_in">push_back</span>(&#123;str&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                output[strmap[sortstr]].<span class="built_in">push_back</span>(&#123;str&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode | 160. 相交链表</title>
      <link href="/2025/04/07/leetcode/160.%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
      <url>/2025/04/07/leetcode/160.%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-160- 相交链表"><a href="#LeetCode-160- 相交链表" class="headerlink" title="LeetCode | 160. 相交链表"></a>LeetCode | 160. 相交链表 </h1><h2 id="题目"><a href="# 题目" class="headerlink" title="题目"></a> 题目 </h2><p> 编写一个程序，找到两个单链表相交的起始节点。</p><p>如下面的两个链表<strong>：</strong></p><p><a href="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"></a></p><p>在节点 c1 开始相交。</p><p><strong>示例 1：</strong></p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png"></a></p><pre><strong>输入：</strong>intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3<strong>输出：</strong>Reference of the node with value = 8<strong>输入解释：</strong>相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</pre><p><strong>示例  2：</strong></p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_2.png"></a></p><pre><strong>输入：</strong>intersectVal&nbsp;= 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1<strong>输出：</strong>Reference of the node with value = 2<strong>输入解释：</strong>相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</pre><p><strong>示例  3：</strong></p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png"></a></p><pre><strong>输入：</strong>intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2<strong>输出：</strong>null<strong>输入解释：</strong>从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<strong>解释：</strong>这两个链表不相交，因此返回 null。</pre><p><strong>注意：</strong></p><ul><li>如果两个链表没有交点，返回 <code>null</code>.</li><li>在返回结果后，两个链表仍须保持原有的结构。</li><li>可假定整个链表结构中没有循环。</li><li>程序尽量满足 O(<em>n</em>) 时间复杂度，且仅用 O(<em>1</em>) 内存。</li></ul><h2 id="思路"><a href="# 思路" class="headerlink" title="思路"></a>思路 </h2><p><strong> 第一次没有思路，看了题解。</strong></p><p>首先分别统计两个链表长度，然后取二者中的最小，让长的链表先指到和短链表一样的长度，然后开始判断当前两个链表是否相同。</p><h2 id="AC 代码"><a href="#AC 代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        ListNode* curA = headA;</span><br><span class="line">        ListNode* curB = headB;</span><br><span class="line">        <span class="type">int</span> sizeA = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sizeB = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> subSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(curA)</span><br><span class="line">        &#123;</span><br><span class="line">            curA = curA-&gt;next;</span><br><span class="line">            sizeA++;</span><br><span class="line">        &#125;</span><br><span class="line">        curA = headA;</span><br><span class="line">        <span class="keyword">while</span>(curB)</span><br><span class="line">        &#123;</span><br><span class="line">            curB = curB-&gt;next;</span><br><span class="line">            sizeB++;</span><br><span class="line">        &#125;   <span class="comment">// 统计两个链表长度</span></span><br><span class="line">        curB = headB;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sizeA &gt; sizeB)   <span class="comment">// 令长的指针和短的指针对齐</span></span><br><span class="line">        &#123;</span><br><span class="line">            subSize = sizeA - sizeB;</span><br><span class="line">            <span class="keyword">while</span>(subSize--)</span><br><span class="line">                curA = curA-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            subSize = sizeB - sizeA;</span><br><span class="line">            <span class="keyword">while</span>(subSize--)</span><br><span class="line">                curB = curB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(curA)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(curA == curB)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> curA;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                curA = curA-&gt;next;</span><br><span class="line">                curB = curB-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode | 242. 有效的字母异位词</title>
      <link href="/2025/04/07/leetcode/242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
      <url>/2025/04/07/leetcode/242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-242- 有效的字母异位词"><a href="#LeetCode-242- 有效的字母异位词" class="headerlink" title="LeetCode | 242. 有效的字母异位词"></a>LeetCode | 242. 有效的字母异位词 </h1><h2 id="题目"><a href="# 题目" class="headerlink" title="题目"></a> 题目 </h2><p> 给定两个字符串 <em>s</em> 和 <em>t</em> ，编写一个函数来判断 <em>t</em> 是否是 <em>s</em> 的字母异位词。</p><p><strong>示例  1:</strong></p><pre><strong>输入:</strong> <em>s</em> = "anagram", <em>t</em> = "nagaram"<strong>输出:</strong> true</pre><p><strong>示例 2:</strong></p><pre><strong>输入:</strong> <em>s</em> = "rat", <em>t</em> = "car"<strong>输出: </strong>false</pre><p><strong>说明:</strong><br>你可以假设字符串只包含小写字母。</p><p><strong>进阶:</strong><br>如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？</p><h2 id="思路"><a href="# 思路" class="headerlink" title="思路"></a>思路 </h2><p> 将哈希表的 26 个字母作为 key, 各个字母出现次数作为 value。第一个字符串加值，第二个减值。最后一旦发现不为 0 的 value，证明是异位词。</p><h2 id="AC 代码"><a href="#AC 代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; stringMap;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            stringMap[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; t.<span class="built_in">length</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            stringMap[t[i]-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(stringMap[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025.4 | Pomodoro Daily Plan</title>
      <link href="/2025/04/01/2025.4%E6%AF%8F%E6%97%A5%E4%BA%8B%E9%A1%B9/"/>
      <url>/2025/04/01/2025.4%E6%AF%8F%E6%97%A5%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2357cb7a62e5482130dadb8bbfb0eed5d5c1438a5568ba1fb64bc478c3871bfc">7270f71a1e1dda70b94ec6921889be065fd9138db38680dd6f18788bd85b8a24388682f84bd7de1f4d42f7650a7e6b2e88459223b5ce10c499c00f556a11deb4a90a45c4fabe8a262351b4e3481e0f5acad539d5cb019d929f8c11b1285599b66039978af52cc6bc2c0105e51114fb2a5769aae2166950eae50f6ab3186e8e2790d128664f5264fa1e417232d207fe9efab594ccde595959a8a4c3293a9817512c62f34cd77f471e6022bbcfddf4dbf05a3cf2e90526231a1eca80ba841463258622888e88a90ec1d1b0f6244399e0c47b6be4477a4280686f317bed930cea4f216280f53fc4a477e7399b720daafee798818ddf8df5c19ad3c79747eb5daa030a0638d9a24862436857005887c57e72b2ea2b1f2822d9932965a577ec695813762f67d98bf1ce93341fdeca0a802f6f7f4baf253cb8e0d71ccbbc865dd3bda7417a18ef4846b2e53351b5f9707a8edce697cb2b4670c73c8ec07059fcea8586b39aa7633b82b8443bbc766940c6fb5f5729f21274ef5d1259ce8a456339d0fb648dda4ae84955c7598e1b6acd73b6ce374bafc2f7d31c2093c5c5ed338b1dbcaa2a9db2c11b67a630237addd1ccef6e1c3cb73b44ad010d3a895df1877267f187b848df782b82cdcf5a2737b337dbc1ed13f677ca53e886e0ca06897ba5620533e8c68ed60772a0f5289341c8f7fb2c7f017b7ffbdb20956ff19d71b2f3581eea33fe874b2b9f294fbed34d91fb3706c09a06cb29be3307e8914abb20901e5bfc732f459b2e3f714f384eaede72bf45f523e76866d53b992fa3d09df07cb68258f373afc4ce97c26aa09bc61327e32a146a8498edfd024b54b68d7deed5ae0ce6cc7601098b5d852f094814b8adc8600d9fa7b76650fb71e5c25f3e747aee9f65790bf16ccafd8998d8f5327ba0f0cc94d3ae641a17099b19027cb2fef5f45f27381be58c9d3f8cfe06b9e627eeea0798d88d96baba6c463dbfa12566543a12ab1b633db9967d856d0fc4fb9e275f624a86a3cff4b209fe1ccc2daec3b814b7f4a08b5901ac8c8dfb7a902bd7f32d881d00d6ded392dad65a80d79bfebe11970dac9bce9cbc24cf05c8494d854228d279c4049393a31eaef04ea31c454b23439aa6373c5424d03299b105d83c24a7fc38af3a25a8c13fb7cbaeca51a7c649ecbe71850ec1913955d604ff3c0402fca6715c50c9049f34900b9dcc4413a7ff6e55ac4f6d6629c6c10a4dee5f1ded00e236cd12e3a7f6640d9282e40bb202f7723eb714664c30112106bd92bdcee1c4c7fcfa36bb9380afbe78014215f13e7346fbd8d06584533539dbbc900a2fcfc51a61a9d5485669b84ada2d57f74ff6b4cf1be27140fbe7631daa23310dfa7da1c2316d74c94e9b512602d3aa1978998270d869585ec717e28f32bec291d1133ad7d1925eff6af90d9dd6865ef05cc2b2279b4f6661f1262f6fd7f569e0254a91b7d2c67faa2472efcda1bb2782b9afb41dfc2af690b004068384cbc53a75808e906b11807b6b317b28d699aef8a75e353e6f547d91c70090a58c7198a4b6d9b1606b199a8d58382bacf25b24400986dec6ac7562dd351c3adfd2f10f8985e2bc31e8d42993a1ccb1900dde56ac871b835870e03fd33962ba5438456e8d6caf50f65a0595928be80221ef595d56599c65c3a7e08cff4142ff571d25d098b69716af1428a5955eec199a56e25594c30905ae37b93a44284a48bae4ef82af5e07a10f6a75b3c72d108f351d4e266dc30064bdfcc8a8991ae6899c938920fb242ae09d398d1d7e86e1e918757a03ba3d3cdafa2937208030421f08517c1bb0663dd67905e103c8df05eb91a81e3ff06ae96815ebb79a4f5c55c5a75b2ea1df1b4cd42a8418019c79eabc200e0007bc4ff6413e4f0eb181bfdea44f5f15b1cf15f960887779a70ce9044b805f6b8c30efedfe8096c749267044cdaec33826df8da632543aa221f00b538db3cc5000200c6101c5e3d24926611ef2d70977c47d5afbd83cf15d2bbe22b206ef7d4fa11b9647c2ff67802002241cb6f5caabca74c24db1cdcb9a7939ee33342240b4ba5bb89db3cd932afe2cf3725319aef4bab0e6edb060aa4ad2eb15f1b2346eeded40fcb3e22ec1303196064b0479ec178b3a322ff4a7308259cc13962693f398d5c0568fc1fab62ab808fc868c62d9a7c00722ec7ee64026e252af08ba8c1663e0dc02e333c2f598b12adda2280e6a0f11f567956da8fbb6fe5954d4e23349d3a32a1d7359772cc47c1c5b95c7a3cf38a656f2d3ccc5706554c8c44b23da54579e64dbebc5aa800263306548da3a89478b62e957d915e079b2b5cbac08a5f0be548ffc4054c9e9c01aa4595a6e01bedee46bf50b455603abd947f4d9b59f202699815843519baa6d09885f6e6bea2d2ae7c2c000c98b7cca666a46bc2714cd9d06e48acbf5b42beae4b0fa5c90f64e0bd619e40b1b6d252ced3490bf3530759de5d9df09231f2cc9214b9e6f12ac9f1b2707464a0a8e8989553cd9e8daed8f66adde889c2a68d357ac050e49c662da23ec26c4031127c4d8b1fc1d918efe92a70b8affed34b03bcb3c84cae58ee0ed92fff02a67ab7cef2fdadf15c7c46f8af59307e7aae437058e6cb0fd188fbd3e5b3660b499dd019642bd03d37370beb1532def4a7388d82f6eaae80c52549c56d1f00748223eba143ef31a1320f6340eb3a4f9a007716cf86cd0e34c5408cf128c2de5185200afa2507ca20d0e9bf4b89860cdba7e337d5764ef9721790c6130417671e46dad598a53af2fa26c1e4218b39668135e58d736924d0373cc45b0aace176a3b1823aeadc450de03a2803f146ca1fc001dff4aa7bbdd24b426bafcaffb4795ea3aa29d7fbf7c345651a895d66a7e426c701616777e570800289fdc66565bae93324501c752d58c478928d3919bb2e5694afb599897d616148651d9b859d8802e6ccdaca2ec1c173eb6724cc1211b3861fd1a7767194145e701412e56a4c6cec644ea03b9a722453ce481193c5604b0e124f39ef1491e42b94c61facc13e3b9329067ce6a4d1060dac8d983ed0893e1b3e95b6ce3edeacc43d5c66e49704d1f15ad708422d4634c88334ca90dd81eadc0361ec318ee2e7a4970fdc0d95e970e614d6d6e7719de56c60deee62af48d04570191621004655e44fce5d18377f829db12fd89fdd1e174539f241e41cec6ecc15ad1335f4108f548f468ecdc07a72523df2e32ccfe41dbc72b324ba2184399b96c271cfb94b8462fafcfd3862802bd031b0ad74c1228f23710bc4e63c7392753708472bbe753f133391ed6829058cb1c2c8a3aad78157509d3e0962bbc55bb6b59eb6d51758c742010e2d681fff97626d1147a5f4b9f44108ae392d310fb97b993f3a71d8ec15d8fde65f05db5fd87445b88260d39178988525e48398d2eacd9e6dd06f8ea03765723a697e782067c82136385fab4292d9e0adbb6ad93f93a3b9662068a16a7015a33d12454fab048c2c58d7f36c5090c3c218643bde73f530592cffb8b362f7d75adbf985906fe7b482dc53807c665a7d2aad5e5381753ba588126c7e6197270074199a3e192139f8dab7e710a9e273d10c03fc9b3eed236f2947225c41384d37201e842353747375f3cb07b906fef1ad7b5417e6365f1f2f3a1288237f62d08faab02bce56c98e63d84484d24d20180502fa241f7aa9af87306090f0680055e1016aa1feae93f44615b34429f26c9543330710cfa71629d946c20cce4bae78d437f1e68cfc67a2532aef528a7ef14fed49e82fdb0c47e524f92641e8c0de543305c7bd7c83b1c411be0f37994648b38d1e96436b3d9d97673f820fc268e1f64b038d202d40caaafaa43be35d0c5680954aa9ec4ff777cff827b3be7a683af684bf84e4584bc6a95b16546ef7ebca2206a386f0b52cbbbe5172797c6bf37ed43d8df98a483090ac82eca203d69842db33b1c100867b48075c41118c370800b146ffeae571538b9c2e1873108c4cb90840e44c7aa76a1836d7052e4a7cb472bbd1044bbceb8c432f01540fa8bbd8bf477ceaf66323720dfd1bc2fb7b153ca59e37d4b66ad70e4d02398457426b7f80e8cd6dccfb30d8d8201e5b3aaa63ddf931aa5b2cc82f835ae69fea9a2d9dcdc925846b74ff14dc55cf4410f0535d2110baca08a8a3dc36bdf357cf08b665c2b45f06087f08c41bfbd9c9e7c1a1671b0203baa744e9a53fe4e61915bdb00e19c9e0aa61218e075d95e0f294f144a712009e391b6666d4071bc5404905274cfcfd99472b42c28673daf0b406b09cfb1aeea33d0ba307dc8f09c7d40be793375052b5479b8573d200fc865c79f1a73be883ea0a2ae192661072c4903b1e771d9bb3e7f0f5ec995f1a8ebd39f15879fa6ebe109df158aacdbdb890cd38470a04792fa99ba0663fa16ddecfd550e8c14ddaa7bd74cc43f21b19eb16e6b521d68b7e5237b5e74e8eed3d519b639a87aa5a73685697d821c21494dbfb92d345b9060d5170a8af71dae9360174db60033ac79f2a90dfe297a3101bd8ff5155e8666a4a05ee5b9084c2afac936aada6f2a723f894dbe0cbfc795c894701e372fc5776bf0448c6fe507e491aae49325b3137db8d8e6144736a6086b4daeea141c89cbacb023beee7ae98a54b8f911181abeeccaaaf34bf29e88127d51cd4c7d8550ed0b64a59668bf80a2e06df2ae8b9767f7ec5b7a84f236160d753d263216021a15aa5e33946f7f40be1e754b6d2f7ffb669ae6bbceb1576de55e2f26473bcf54cf5e4a844ee73219157641912d4adbbd9f6455497527b32db675b327931aac634c2679c0fed88f5ff0d119c8a248998a13a98ff4a03a1b5e067002a2d465dc8aff626a527273d6d2768ebef8d453b82f530909c22429ec4f1a5e22db60f0351dcfcf8606a950d66450e1f46e3a714a7f234589050aed8de99aef334cd818f16df2a8a45ea4be94e99e28f252f6bcdb44da6598df81a124a5365b83ac45ca26a4e1a0b669076c0ab560ed6df478aa290ea88a1981822b2b7e1fc6565f2a659909fea3933518bf1553ddf5379add95110ee3b0344d86572d2f6a595c4b5a97a77740d00b3c62309d3fadcfd8eedc6de8d680986248cc086065ad6364fb66eb742548e951489ad7819143b1e2d2761d37e48fd73c0733e3e7a45452c75152ad91d28d2138773016eff7a8be945eace5b0169c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode | 24. 两两交换链表中的节点</title>
      <link href="/2025/03/19/leetcode/24.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
      <url>/2025/03/19/leetcode/24.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-24- 两两交换链表中的节点"><a href="#LeetCode-24- 两两交换链表中的节点" class="headerlink" title="LeetCode | 24. 两两交换链表中的节点"></a>LeetCode | 24. 两两交换链表中的节点 </h1><h2 id="题目"><a href="# 题目" class="headerlink" title="题目"></a> 题目 </h2><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/description/"> 力扣题目链接</a></p><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg"></p><pre><strong>输入：</strong>head = [1,2,3,4]<strong>输出：</strong>[2,1,4,3]</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>head = []<strong>输出：</strong>[]</pre><p><strong>示例 3：</strong></p><pre><strong>输入：</strong>head = [1]<strong>输出：</strong>[1]</pre><p><strong>提示：</strong></p><ul><li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 100</code></li></ul><h2 id="思路"><a href="# 思路" class="headerlink" title="思路"></a>思路 </h2><p> 两个一组进行。首先看是不是只有 0&#x2F;1 个结点，这种情况直接输出。</p><p>然后看当前结点的下下个结点是否存在（首先确保下个结点是否存在）。存在则定义一个结点记录。</p><p>两个一组，先记录当前的下一个结点，再当前指向空，在下一个结点指回当前结点。</p><p>如果不是第一次交换，则要把上一次交换的尾部指向新的 temp。</p><p>最后更新 cur 为 next_cur。</p><h2 id="问题"><a href="# 问题" class="headerlink" title="问题"></a>问题</h2><h2 id="AC 代码"><a href="#AC 代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        ListNode* next_cur = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        ListNode* temp = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">nullptr</span> || cur-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;&#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            <span class="keyword">while</span>(cur)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;next)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(cur-&gt;next-&gt;next)</span><br><span class="line">                    &#123;   </span><br><span class="line">                        next_cur = cur-&gt;next-&gt;next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        next_cur = <span class="literal">nullptr</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    next_cur = <span class="literal">nullptr</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                temp = cur-&gt;next;</span><br><span class="line">                cur-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">                <span class="keyword">if</span>(temp)</span><br><span class="line">                    temp-&gt;next = cur;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    temp = cur;</span><br><span class="line">                <span class="keyword">if</span>(flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    ListNode* first_head = head;</span><br><span class="line">                    <span class="keyword">while</span>(head)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(head-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            head-&gt;next = temp;</span><br><span class="line">                            head = first_head;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            head = head-&gt;next;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                cur = next_cur;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode | 206. 反转链表</title>
      <link href="/2025/03/19/leetcode/206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/2025/03/19/leetcode/206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-206- 反转链表"><a href="#LeetCode-206- 反转链表" class="headerlink" title="LeetCode | 206. 反转链表"></a>LeetCode | 206. 反转链表 </h1><h2 id="题目"><a href="# 题目" class="headerlink" title="题目"></a> 题目 </h2><p><a href="https://leetcode.cn/problems/reverse-linked-list/description/"> 力扣题目链接</a></p><p>反转一个单链表。</p><p><strong>示例:</strong></p><pre><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<strong>输出:</strong> 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</pre><p><strong>进阶:</strong><br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><h2 id="思路"><a href="# 思路" class="headerlink" title="思路"></a>思路 </h2><p> 双链表法。即：定义两个结点，一个代表当前结点，一个代表反转后的结点（也就是当前结点前面那个结点）。先记录下当前结点的下一个结点，然后再反向。最后令反转后那个结点变为当前头结点，当前头结点变成前面记录的下一个结点。</p><h2 id="问题"><a href="# 问题" class="headerlink" title="问题"></a>问题 </h2><p> 这道题是看了思路才做出来的。</p><h2 id="AC 代码"><a href="#AC 代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* tmp = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        ListNode* pre = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = head-&gt;next;</span><br><span class="line">            head-&gt;next = pre;</span><br><span class="line">            pre = head;</span><br><span class="line">            head = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode | 19. 删除链表的倒数第 n 个结点</title>
      <link href="/2025/03/19/leetcode/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E7%BB%93%E7%82%B9/"/>
      <url>/2025/03/19/leetcode/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E7%BB%93%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-19- 删除链表的倒数第 n 个结点"><a href="#LeetCode-19- 删除链表的倒数第 n 个结点" class="headerlink" title="LeetCode | 19. 删除链表的倒数第 n 个结点"></a>LeetCode | 19. 删除链表的倒数第 n 个结点 </h1><h2 id="题目"><a href="# 题目" class="headerlink" title="题目"></a> 题目 </h2><p><a href="remove-nth-node-from-end-of-list"> 力扣题目链接</a></p><p>给定一个链表，删除链表的倒数第  <em>n</em> 个节点，并且返回链表的头结点。</p><p><strong>示例：</strong></p><pre>给定一个链表: <strong>1-&gt;2-&gt;3-&gt;4-&gt;5</strong>, 和 <strong><em>n</em> = 2</strong>.当删除了倒数第二个节点后，链表变为 <strong>1-&gt;2-&gt;3-&gt;5</strong>.</pre><p><strong>说明：</strong></p><p>给定的 <em>n</em>  保证是有效的。</p><p><strong>进阶：</strong></p><p>你能尝试使用一趟扫描实现吗？</p><h2 id="思路"><a href="# 思路" class="headerlink" title="思路"></a>思路 </h2><p> 第一次的思路是，先参考 206 题反转链表，然后参考 203 题正向删除第 n 个结点，然后再反转链表就得到需要返回的链表。</p><p>第二次的官方思路是，使用双指针，先让快指针移动 n+1 位，然后两个指针同时移动直到快指针为空。此时慢指针的下一个结点即为要删除的结点。</p><h2 id="问题"><a href="# 问题" class="headerlink" title="问题"></a>问题</h2><h2 id="AC 代码"><a href="#AC 代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyhead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyhead-&gt;next = head;</span><br><span class="line">        ListNode* fast = dummyhead;</span><br><span class="line">        ListNode* slow = dummyhead;</span><br><span class="line">        fast-&gt;next = head;</span><br><span class="line">        slow-&gt;next = head;</span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">while</span>(n--)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(fast)</span><br><span class="line">        &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummyhead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode | 203. 移除链表元素</title>
      <link href="/2025/03/07/leetcode/203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/"/>
      <url>/2025/03/07/leetcode/203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-203- 移除链表元素"><a href="#LeetCode-203- 移除链表元素" class="headerlink" title="LeetCode | 203. 移除链表元素"></a>LeetCode | 203. 移除链表元素 </h1><h2 id="题目"><a href="# 题目" class="headerlink" title="题目"></a> 题目 </h2><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/description/"> 力扣题目链接</a></p><p>删除链表中等于给定值  <strong><em>val</em></strong> 的所有节点。</p><p><strong>示例:</strong></p><pre><strong>输入:</strong> 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, <em><strong>val</strong></em> = 6<strong>输出:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5</pre><h2 id="思路"><a href="# 思路" class="headerlink" title="思路"></a>思路 </h2><p> 考虑两种情况，分别是首结点是否移除以及之后的结点是否移除。为了更好移除头结点，可以设置一个虚拟头结点指向真正的头结点。如果要移除元素，让当前结点 next 指向下下一个结点即可。</p><h2 id="问题"><a href="# 问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p>链表的操作</p><p>定义一个新链表对象：<code>ListNode* prehead = new ListNode(0);</code></p><p>括号内 0 代表当前结点 value 值。</p><p>C&#x2F;C++ 的定义链表节点方式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单链表</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;  <span class="comment">// 节点上存储的元素</span></span><br><span class="line">    ListNode *next;  <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;  <span class="comment">// 节点的构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="AC 代码"><a href="#AC 代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode* prehead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        prehead-&gt;next = head;</span><br><span class="line">        ListNode* cur = prehead;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next-&gt;val == val)</span><br><span class="line">            &#123;</span><br><span class="line">                ListNode* tmp = cur-&gt;next;</span><br><span class="line">                cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        head = prehead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> prehead;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode | 203. 移除链表元素</title>
      <link href="/2025/03/07/leetcode/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/"/>
      <url>/2025/03/07/leetcode/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-203- 移除链表元素"><a href="#LeetCode-203- 移除链表元素" class="headerlink" title="LeetCode | 203. 移除链表元素"></a>LeetCode | 203. 移除链表元素 </h1><h2 id="题目"><a href="# 题目" class="headerlink" title="题目"></a> 题目 </h2><p><a href="https://leetcode.cn/problems/design-linked-list/description/"> 力扣题目链接</a></p><p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：<code>val</code>  和  <code>next</code>。<code>val</code>  是当前节点的值，<code>next</code>  是指向下一个节点的指针 &#x2F; 引用。如果要使用双向链表，则还需要一个属性  <code>prev</code>  以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。</p><p>在链表类中实现这些功能：</p><ul><li>get(index)：获取链表中第  <code>index</code>  个节点的值。如果索引无效，则返回<code>-1</code>。</li><li>addAtHead(val)：在链表的第一个元素之前添加一个值为  <code>val</code>  的节点。插入后，新节点将成为链表的第一个节点。</li><li>addAtTail(val)：将值为  <code>val</code> 的节点追加到链表的最后一个元素。</li><li>addAtIndex(index,val)：在链表中的第  <code>index</code>  个节点之前添加值为  <code>val</code>  的节点。如果  <code>index</code>  等于链表的长度，则该节点将附加到链表的末尾。如果 <code>index</code> 大于链表长度，则不会插入节点。如果 <code>index</code> 小于 0，则在头部插入节点。</li><li>deleteAtIndex(index)：如果索引  <code>index</code> 有效，则删除链表中的第  <code>index</code> 个节点。</li></ul><p><strong>示例：</strong></p><pre>MyLinkedList linkedList = new MyLinkedList();linkedList.addAtHead(1);linkedList.addAtTail(3);linkedList.addAtIndex(1,2);   // 链表变为 1-&gt; 2-&gt; 3linkedList.get(1);            // 返回 2linkedList.deleteAtIndex(1);  // 现在链表是 1-&gt; 3linkedList.get(1);            // 返回 3</pre><p><strong>提示：</strong></p><ul><li>所有 <code>val</code> 值都在  <code>[1, 1000]</code>  之内。</li><li>操作次数将在   <code>[1, 1000]</code>  之内。</li><li>请不要使用内置的 LinkedList 库。</li></ul><h2 id="思路"><a href="# 思路" class="headerlink" title="思路"></a>思路 </h2><p> 涉及到在第 i 个位置插入 &#x2F; 删除元素时，当前的做法是通过 <code>while(index--)</code> 的方式实现。</p><h2 id="问题"><a href="# 问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p>链表的操作</p><p>  注意，在 private 下定义链表后，不要在构造函数中重新定义，否则会变成局部变量，直接 <code>new</code> 即可，这样就会永久在内存中开辟一片空间存储链表。</p><p>  还有一个问题，我们初始化链表希望创建的是一个结点为 <code>null</code> 的所谓空结点，但在链表的定义环节中，默认生成链表结点会使其 <code>value = 0</code>。为此，需要引入<strong> 哑结点</strong>，及定义一个指向真正链表的虚拟头结点，让其一开始指向<code>null</code>，这样就可以使初始化的链表结点为空。</p></li></ul><h2 id="AC 代码"><a href="#AC 代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">MyLinkedNode</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        MyLinkedNode* next;</span><br><span class="line">        <span class="built_in">MyLinkedNode</span>():<span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">        <span class="built_in">MyLinkedNode</span>(<span class="type">int</span> x):<span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">        <span class="built_in">MyLinkedNode</span>(<span class="type">int</span> x, MyLinkedNode* next):<span class="built_in">val</span>(x), <span class="built_in">next</span>(next)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyLinkedList</span>() &#123;</span><br><span class="line">        _prehead = <span class="keyword">new</span> <span class="built_in">MyLinkedNode</span>();</span><br><span class="line">        _prehead-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        _head = _prehead-&gt;next;</span><br><span class="line">        MyLinkedNode* cur = _head;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!index &amp;&amp; cur == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(index--)</span><br><span class="line">        &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(cur == <span class="literal">nullptr</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        _head = _prehead-&gt;next;</span><br><span class="line">        MyLinkedNode* addNode = <span class="keyword">new</span> <span class="built_in">MyLinkedNode</span>(val);</span><br><span class="line">        MyLinkedNode* cur = _head;</span><br><span class="line">        addNode-&gt;next = cur;</span><br><span class="line">        _prehead-&gt;next = addNode;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        _head = _prehead-&gt;next;</span><br><span class="line">        MyLinkedNode* addNode = <span class="keyword">new</span> <span class="built_in">MyLinkedNode</span>(val);</span><br><span class="line">        MyLinkedNode* cur = _head;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)       <span class="comment">//flag = 0 证明没进一次循环，原链表为空</span></span><br><span class="line">        &#123;</span><br><span class="line">            _prehead-&gt;next = addNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cur-&gt;next = addNode; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        _head = _prehead-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            MyLinkedNode* addNode = <span class="keyword">new</span> <span class="built_in">MyLinkedNode</span>(val);</span><br><span class="line">            MyLinkedNode* cur = _head;</span><br><span class="line">            <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(!index)</span><br><span class="line">            &#123;</span><br><span class="line">                addNode-&gt;next = cur;</span><br><span class="line">                _prehead-&gt;next = addNode;</span><br><span class="line">                _head = _prehead-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(index--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(cur == <span class="literal">nullptr</span>)   <span class="comment">// 原链表为空且 index 为 0，等效于 addAtHead</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(cur-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(index == <span class="number">0</span>)</span><br><span class="line">                        cur-&gt;next = addNode;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(index)   <span class="comment">// 如果下一次不进循环了，这次就不移动 cur 了, 且表明插入位置在中间</span></span><br><span class="line">                        cur = cur-&gt;next;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        addNode-&gt;next = cur-&gt;next;</span><br><span class="line">                        cur-&gt;next = addNode;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        _head = _prehead-&gt;next;</span><br><span class="line">        MyLinkedNode* cur = _head;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!index &amp;&amp; _head != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _head = _head-&gt;next;</span><br><span class="line">                _prehead-&gt;next = _head;</span><br><span class="line">                <span class="keyword">delete</span> cur;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(index--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(cur == <span class="literal">nullptr</span> || cur-&gt;next == <span class="literal">nullptr</span>)   <span class="comment">// 原链表为空且 index</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (index)</span><br><span class="line">                &#123;</span><br><span class="line">                    cur = cur-&gt;next;</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(!index)</span><br><span class="line">                &#123;</span><br><span class="line">                    MyLinkedNode* tmp = cur-&gt;next;</span><br><span class="line">                    cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">                    <span class="keyword">delete</span> tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    MyLinkedNode* _head;</span><br><span class="line">    MyLinkedNode* _prehead;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyLinkedList* obj = new MyLinkedList();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(index);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtHead(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtTail(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtIndex(index,val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;deleteAtIndex(index);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025.3 | Pomodoro Daily Plan</title>
      <link href="/2025/02/26/2025.3%E6%AF%8F%E6%97%A5%E4%BA%8B%E9%A1%B9/"/>
      <url>/2025/02/26/2025.3%E6%AF%8F%E6%97%A5%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="53b6a2b49360e911573deaace1bc831e4f0625ad3c6210a16b5f701e5b3ddc7a">7270f71a1e1dda70b94ec6921889be065fd9138db38680dd6f18788bd85b8a24388682f84bd7de1f4d42f7650a7e6b2e88459223b5ce10c499c00f556a11deb4a90a45c4fabe8a262351b4e3481e0f5acad539d5cb019d929f8c11b1285599b66039978af52cc6bc2c0105e51114fb2a5769aae2166950eae50f6ab3186e8e2790d128664f5264fa1e417232d207fe9efab594ccde595959a8a4c3293a9817512c62f34cd77f471e6022bbcfddf4dbf05a3cf2e90526231a1eca80ba841463258622888e88a90ec1d1b0f6244399e0c47b6be4477a4280686f317bed930cea4f216280f53fc4a477e7399b720daafee798818ddf8df5c19ad3c79747eb5daa030a0638d9a24862436857005887c57e72b2ea2b1f2822d9932965a577ec695813762f67d98bf1ce93341fdeca0a802f6f7f4baf253cb8e0d71ccbbc865dd3bda7417a18ef4846b2e53351b5f9707a8edce697cb2b4670c73c8ec07059fcea8586b39aa7633b82b8443bbc766940c6fb5f5729f21274ef5d1259ce8a456339d0fb648dda4ae84955c7598e1b6acd73b6ce374bafc2f7d31c2093c5c5ed338b1dbcaa2a9db2c11b67a630237addd1ccef6e1c3cb73b44ad010d3a895df1877267f1a863d844c8f43777f0ebbc233b5cf85b4157ecf556f38e0f79cc4e3b205d0f1dc2965b7465dacc777cde4da94ef67828fdd10ce6af7f3690121bcffbae00c4dfa99a9ec1cbebfebc57c36787a7e7ad6c818609f7a7fe430657fa2fa9deeb779a2d39e17326f3ee234304ba519e42ff582a7c721ecf470d4a7e61c46fb86ee5f7d7431f088a8526073ed97d1977da8e1adf600e084a1516a9760e330d030d78b5830a6bf5aee2497464c3cff7c6fb1e6380d3ee8fd25201b2769989b59702c980b6f7eacdbd20dc59252c8eb1ba98b8720fa3d0da2a6b2129c1f0ff7bec03f075c13125855f9468876398f671f364434d090dbd24bf27b679d5ddf5e3dfa1257f7421ab9b9eaa0ad8f6ccce8cd3aea9f44215b5ad9b1deb614e1fe772e2cf604582ee02ef5dcedbb22ee590edb2f21604ae00507f9b277247154f72a5e2c69fea45b3506ba1c278fb4882ee06d7f631eca5309a92989e872f499e1f60e9e7a8a86677710193b8e2afaeedbd7b17a9a3cd481db9836d0ac75875ff289ee85e6f8dcbed1e079bef0f1289debd4250116938157057e4695c3f797ea2d989c2ae9d0f668e2a1a2a8d81b0e782131c5e7ef5b78ca6091219aa8c867ec5891633a19645ac4a6cfcbb726986def79e558f27f08eac2b892cb7fb4e86707128ca9917eaa9709d6a8c1b21790cac0bc9ffa334bceb4f9955301cf74cc90a5c2faec54572df871a35fb0ad98da34e63899df844cab9645b6d53baf72e350979904994103f34326c4361e5a88aa98de88d6c8fcf40c32fe6b5a6c09324f84706947706b05d45a4ef104f053e67e9df239b2bcb448a19621d676df7332f66274ef30a0a9d3a1c894e258ad16d5d3a4109230f0ca754663672469e6ba712a8a345e6f0af63e4064c6986049bfea5768763aeea3cfa99a1abfde80244c6709514c3fa705b970e524856babad1481d9d8796399b052e6aededa4e409b183f9e3ecd2ba56ba21c3204cc56493c68058b966d214742b2b954be2c387651e49f55018275cf6e74253daedf894bfe87f4b64da954f9a61ad59561f0f8c89a9825f165fe17ae8a917296eab8787e8d5a6cf94ad2cfe860e191f8d6afebe07690acb523a2275723d0bb3b47bedb19666b3991ae02af8db1e57beb984d642f4a3aceddbe8310d6771838f47ca1b4ae0c08d39bd9ff8ba3ea3cbd29953266376afc6418fc8758d10d4bb353c2dbcdac10bc252c5e1021a270218f4f8673ee45c533ae5fbe46c3c585c0d1524c2c0022efcc994f4284ab4a5dc0ccfd379b50c57a9a128f1315d8553347abbe310e30ad4984bd939bd3ccfe8e87461c75d3bb76660c2803959aa69e18992d5b64008375b07771da6d263d36c0f4be9f1a6809f43c645dcbc222d1722ac0d0c9bcbe3657ea7cbd380b8c31b1624f0673af11351ee68006b872caafbd9837cfa6d0f28464116ee31cb24cb05ca2c4d7723cf5480f05dcaee6ef805f3b29c1e6793d051c2d5811d07eb03bcd030e4ae04925c0f08ca2c857bdfe116f6ac390c7aeab01fe17fb5402b9097b911314c940135ab7ff5c5c6a188496c8c14bd96b56a76ec8b87e73672a623bf1d61ace98e9c7fda50fed3758a1bf5cb6aeccc2343372ae97cd90010bac445ddf022b8c2e20235902a4c67912a79549e4a16305f5e8462e1a3969f6dbc4d7ba6856b57e5e11ff8b36f0ff437e05526b45657e42b2e59a3aea88b26b35e0a15bedf92812cf6d66f0d80da74d1a53e2588667c6812d6d0ffd5ba1f31879ddfadd842f88db01dd7b41ff8185afc7956d6657ee9b112cd8545f9f90eef9be03401c20e53b5a3940485d1870e369152a766133c4991b30805e87d12c94a81e52e8862ddf0eea0d78972d81b455f505130c3a44d479a7959037a0e75da064d85cf5b34d862576af3128c435e6c840c063f31b1c66baa4f53497de09e8830596ff871e1215db5aad8d4fe26ff321b0a49244a1a042bf44105a8be3f9d61fbc273d2fad7c02913b84b7e1bf7c12c3bbeeeeaefa4c043e5f7449dbee18fdb0891506567440484b9f82fb8baa53db1440fbb4cf3145b0b3d9e3c9746452837188149a587798c5201df608fcdc79302417573c1592fe4412a981a7965cde8eb5cd34bd524820b54a8af6ee8ac8e8d52aaf8c9a51a8c4ffffef49acec5bd25000c73c904249ff500e5d85930dcbec36de98903ff46c11494237ac6a3cd2f7ed109e305383a075b902d82103c33c5b6be1476b71d9485e01a3252ac777b5e9a450837b1b3bbd112fa82b3db0994ad255f64f0950a819431ef9ac6cca3d5c33e3696051ff74b05f4e2b67c392e0d9334557cb17db46674bd1c710f997099d73014c08d0c6c99fb31e14d5fc86bceb2b991bccbc942c1831932949c155e312f36b155223da0873af718e17fa2927d9eb3997cd24e4cf07d7923fcda397bc03d6dbe53889f191d47af298fbb0ad0a9d235e8cd6d2785106294d9ed714ea17467cc04986722295c78b7b422f0ed4c5698b5caf47ff9876fa960588a9f0dec547944163672d684e9573af46b071d8bb531ab0d70937dd01c94840b459a9cf81639eaa156660bd05019acdea56fb2b89e2b342a1176d6cbe515f06cdbf6478e13fd446faef05c04370eaf4aa8915f6651b192f9ceeac942969e215ea14898b278e6e2b093b2881b4bc787b8b12dbb84d89c3422d2ece0cf93aa1a67acb22979e2b590b7b94907445682ea9a1332fd9fe9542b252dab0938c7254f93c933c1c35aac8aa73125db8734b695bf5edfdc0519c5a5bf86c5aff5b6c951bdc8a3ebbb51181a9f89903e74ee07ea3740d1c8616daf86d420f2182b4768cfbf3dd64af30a369e1be8a66235d4ad2a0572399434f1677a83e5c35c1fd74925dadcc0be099b40e66d10309e8015f29eb13c8ba5bc3b6a33a819d77ddd932560d5e6251683784a49c3faf2689f47e175c17cd5e87948f05e16e2f03c7deb34da2b1310defd80d82f278d7961723db519b2ee40fb77867181bc956766ad2bec1a2557f7af9813580aa30003b2fddac94eee02d5590573fea32997ca3de0f3c305adfb8283b1c1cf398e8a2c410742989346efcf2af23fcb33fca8e30cc3d536786e16b7e51e3ccadb1e5af9088129abbad703e78dcee12b5304d9d96800a72856ff7e346f64d68905f6921d71974b50281794f1f6304054ebaad6fb05cac2da6d2edd98da9e879ce1e89c9b8dcd0139f007e318a8c58394ee3af7f59fba71a1e7af112d1e9b81f01fefc22afb67237527f77c3fb7693bc8d7ef73510ace600b27c73d4d47222682d1cae459de37ecebd39027d0feecda059fc68d924433b10b65fa8cd925536a9bf35336ba37f87d550fe37a676ab3a18e67a143b41c27f43302816c8e52657d431d335e61ccdc6cbe083390da2cb7ce6de9f2802709ef3ee36273006fb7115886b4ab40cf9c7b67a23c81513e4e572e1f75fbc38d6393dafc801c2b6cc47728575d4b8694296cbe38b07252b49a65f5efbe9f11fb5a746ccee7f8e3e33511c06c9293a406da178172c561e565a5b2b75146d28b0dd850c43e6319dc5042f2c08812eed4f1020f7888ae68f9388ef8aef128df8ff7a7f758e5f6a05db6baa330e4f778eb5d8f707cc2cb6c33d480e2e66047d080356e194d0ccbda6c5790f3328104d07f4bb7410fd68bab41b642318a4a6e6f3e7a8565fae77853457b9c18271924e6a4b6adccbb86f3d41a01defcbed241665a06cd87184093a3d7f8d03f9b91c5d3bc531abf4e018e2184302590c8123b4bd9e3c07e93e6aabef91cbae1a001ca71bc63a8a1bbd42def364ecee3e86ffbfc15c6c3a66bd705b06b1e1e439f5df37b6507142bb0007581227eec661b4fd7719671391ce6a42e06d595db430c5a6a774287500599aad2b3312bdeacd10e81a07762d301dcf17cd9506480ec377d6d9e366604d29f267f3fd931453783060785619f70ae12140d9f9f2ed806721dea5f5dd7e8b7d0e9821019f938e01c4a957579479bb3bd5b6986c4f9dc064efa6591a36a4932bb4542e6f66d531f6fcaec6152cbd592229a4e242729012e9e1274188d4695599b3b0145e8025d805b39027304968809df4d6eb3e28abe8813b225a7705faeef4ab7c0e6049c2310b51ec63e10c6d4fd78d5f3e925ba741adc77c45010264db76bcb185ee0cde46fb84e009707936fa19cea1465b8f0e70179091bde5fed11569186693cbcf983fe375bf18aa1ba0c6b4168f0d70859aaa2d8d9ef97d4270b4af5d1f9a7fb46c012f17d0341ca840e0cae702e0f528cf2eb16d0f45608f43720a9e77a99b98fd0bda3a6ddead7bcf9411676537e2890e32032274e3d88f5bedd882fbbe21449c00308dc0e469e11e2cfacccec3bed681eb010330c552fc99525a6ae4035dc5c4ad35722ccb46895b34fe3fe3f0ea2c99ac32486782d37569aee5fd8e8c09d4166f5c17f1f754a1f9461152f187fac1f49f39bd1111ae6edc8aad4fac36ab6221c74130311e82381ace258fbf3564563decde44d5b62cfefa623d8813cddd49ad1ef27b93ac822f02171aa6e9d298304e3f60fcea07cdb95539abcd0aefe8009b88f2898c757e34e9a7f4560e5f32a548a8c24f1eada726eadfa4ae2101ea0fb4b1eee3ced73c08785b10c970c289e141eb9610046cb77ad17188a25efbe4a24a3e34f16c5f143562f88f9e2103da301d334ed8ed951727330095ecba8d23e6a4abe41f883ce11e979a158b607838f70f9e132ffbaedc98cc29d001fe13378802b1c7c7482f1c0e2260e50db5b4e217deb21c05fea68abd47a780591aaa54b0a7f27d321fc01ea4ac375f5d1ba80956256503bc39a2282473d1d9a30ef1ba718f512b8ad98e55faf295268111b7bae99143587d22303e0a33422290b37da40b09998123a4a05aa11451b7008639e95776dc1047d37a6099a7ce01d46ffde25b143589a553d0ca3166df0f425dc4c54618497f00cd149f4b856094a78bdad39ee4a57bd45768be2b9fd8ac1f85f00119030fbe5e591066d5e5422f283b448c181bc38eebd55ba93e7379f00ebf9309092cbce65fc0bd43c4f7642d19f6dad841d366315e1bbcf78b34fa4112a99321b5b45ddc6b281afbe191bb827a3c5b20ece8e6de15700fa4b66b630da9f391fe6b13ea97b9713e2905e2facc4850f1b8f26437f935be18c7e0b054fbbe371d1825299e349e79ded1d5c67c26ff4c3e9429af1d62dbebde5ca2a08a5cc33e8c61bcfe86ea927acb023b3352512d4f4a3495032aa5ab2aa0a8aafeb40eaf571e2030651f2d83d5f0f7855f3a405612e1360748145b9bf05d1d167f57a06ded7ff1e5e12a7767e0642cf60492093d17e812401fd8b4c0f83611fae7c518aa9da3177088bff137332bb816ce46197559232cce37db6f3de8be1a2b09153928719bafaafe17a6c9ee15cfe40eea074f1656ceeb2d3d69a29a527a651c57deba5facffa9219f6aecdeb3f387f58a5bdb69b91b37979d6036c6c1cad7f574f8c4c34009340fd899406c74e7cf3d1f58849e498d915495c8b3dbce0b129bc3f0c877e04ddc399f1f16056a166f016abd3cd4be19add895fdd84dcbff9fd97c7a9bbf1a4d9153625bc955586c78ca958fd75c72a2c385c998825be205eed3cad706d9d85d50eca82f5a95a8326d88b7c80fe826751608ba411dc619fd6eeba6a9f64647ba8c6074d6d542acfa73e2169fee34bc2bdae7bdb2b1031aeb9383c04b2befbae19b9d4d9cbde7266f7ac4746752660ed53801e8e861f5332c701816e70d07894f035137229187b16f15fc43301329975e326af8bd65cd4d3822a5d448443f49dea54ed407c3465d9cc0ffd5b357f88292a442fc559ad83ed5aa96e2640e538a90307079c6d20e52397411718665d240adef89b0a300e0dd13bd054ecde1d3b26d655fd277556a6a6297cc715c0a76b5bd6d52d6b779a64cbbb8ed14c4dd8eba9ad6b4c2f3f4beaa447d0c2236e702430c9fcb08f1a9d7d6d4b7998d6a8c095eed4739cc12d758be045d4e6b74845db437527eadfbad4a5c8a7ffefc26c10d020c20848a897c42ec61ecde5625d19444d02def59fc3a44775d2edc099e300f8eaff6d5b77c3728ecab35b148e57027fdffe34bf3eddd3e2f951d88521e5bbb65ee11cdf8938b07bec1c2d2641692c4430b88419baf7b82d013127c74db4bac035fbf5772a43ad186f66073d0bd5b6454fb0bd6c0c362587564c14d9fbb62e3e25e9d8207e4123db3ca52112b74bae5899d41b8ee98d718ccff3dc782718ad7382cc3f502d01b9a96c3626f05a1e9b851920573a4dba94cacaecdaa66c10df51e28e9ae1f297ba6ac9a86c949690e98a23aa635e1ef4d924c44734bb73d79dd348527ea0687da73253716e817009b212f9a0080af91e483440f7c3c74377377bc3bfbc747e6b24c271271240c8873a27eef2c09241bb8bea924f675174b5ccc22df7616b9efbea24b5f6ce555e77814aec90e70d386748b808d5760992506a8ee80301850af335dd972bf92da56e3b997ef634d35c7b2ed460ed7ae73b1ac3d710d8a01dcb62d03e031d9052731629cc3e545026d77ed9ef1bdc5c1404d2be50e12ddbf89a4ae1e35cd20280acaa3c250f8057373443534bc00bd24093b3b2c9626f8138df7c574494bb1850c7371f066edf9db52d3be8b59b00e34301918408aefa9219e98773d5c6d966d25d78302efebc2ac765a90adffe10b080b1a0e827f7da77aa5ac3ee7357eb93bd60676a15e5b796641919bc8b1a397bd4880d2ef278b6bbc205aa2c3582f724afb24aeffe04c5a80c4e73a8f04e2947ada9d7a0dae78281a08a258a9961bcdee2c010eb2288ed5681fe7dfca03dfa68a69e9e0d90d332f5cb16e62ae968e43736ca97b774c79edb2efebfd1123f667c5232b31702d3543e3dd1f2af61bafbfdc03fd1b7d77dd282e7c8cb50229c71ddfbecb3f749cd72f314e0728257ad3674d7c170524e13d3389b7aef6ef2178c38e72f43e73c4607dbabaea4261af321aa3c3d9fbb50ddd427b67651c435c9ddb9e56e5188b1787e17dce7779cbad2a849843281f494b80a2a0b8e1d90ca6286930e734fcf84321a9af2da10078b600dd532882723207db51ce40f1f4b12e7b8d621e4c02e9784cceef43bf97b0947e7957ebfed3e28c3463232b9b7dd8bc1ec7a393bb1bafad04a6e916e4c038d78ed53250c566fb30b708af2c5e3b6500664cf1dc1e591420417c233dd16400b9087f7eac218420044bf4a44e0b3b9f3e09c010d1abb6c021fc2f0c91b519b81455dd6441b0e55d849020ca736cf73259242e235a5cb604c6828b21b72db690cf1737eff5bedd5c6c4e27e5fcaf30117b3bb3dad87b85fd2aebc07c10828cddbb0d2346b59e9622d904e4c341d6b21c188c95b7db5236c2da194faf820dd1ddbcfeb46a1513f4a6be603e15a0e1573802b8ca163c1edf9ce078587a0030043f4570bb7fc411ed5e86d1a342af17551e896f1f2eed460748a0660d4b52348bcce8a693f590d42e8da59c10e947b77fb4f6616e1204f0ed885f23925bc45540cf3d7f7a6911bea3c4d638cb724f91b2d5a7e779aad164e4a0245dde91bc049dafd46822f05af8cb9cc2397599a0760fe2c29bd3b3f5df6b3507d63d8c4aedc1db6ab10eb2942ec76e50f5596e6aef737779cc707482b4645900f57df01b989f48c2476a03690006795e98d98c7c58163520dba23dcc3e3dee9fad4c01d6fa6bceb9ea029a7b9532255b7384870d17b00016adaf971f4695d168d4d24685e983369c58376256a7198da36860aea81582bb755b813ba8c612f0490958740d6e61a29b2bea7553f9de83276b0c1ababfaa6b66772814583dc5994cf7d196244ce5f8e11431c20ca601a7fe8574c288d37d6afb4a05b6deea84baefd712622abb068ecf2ec87f66a349447fe050542a134036fd2e9b921ca73053c9746e303dcb9b236624effc4105fdd968d6b6cc943172ca5a4ec8eead03745ad061327a2f77a3298533c603a897d5a3826fb1716ea107324b067476cd82540d36c343fb21b7ef8d6e07ddeea7a16bf6a00b35b2fc243f6730c87f8a2be1cb4df469bd1f5f211fd985670ee098dac4fc0a5c7730b00be634d3bc2b138d3d886542c8777a89563c1038a6e4a1f49032a199734c6d12e6e1c71d26dd13602291c87cedbdfa50a42259d5214cc5760179446e54b5530ee686caa8f3304d9e89c8969676d3ac840dd7ee4bf9a53e8a3679ac859eda050d90a94797c63a7260ec409207db9a8644c574d68aab5690372c806cbc21e502b4cce97283a62595f96adf9c3df4009e5de141653cfe395a5af11d070d3c85a2aca268907aa269372edbf759d63833a6fba7f078b2d26fc9e80b7926ed8981c664ae79f807d6726a55e51237a09b09415233d069eba8b1d19a027e871291b06b9ddc2a008366f3fc4d609daa218c01db4cb1de512f424d91e1c5a079f6fdfa820d5be7ace26365a10a95b14e33988b836867bf6d07b7a8816b12a233a04244b3ab3c9086f67df932da06c222cfed299bef6ecde1d370fe46276794b361c74342b70be59925413e08473efb354317547f5b5959fbecde2595e93635a75488e6744daa2681b101a8f9f17a80f3e54b8af13221591ec5f6e5b55c2f29a7d0a49afa6405090ef1c10c15353a04e70c9015fc9411dae15aa5299f773fcf4f5ae7942e824ed6851e217bad52e759237df255894989e5eac386a5a610436c4e1a57c9b7e11670e9ca2287ef51515fb72b300ee3c7ea09a38fdae4358c5308c4531a2a258c16be24c40f03be7daf865fc45e621ad9957f126110a1c836a9c1b63af60dce850e948300d1e55e76e7b414ce18a300ba2eda82dfbfc18155b0037ec45e0bd0176d68d933146ae77ca2cef980ef80c23ab39d5fb0a77bf70240252f16dbfd2d5ad9315ccfc33bc491cd1a6fce8f3fd2e4f17ff5f54a0de913db394ba29d82fbf3a740764fe57069dbf763c7e0d9fca3f21f0bc7831633c4eeea9e239dfe809d8ee6c7f4e37355d87f73a6d3e89e438d8761315542a64db713ca3292b944c0704065fc48572f710572d56a3d47d771b3148adbae038e481c3346e9ae84b5a2fa372f335b82e692afb792dd11025371f196329343c9ae3c80c871e7d054917def702547ca07d34f5f2a0d123d8f42b1559b29143e715f7abb0c6f12ad775949746b20a7d83f45b8993a1a1c1e35f81cf1b53d83a3ac6698fd2eca75f5b66755461b4d925090b4219645e824fa20c72288802a9c6e49c0fe6cf9a688060fd5b7ff3a508f3108250332736d04cb330854ebe2298e43f72e82e2f7119d9168657229007ebde1f1abd335006efb9a897201c750ac6b5a36f6d8d67bf1bd28a7b4256e395ffb4d0586824d82a832b5084cee4cfe79a82f8c4730f70160c42cd48c029d7ddec6ea122b29c50554273300b20f31cf53a04501cc2a6ba5c068c5213424d288814cb983158205055f0f674947f110fd4337f39cab6781f6bdd26505af10a09cb66a27d5b2e2fc5cfb109a2b7e833951ae70e628dd2a8edefeedebb33653d1be064a37c89622429c09d81c5de4eb8113033e46a1fb627105f67d95d37c76c3d997b8cb2536b9ba92f95538f3f0f5ad565e65c2e2fd4f25f738a550fcecd7113167fa5cbee655c1871a64f420bf65b1f962195f0bc6236e77b161b3b405d7e942d112e1da5684fcbab49bf551b5e0817e8d8dd7ee87de52d7da71f83ffefe59ca71e85bc3222e094ec4d9f5c7f1046a6e824d01cbfbcb90ed85998867b88d6f57ca15d92b3d71294950f1e72e18468dc22d57b3f1531779a40b353e7c9194e9b0a126b1481b864ff7d8035a828d411dcd2de2cbd7895b151abb7705e63d441c6f3c08ac13e356f20bba458e0958d4af36cb30b995397f7519d7f6025c01e3add28545125d3a8fc207c75767b61781c5c2b9478b424ea6124fd010c7149a75cca7e66dbd9983610bef59c267fb6dcb0cfce86ecb7b509e9ddb4962f4c713ddc43e914ef02c35532f2212388b5aad7a08e308e5e1781008b1218e4f513e39fad0711f8953b7fc3d01b7c2c989331abe41b5caefadb16c2e2a0c3a79f5a4a9e0a759a68054fb7c43bec1ce6aea30ed9937356b680198e24b11217506854562b7a84b790eef07aee98ecc68c11e912154ae7b160b84f843769d537e3d7cd9cdfe220e523743d267b6643e3e932f62c81646c615dbd8030e230796960acc50b32af0fe8f5497c34ce92f156d9b2cccf81f3ae8d7b5ea6133b9a0a3eec92cd9c378f65c8b2e8fb09eedcbe7ec89d0c5f0d480be21071970a6bcd8ea736d98a4575629da6e5dc5b4f3b383f7a92a8b931d04a1eb9f0fe43479898eb7d2492af7052b9a3d01baf11a0bf8b05ce74042c422052b386dea06faa5625e8d221b7f6bcddb5f0ed1fd0b2f0d6d2b8699ae91f985add0e0b9b4b7b6253e1e7a712ed5bc59a28b0569fff478f1cf9c363401092e7b2df5919dd7825f58f5a5035a5328cdebe7dbd668877b6176b85fb7c268221a0f0a5096b8126a0862998ddad27ced4e1da7f775c900596ecd2a4e97eb9fb383b3c74c34b4c9c1540eeb19ee530d34f26fddd09d458bae871a707aa5a1683a7581af54498920907f1a6159de53e5b4fd78c944f35bb8d1e998c9fa8924e9117af1458c0af1af22d18c67d1bdbcc75b976172f6e7223343da97ad3e3c8845efb4e65c8695be19fa03c208786ca3995c09ac479d2025bf0b1c442e570d55f9c99fc0fbca777fd8987d7ec7d711df352b1a98f213af7411dd4e1d4a0ebcfd99a149e5571b10b9aa812324d92e11eb13fcd0cf54dd550d9056b628a6351c2208bed12f8728cf3ea97c596e28745caeb0ac82d4e8af61cf3528e666d4b22ddd94db4155bace71c3961060962dc548093976040b764e5a0ac1c8264e0cd73772414127dfdb76c06c76782281d55f66b8bda9aff7f74408105c6f35184a0b6fc8623bb6df80f566c8520f422017b2e7f9b5482dcb4b27d8204fa78601a2d6f1470b94b216ecda39eb2831515bc22b682953c1d3d765cc3c3fbf15155a589761409980f40304a237c210ef749fda34b652223dd37886ba8eca1b8d46e1da7d19508d2ffae7144a7b00701e9c666c7ed5ca919d3272b3f6da02d8e015736be55f3bc4a78bb12e553eff0fe522d4e977cd93313fae41417b9d77bc5e72fbbed503d2ccff96030857b658b394904b0d3f3504ad3554b240c96312d10f674165c240ddbd823f4688a6f36f27ea0a0c8f94bfdf6c69c8aef24ad6c82a04f8149bbc46400456ac0ddc2c7fa0eeb1f1a5ca7bbbf784a1d14fd8a442d70d70e7b8f0dd1f3df8a35dc3b24795adfeac2728a054eaad45afe098ee5c7382c199361a06597a080552e0e06971983e68691f4446c36f291be20b4ff0da4ce6d3d721962b27c1d276df7f16b2bc01e303e20dfa404f9553a44319d8c8b7bd11f7415c82e14365a97526f0335a0407dc1fe9420305abea84c0bafe818f3624db6e5def7613802c09f41ddcfec54d256d6bef69016a58a765196c9838561b38cfa4c5b1b89ff97dae5e0f17550909ad5812e345df2b56492df1c684d37256c676484dd0aad2dd50745c46d7f9f50dd95c942514eb8d93c398626e40b29240efeb40c8fd2224c86b6bb1a868117f55293545bec7c606f66c9c55931f541bd87b383fb488f0f1db557ebe8840f8f5dfaaed09314f11c885c7592515d982ccbf50e755b389ca53cf097885783b185fa7836b10e72ca826fa34f58a186f3b821234ea10d6a5bc5feacb6755f7f30fc2b9aee6edbebd03f44e549d8d8a810fd1c3c20d8a3f4e541c6b9aff2671091eb098693df570a118e86ef699f00163646daa120a320565ecceebfe0fdcba4deaf456b6fe58d243140cc32e463a5a25709d8a4f08e6549ee6360531aee45bb9f9d17751bc46411bbfe7649cc25fdf5c404cb496bd8d162011caba3d5ad6162c30a3db3075ccc11f631695da483af839f9bb21838a877436b9027e0f6af83dd0388ff062c29fdc17e1708e195cc25d412f79cd1da09c6dbad7b1926d0e93928bc2ec8c26ac465129bbeb6cfe687fec62d9c24fc6a1773ae0f94aa396e10afe5f203ba1bc81546d33e5123bcbf63086f8c8c47703f59dd87dbadd6cb39a10e412cebc07db1ca8f524fb8c08d46bfa73015a9855323ec38ad407ceefbdac71b552e0c6e355d0da8bb8cd723913283a622551687fc1b291f581eb34dd4b2cb10fe9283b19211f76e9295e4f6a9d584d17b2d71769a41c5036852b15ff982877c34a8a5a3362461f69d3eb6608faa567e20700e7b354969f12f4439f90f44c2f9a0e437149ec204bab35a4c1c18650f54b96c104719fe70b82edc932dd75732de5931e9cf52c904a7b111de4c76ea5875544a59b85bafd33e63541c9ede3f569a98f43889a617f126037af9aed1bde7e9a437cd726f22c0104a249cd4ad7766db9e2a03712b9cfc09a9d8881412a3b6da8c6c9b34af6f42fbc5c9f2cdca0cf4cdf733d74d64bdb70bc6881b6b7d91d168693a2756b23a94e8e5379754b2a770cf59c470b7d64cb29bbeb751cc135f64161ff26ddad0fbd2c2eef87f963e7c8aac4d1318c3b0d99ea67de93aee0e9e720e075203472bbb1366d1cbbaf158a3a2bb6600156a365e34e9ccd9b1d74dfa710c496dbb56953d7f685b852013696c3d43a864c1c1622206a9cf2d84a2b0e4d65f7c044c6693670ea3969a7c2645b97dd5d55a67ae60b17d9eaa214ec4276c2eb8e3f79ffb784755f80a5674b4818fafa7d12ea3138f80a45a2a6566006f49727e777f240566bc3463258ee7f6cafe6164d42023d8a246442e9579ea9eb7f7c9440b1db36f9f7ce201642b9326868d29030432d57a0d8558f78e8636e871939cedceb05ed43461fdf52062fb9bb079a58cb2bf1dfaf28b540921ac9b07d2705546f2bd901a50fc888baaa09905a0321b1a4581f23339efc3aa2ad176a60fbfb4e9359d684e1f6cb6b67c98f328275d72d1a5f24114c45df403790b3235154c4133e7c52ed0e779b955962cf9d028b20b77bb18003bdc0a64cea74c14793fc16dce4138be3e3b455ebbc75819b5a907ab6dd32fad576aef03f1338ae6903ad7512ffbf4b225871978c0c3155d5ac96f31dac95b1262854cfba09de0e0ddaecdd0125ff8b3e786ef4384bd724090d1fc91afabdfcddcd98194e5380118db512975cf2a1a57d789e05290fd2a0d38bd8d59f484fcd9ffa4108343b72fce7fa57a3673ce42519e42cea2ba77602450e5935d31cfb287665e00bac03d8623f7ab79105396bfc95417bb3d675d9cce1c22685dc9aefaeccc0cfe231001acba6a9dfef4e5187d3c66e094914b2d1f4bd7706e1f4e1b7adb77eb582536e02d93c5b095f69a8e241e2407182333a38753705e0db71957d66d4259e047919dd2ec6f96611c8aca30d6673cce345c6f88eb8619d359d2299c553e2f434ddb1555220aa61efdbc02d0547613e4949649d347a5948c8d9e9a7790c9fae862d209a9befc9bac01efa95ada9e20239217f8dc90255032154c84c57c945826aaf68070498d4f716d52c379383c181abe102f8d256cc98a8b813611b627168d05e32d127b3308ea8e552076f0305d56b5d89f2bf60452f48194640a37f5f404f1a011d7f2dd6ff5d615e8bb12e178942213a90bde2f5522d041ed966b5f1dd068df7fb127e852b50049c249eeb819d9c93f5be6363539c49fe22cbad43cc4cae7b0361ac8114890c2217feed246509ecd49007aef4f1a22a0ea8e5d021e68db1417c051945ccb226b046a2d9310fa997c1126df8c92779904892e315d07980105702f83ea0d6753d5cc5c9d270c0210841355367826c6a4b952287403c5aeaf52df2bec8435f8cb56a4a516632fe23c236724cfb847b73ce8daad44fb04eac1a192885240a2ac8a25684b79199fe9f7828e4031df5d03639fbf4a4efad76b6af21eb72d5325549a96fd34cb85e728b5e2402ba065ba83fec5097dd56e963a2257cf9045787d9edbe2b324f9c965d95ff4be400ff63962b7c96e3cb648f8a68b089c110e73c4c9f6afcba3b36ffc17f21f249fcf8e10d5f50cf5f6ddc2b85c53310db8fcc1f40909174d8f9cc8854e4c739503158f82e679197ac23897fe4efc1293e2c763cef87ebfbee92cabf06d7e98ef83b35b1108ddb1b39d82c212c6080d402389b9337360be74309b62bd3904985591ae0cf1c67b007b1206712150a456b2d6030762a67e81235ea16e7edb40bb8acb752bb3d2e3e0226c3f16590062030a9a75f35b2427a040519e6ab0777dc86b4642bbd249c0a39647272705f77961c8333dccb30b3b96ec1c8e39a77387f59a93bfdf34dd1ef845c78e0c7738dedb8eca19a77e625b31bea4713b81ffdd992804979632197a156b51b8e77cdbf905dd26ac8c8cf68a59883c765057955513443302d75792c0a90bf734fcf8c7834795eddca0ea7ee5c0471217f5081aff31340eaaa245981f94b723d90a9e0cf0dc0d08f5d1350d91719d4ec39ba9f16e3a69b79a74264425274007a07d5f26756c35723725fbed2b8c7c2cd9e6a6091cb9ee411ad57e39be73577b9a9721ab05942bcb7bd68249c768a4ef1cded63301bfde02067c87d4fd54101601759554d5631a6ce52ccdd750db3b481be144a4c43d18a9865eea9705b8d4c69c98707fac3ae8d0e2e4e3bd8c656b11509c4bd0749a131addbaa906d5f5b8300aee09e85b69164190a1478b43f39a65f3652e87f6a530a3ac769f9ee8dd398e61e94a301d2e404dcc82d8f330285bff90e186b3938c2ffdc2e84e2a6435e7ea54edc4b0dca3b75e65a8b15cd1e590aec59bbd64d5b6d009d32fc6f0b0e69e4b76f7506db3ebd555e68a9dc0ac15f4e4797811d6f4a395ed70c40181020eeb7f8b3b6f150a874e236d9bbf59c2ca06a6092518a56484e86321c8008dcebe79457ccbb80d1eaba03e3d7d8bbe1ec6e7e19e5690f4d4f7120b4d3e8ae58b85ae078390620d42f120765d5c8068e56e56e63143682116cf29e142b20c1a82415f1e71aaf8d10870c005b3af34d006b4d0c3db0a1c060901ee2cc7bd6980334c2889917b732e64d9f97041ef47e0b4b90fa77a3cdb78caa7772afb72773089b05cfe36c34036395e1420d87ba01a4cf4ec10c46af30e6b310bfd0c4adb739cf41381be359f6aa6bf894fd4f79d200b1ce4f9de923f575e05b298138a03fc37cd2b46a7cc8115cde1aebb2b9f15389e60ce0e1ecdc53478d8fa43979b0825f6561b006daab1a390977c1157405627604c1213a09c7d5fa65deb055e2f3590f03d315aa92892c0c3fa5eb564d58573f588f95263b9e5e5a8daf61dfdccee51b8e59bbb08acf6d3fafe48ef4a721c221fabddb169d1d9ab34d27b4173faed1fc76d9c977e958f2a4acda4cf05f6dba5f7b8bbc5aff5a5b33d5db8efa5cfdabc3f5099e7cd575c5e22734d1bd1876f1fcd09c7a400efbcdb95e6618cf0f2018ee6e56c628fb04b13e0987748882ee5817e074f4ca7857bc4a9e3fe77c5af9ef3281e7d5b66f512567c0930a68f8e3e103aef6849286a25125b828fa563623b8e9822b298212082e372422869fb57825a719c6e3f0dbef8027fabc5003f2eef3c72650afb7c27f6ac9045c726d356b1ece1ac7f5a4c3e28201ec04bf75878b27fc343da7719872bb7117a0e13615701a0165a6b8b2fad98f26f64d8a06687d7569af940b77ba69109417e7f74264faa69cd6333055099cbe681e881131889aee4a7438e82a9ffcd03c91fe965c9a05d6d92ff0bb51643493ae661bebe3ed4eb93dd77d884ac5019f7bde1dba280989154ff49201990c44254f38735fa6deda3690351bb581781b1345dfcfe09069ec4a2e2ca593ae6ebed9d2762929e702ee4ea75cd478a64d9584d38b00a2b7d571e5e4491aa1c669e0982e8b8db44411da5445f657a1dd0886230fc6a0ba1184337dcc089e42e6e9eb583cc0c1b5e9f2cb3a2452b22fa6f79c4abad4bdb66b987e21d56b883b7e57b3137583ed71b9248f4e98a62e464fe80e696709e37a290bc6784c2495cae18cfa044254e7d7cbc5b6a0334b5eea5b0147edfb8a194c04f360374ac60b37b5821da4211c1fe6a79e8bb8b0dc422bdbe66c2de5680bd03f24b7dca13e0eececd745bd3bc0a2c041f3d9e08a39b404c739134565c83bfcbf6e42a11ff94c878e345f4c12efd637d078c04dd9d1cf0733a08b2b9347c55721167add135de454237752036a300f53c2aed18b34b34f2bc97768a9bd5bf4700726ca3bdb4c2da0577ade33bbb08f6376deec44ed3f5f6aaa3ea42ad4dbf6ab9ca214ef61ccd927fd70bbc7206a36683e3ea774d2fa9b64c2565b7a0763f43ba90f6465e0cc27ae0c5434cf1739d21370eba0903d52297c873618cdafc513cb650d1dc60807b72db36c74552aad28060885939a403aa85b9bdab3c39ee940faad9f4d24aac6b2a11c7871bba99b9018291ae5316cb7eb464d16a81bbe3ac4c3d636ee1a33939f13b978b21f00890697d4c729493964a2ac1959faf0a4628ee69d688e1d5c0fd68a8ed695f6bd2e8e2b087c3696382887e7ed8423dbbe89a4b5c7c4b8b17a2183591f30275cda44a401625efd67f250ebf0a4d4d3b01eb6b39eb8eefffbf1d0a319ea5c9f35c123811c2c1db5d9ddea363fbb2fe0782e5bb6d348899afb246e683a4c4a0a6f87b9beeb28be42171be83b4d090231720fa695599908924d5b13fb7e8d86439341a47f31fdd32141967da679e5752bccec189daae83ad6a53c645aa0b3f6a17332dbc273782cbacb086fb86412b89fbdda51b02e3226986f55bc3fef064c776c5b5698e8c57b5078b738f994c3769e5006339a7b33d033833fd87653694f478d586331adf82b542f370c8aa41f469e524f76900e0683f4f18640dcd3c06c5b0caf139e95c4aca4cf6eef281ff0e865020dd74c605e6406537df1fa16e1eb74b73497b3f444384efc886a5e8f0252bd6940cb047547fe15286963a33f3704f90343774c7ed0ba45f25be22f5de9dcb1cb45f6b9faa2890a2ae8eff8c74d357757cad82d8b1f79ee4076ad23184a1b84d5f408960cad7409202ef1954f235bcc45d160e6654d94949127cd39bdd2b8b2be4617e8c92901ce0f410bfa496b9af94b4ece6e5ec173e514fbae4c8f3460d7633bf394edbef56f3f099241e71d12a6944e1a0db1f0e3a005f62d4a88966ffc9a58259145656d604fb3d17d8e6a7a0b8ebf3f5a1ac32378248370b697a04369f1797213e39284a3c3e7e2007b5a156c7f296c6bf3deab3028394484e365a2b171bd233f740045680abd8b9675fe7f441a1b9a5fc6464dbfc2397220cfad26bc6f4001b5170ff4e6321048e09244b5c6c4011e651b8771b65bfe89c9a12db59bcb86ef350def39557df2f98489c2d8494dc18074236d0a8a295304ea88d1c72ba4a08850346aa6d01038bf008075c4b53eecdbbccc80967ab171e02e8e6ae3a6c76ec7c569b3ddd5e13fcfb1210d5365619454c77e5e95163845124ce58c7b279b28eb40497e0f9f2ecb24ebbcba7bdc57db120a521d5b01c7f2b77dcf2a603f1aa7aab5940a5710a998d78fe3bb9d82acf1f3f581b8055acdf3f5d007a0bbf0cf8ab885ffd04b48a291cc128f084343ff807dc9757ba2a9cc9175c4acf60ebefb3df2f7bd957b8b6c266a727a64b6011a1db8b4935da060d055e2f8dbf56d884cbf044bde608684e40490e800db5424b320f9a786e4c147b3916e60835f6e037b3cdd82f9af454dd4d81e99047709257d8bdc5988935beb13b9a1fbaed9183d9c6d5525f6bc13254f5bdf863651358ff6989a673b34e2e4b39a2aa9fc106f73a270b4febd10320898c81ebc10ac904ae6d92f63e82ed1b5c27418ffed330bea4a0860a1178502b972852d98e3db3026fcd7a884f9852daa01a80f8b0a8fdb83cc439b9f195700ae83aa3085db7f242b6c947ae7552475e19eb1e3ae11fc61a265e2a7a091c486e592d806bd6a883796d8d83a4cd0fdcdaeead13bf7158b2dd965ce8bb1bb7d485f57b2d5293ead1ad6a5049495df990f28c31ce5c06b61600efec82a652f008a06055efcde6afb8c5475c58472ee9ccb587970f53fa2cfffcf21bd8f33036cd207f5a64c61f24bca7ebd67b14a71ae60236c87d32ccc079e692d6590e04481ecf799fea2c0586f68348e8d069826753ec6ecb7275bae0aa560761ab8ff5aba57c30108cc35831e7d97ffb7a95e2e8121735d7b43f3aa4b250f2d9d098fc3738aeb46a09003f2ea9c5d0dd2d6618e93d6603a26bc1ccc5ceff4e27f99081515d5e7927ef71594e322db7390e3ecdc0afd8b4a050cfd9ea009fbdac0134e9e6c1cb91d55ab1a045f307dba2b32d973f5049d3da2cfe47cce148acd797a0c9798e6480ca5ae8ff63c2b472f38e17b0feccfff5c21a0a86d534272a0bc86a763602a8ef2e478ba6efaeb4bb459c44d6485a2c39de1c06a8851807e9ec9ce527b8591995fbdca5684e78b983bb941bcc30a427d8f5c87d82dddd9e600d9fe58f475ca68f153fb3ca4614a504314a6fd8d2683cdff8a995f568bf0f4de3877d253aa1e3997e003a0edbfba0d1f13b79043364ed1c239cca5b2b885e2bfa5e86af8415e3738f479bdaea5bbb9722a868571c4f40f7d9d09d9f21db169f0415036a9422a4cd83dc81c27e2cfb314c501fd4c69be86791ef4d0dfdc2ed45d513b79b2aa0b7551f70620ff6f67acb445c1427c9de7c604aa49ec7790987e85d18364874f092efa80d6f29be080af5e54c376fd2c8321fcff19f2e48bd202f1077353ee1d57152ea79cd7ff81020a4a53214dfdda36732fd62edb96a840c51b15dfe0714e72239d3c6c237a2c486fb69ff7b89632f34c1c4f9162cfaf479c3feec654bbe60089ba64b882030c34ab569ea1d2d257fb78b93d1beec6cab1f76896604d749d10cbad0eeab19978bd4531d0f10eb30b259c4cc9f8aae105e52d7928db003716235d9531b3c18f3f523a13aba30c85946042a1a2706d7e883ef1b71187df2c43439657c096567c2cf629aef5ae92a5848ae94498a2d396283ebc5f81cebb0439f7d3fbee5de13ce2417b5ec99c1188f2f606853ca1216e28fbe4e932b2e1ea1ce142d7ccc53369d9462b41427dde6e8055231fef55574053455ad6a866ab4486d486d41246dd645e7fa2f4db6f04ffd1e7425bef49189183e14c4b9c9df5dd46add28af4ec775b284e2d8f22ccd7a4beb6f40027e8a750051833f864f1ccb3e9d2c18c60631c04c5e83c083b8bee104485bd425a673d211deb97932615d488f659b283d5651db1f86ba4282a93dca4bfa604248b2619cac5e9ae0a3ca3f2091995220eddf7ceb6aae9750396fe8816c06f7a5c9443180a5bceb35dc0771ad8cb21883fcf187629e8efc8a0a2601cca6ade4a866bc2425d2da4d907d5973509ea236a137ae9fe1faa729c9b4dcbbb901a310f9b002a41568a3f6a39bf7672f36d9b7432167d1085243b7af41359812da6044e2742b815a276e3082dd40b99a0529ef7c7203b108ea1354111d54b4da0ff8458af339b2f5c70e505b95699b47d1636845901a8918f64b55d7ae0032ef1ffe4b32c059f96c60bba1dcda455511f9dc3edfac362b9f94e2b368c49898192071f5816e4160c2c70a227ddf97d991b77a5d4bf5444b2bd728851ebc2ffce4b8871a5458bda0a691b86a6822d766640a9a7ad54f5b3f9125c16dbdb0398c47c6d308be786e71c9540941965895eb5f3b7633060c1a3ab56c43eeb3fdc50d6e59d79a47c98f04987c0c9ae837b2309e5091750b3d1d7f35db78bd03e4ae371992cd58a07bee2d66c5afaed0b3a8f4ba400a0b76f0dea094da36f74008fa30adcc0964750f32f4dc1728cac4d2d8cce2470d09077909259b0591306bc4441bbf1139505994bbb4f41af4ea100f9ddaf324be0f66751cb2db1bce899627e9ca6f13059396ad8cc9f520801c5d065c8461b2ddcc65ecc91a2772604e72861448d58afc191f128c3de0b11bd0d66dcb6d4fe5a1fcd97d3701cd803ff57902ffc7596da92a4a7a29147a0b130fda8046a67a76f363839f869d420c2936406be705354c32a9f1773211be196ff9156ac2d4d62bb066f21a292fb1f62af164a38aa59d3e1b3bc2bcb828986b060ec65650b83a956fce24f4cd56c31e481959b8277e28aa93acce980e92792f2ab84ac62df8c74f1e038ad35b67a0caaa20ad1de9a05206c567ee1584222cf2302c7e08b90c3ca3b6dc176babd8cbae70f45ba85f70db2b1b7b69df59bce04c7c6578311310bf3ae85156c6d7cb3c11d6b0ecac1102b878634382bc22510c93a4ce9fbfd45c28e720f999cb312e2da9aee74881f5937f7c1f061433ad3b770fcdfba63ad56e5f79bdd99dd7cb1c371a3fffb14a99a7d0610b0d9787d58b2be61baae1b3c91727e9a984e6382b348e07fce312cce04e919d2871bcc0f9f9d09df393359a3db5268f4a5fd6dcf5300843756ed455ba2415462cd4ea8cc2953cd2d79eac5ee6e3d7bf6a2db7640d78b32c1bbbcb8fb6fd51b4fc4a38dfe3ff5fb634f8bdbb0f6d8addad107d7cb59f4ee672b0df870690ed1dbcf25b306a848d9fa1899a28ae9fca35ad200ed8437525d98e43dd46344d60aae4c0b03b68466ebedf84e3136d40f52f5bcaa522d709647c259e7df8a6684689fdafde0c450094039bdb0cac1aecba25506fb818ff2b401ec80a29c0284a602abc06c53ff2cefce66b6d6150a9bfb2a9c194428177771b081ad06e5beb777e68af02df5b7783dc8b35c514e70a7c622cf0abe844cbaca8168a68883e42e9ab61c25b84f53649bc110b7c3b2e5f73fcdab19268d9add8184de6edde68ec7368ee814edf269f81415299696ce13e3ac28fe48da6f025d20e46214d7b4b54b9213992a24f7abb35ff3a9b487c08e285dd7f14b2ba8af5dbfd64586311eec278192abb245cccf2ac07f338a8025f3abe1e2ebf3d83bd412e5c853f4d692ebd286164d43b5a74c5922bb27c7c5e44ddf7bdc357eb36ac2ee2f2e92df9a2ddf7b5b9bb645b7a7cfdef39a37edce7d388632076ee56f47fac10755338da2f6545a0add74fb3e838ea64d6f76eb614af7bcf117098cf59ef333932f5a8966492b943546ee8cd77a79a9b94d90beb5d00be39200cb8d678ec1a7d0d47a88e713c82ed360a949ee35c8f3c47e6d908a3b1a708b0f18770172977078ed573d53712f9d59accaf7558b45ad246b0b60fd6bd4338074b6cde75ddb7bfabf4177ed0e8f129c43600edc0870aa41c99d9657f4152a23dd864a304679b9e6aece733a411ca14dabf51630063b7dbc7c09380b2973fd81b5434ea0579b4d427f7ad53435424f3685e25344d34c8413b206eb95926e9b2c40a1c0e9766f0712a49f070c4bb27919cdce1a74d1736ace76a42fe44c7ee5cb2cf0ce2ed4654294cef1c16d9a5fe1110a0a3f41203c5ef92af39559572905fe38c24e71d83da4db1f31d7c2a3b6ffba6e235d390053640a250f06761164b4dd2cd1d1522f92c8046a3927f7641b825428d85bbdb4025286beed64575ae779626eb9018adb9529415d0f5a201ed410040b939cc173963bef1fe942be1e086634d4e912ec22049872d0c17be9a8f1e2923a77c3c312f200904dd11e715f86d4b50827af1acfaf9c1ee41a8dff625e3ed4813d8e739743940cdc40eceeec8c78f797c3af99d40dcbb2887a86835e3b06131ce11f7cf7663aed1c3e615e2609a05ef8f299e22fb93e3efe6aebb054c811fd34a3afa5580790604cda71bfa991c3358ac0e6237c635770c258e5866fe732d01cd6b5b226e81776ec3f4db6115871f5b1303472c431459da2d5b7f56e28cdbc4be229b3247be58f95ac4e3268a2bdd6d03ff9c4685259c0f82f2457e8c88628a67fe82f4ad6bca7aebda394cb61b577f2123485f5402d77100e9b836990483e0d689fdcad0470749a900a2be63dad0ef4d8164d0efc952f32ad314216d5e8d95f82fd3da1b15ad26a3b2a76a410aea2068a5521ee7579414d889265920b47c1aadf88472c2452d0884b62587fda2eb5b50976566ca60bbb39094a28b7189fb7026d402958d97a552cdf57bc918f5ca555ba39702f5dcf9f1b00b508f6e0a5c6b54bf225f9e0fa039a5057b67e6e097e9b458f1fae2afdeb17eb67f2332d882f7dd67c5296677c9c1b459b1c57cc21bafca0b276820007db0c3721c49036cf8432de128f03f17ce5cf3a5d7afaf1dd236d94d1b3401640e1600d2d665890acc6e45a5931fd78ec682c31b5bf9494afc4456bbc31802b3bc7b14c27fdc1e0d41f72e8257a5b6393326aa818b305241be4d7f51e471a349e8193d0df682edf3a614303394b24e6304b1724fc56a052bb2acc263da3f6f3727e1ffbdf45a9defd462e8879e3fc77716cc22dbdf8f91a7cf455f2144aebd8d21cc27286b5fce07eb236c85e47628d878bf82f8e4db6354ed961a65e75b7c359b4c850f8f3ec526ef21bf21ca3962fee958581eedfad7144c73b9ea287e03bf5f5ae1b1ccbaae10575ec25b1c598bb509e6e29a53d056fb9339558743440c533c31b5322380f8cf7ddecec9de43e391cd9d330156e25f4d707628a8f9f1064c2f06ca4444567f38e7bcc5998bcdf154e35b90a9a461c14128d4210ab39f3664129748a9feabb7c2208025ad9f41c941b75bcb52b11c83aaa48667805d8ee92122f22de71cacc26cf42a387e37ee01766750e4bae760936a7feffcc8b44ddda2d29176bce02b760b25d8c82e235a29f63f51ad4170472634ac22669ccd1822867a23d7e0faf6ae19ae5192add79cf76f79f0ae46a46af0069564070e4328c924e94755f7306e99575c7034ac07d9b1167fc8dd0ded46df1cf21586e6d53f1b886332a2ca0f380aa2df3da26518795499b4a9e7624b93f2120ee2ea287f0a07f835d25a92152eb5f7cb502889ce96503803cd531d64ad3cdd04775907c57b78e237840cb644ec696c74b36e94faea748d0a7491491e81b1359a03c0824cb7261397a4ec4c6416abc58a32c963d58e5b6940adf6762207083c2bd96840130e43ea6a9ec1a5f4fab0729c854fb689075600f70186eb2153c09c633c4c83b37676edb2e98ee497a92aa3467d602579e06f3be5d558817003c258df21369a7c636069c0d4cfdadedf5bf35dd8d74693cbd98fd5532e6dc7692b4e65797715e68cdee70e8943e0aa09c381d80e24bc83e688725e48fd684d8e70f8b59e359199483cc091e68a932b4d74f6a92a33322b069dbf21ce23d47b4a29a090aedec0d1b76d83a55a87aaa366e284bcd2e2b78430e89e8c9d68575c6de6eec2cd61fee814b10b0e4fad508e8c6d9b03c2857ebc0d8a5fa936cded9af8cc83c871a22bf0843219e2c0d033a18defe8496875f175b3a6b0ad02666ec7e1fa38f535db8180828978dc747b5ff08bcf5f9d06ebb992aee8498832c61d54b1040e2d26118ba688867dda83e3c83c6f42826a4fe80bd96a1f97298968e4aec52c43df535e26fa2029392cf08d767bb9582861a8704085ca23e1daed6b5031b4f25e665ea42dcab17e63f20fe2128acf0f2f0f942c13fadd0aad862acbaedd08ff2bcc89aa96ba55907eb779d3f2c32a676235667e85b327663979be14ae81c33ee822cc267d466180fc3a3a104753c7dc69d63b0fc858c42afcf38d96662e7577003cc10d181e15f77d5890a967018cd446f09effaa19ad99e00654efcecf786dbef9f2e5dc57766aa4058d09afb3b971160393bff9e46299b1e7ef7d4b98c5bdddec46e344cd8a524566e4d70722dccf5c4b2f4d299cbc9aaf60c8e0ecf825e3a0920da039da067807e931eb1a590e8a4ee14283395dc2aff07e777d4c3879ac6a3717de668d3063cbbb31593e7a665a3f2d7bee2ea5d3872f99d105efd386247d32c36faf640a488af27b48f22cbc1946235e3189a65ce74540821c6d1dba650fc68fb2bf0adc2e918edd45da420fee6c79a39a26990cac3f41b4ef641d715c2ec1d8c5b4904815bc87a10070822245e9bd1526164d1b11971a6caebe58b8efa48549f1936c2a7b5a8664fac88068f03587b68b499b9fe69648357e2d9e9847e660670434b9aca6f55653cf0835f7f76a2839664ce6d3eb74c131c9a334a3383da155df4ab0a9d1a9859f8af290bbaff7f9d46488d22b48b2ecd8210201899cb2047fd2a75fca2489969d042e4c55a044f7f54caa9af355c232994db7cac468c26da393801b4de3f6071a7c0a5f27c66e78e9812c20d7580a67821d9f7b548b36dacb94649af84ba1f5dfc1a1dffa31932e8717e209e1867e60e4670f1381266153ede416d56d8a655519d69d03d3e410c46d7ee2c3976119931350859c23d8f5405fcac1e50e7a52d748b59267d6757d5dbdbabca4a8ad44e34848486ef180bc2197adf901b8cf735d068d1e81a706fdf1bfacab3f57802d7d45873bf0115ce177464fc34951b289ebe2f92e728a88035f4f9889bd1e4ac193038fcc5931fe08b1d6ac4b8a3baa0e9360f8e949c41a1db2be23c09564b2c7bcc4c251403d15df18ba0a3221a48e75efbeef5c3067c33de815fd19ed5e08563ff7ec5c14e5656074463468ff64386f5aba7bd2528fb5d2bc3f0146f4388935733a5552eaa9dd8a9b7e36580133a5abcb4df7e78fffddec60bbf94caeb3ee29944823a3c6f312ab9129de5402b3e396d479324e51e2662ae58fb7a8856d3ad4089a1617a8576ac87f9a848c062d3d3879035a1e11a3fa27489eef20188cafef71820f9ba500c8dbfd9deb24de4b405a9c84515ce5d3190e79063cdc18fe999288d7fdee582539fc46c2cd94d9d2151c674104ef992b5940a61b688784cbfd06c557c544865864fc062ae4aec2326e8f2ad4260e1e8954b4fcacbb0aec76301e0028716a72c70acf1ae440f147584e2d3c9b5a719b8273c660830915e3c8187be7437778b7371203566e156507b3579e4622fee79b2df06e53a57a8743e83d92cf475c4400c85263680850685de594594a4ee61e08b255e8be5eb8b6bbf06953545440e638a4f4d02089f19f7dac438b02cb427dfe077a896e87304df2d615b807604b600cbc876a78767a7140c9ebdf58d31b902a848c0d330b80c5570090dcc3666852115ed3fe3f33d3153fbd3c77a25605f25ce002598127c385d5a0bed66734da4a1cc30f642697a41cfd2c6a4b237958c7dacb0c2ead9feaa1422fab8c8f4401110d769057d0064f920d7779884a78ba86bb0ccdeb90eba7c79aeb7cdd6818d10ec9886b1c9b5799824a9b229186a037f7014db2cf70a65608391dcec56467b2858019e1718b1c24b8887d851fcc0a4c907dc1215f7d2e3ab0bb0fb3bf1f4fe7d629ceb1b2ac3d486afdf068cea4b164c5a85c5867d4e68a072c8f1c39b01cf730658af0b5f55753124e96000747e2c540699c44627c907e58a8e30199c3af08ebbd6c711d433b9ea05d53d8a932c7906c75a39b9a184c544a17a36a07a3f3753c93bb6c4a0cb89619ce2d733b95fb154dd3a839530814689b06215781f873326d5b0c311f442d2a9774eb5755bf574c91494dd2831fd85dd2eb52d5e92c14e1ca022a5022259561ceb226dafe2436f2e854a124d073591acb1e811e6b26fbbcb312267e8d5d5ec0378fac560ad0d28830db2ba096742723462db8b861d553e95ec10018bdf1d1ef369406d7cdb016991bab43eb84988fc83bb2ed009cf5b4ad70cdbeac4d8ae9fe0fd642475d6bb811783884b768153e007d9c78e595bd8ae005c32b6f9f7850a6bb0348f0e3203953f2082b285344fb41c2461bd86f3258dbf711ac6ce0a95a3fe015dc143cb1c64911b6c370619f28c198c0c62d92678eff448232173b82875238f52ba78572785972f8a9f802fb60cf72f47cb0539bd44a01fa500a076ecb3662c5ef55aef27d66f69a9698246af764faad6d5b841623bbc045d93fca69ed56a416cb7d8bc3ac8a0d65e2eea3c2e1718b6a0c0fb5b690254c9ce9424f95c9f99e45a6d4c0c6387b566fd0c0e237327ded855d5d186fca0aceaa51b17c559f2eb60b5fa8fb5ccbf998f6ae8ec11f2b3b3ec3f58eee9cd7e958f14337dfe2c71e13b8928ba94210a26d68a763f8f9db0dc96beab9e79bb29c0cc3beacfc4afbc49536ffb14f9c9aff26e1bd5416551b6b266db0e3eb9e320a84bd8f15bd87f1e1e5f3cc7a693fea777679d4776ebf83b0f77734f72a5ca16d27802f0a596a62598383e050c8f08220e05008cec1658ec703f4c931bfaec6570861dd40864df0f5144ef6dcf843851041a4a4cc39fe242349a7cbef6024abc9ec605b09d958e249c4151bf5e8733a37c9e16390576ee7c476bc1236f09e70abff8c7245cee9c55a08028cda8e0483baedbc9a8aea701d316780c452214cf32b57266be7fd45db59c82d94388aa1fd470a8b385422539e4369073469ae4df9563b0dd4c84d23ddf907a19eb33ea25e78c58458ce442085164c8e2bc74461aad7cd560c26392d930073afa2a81b4ce9fb8c8eaee759789327f7bfc8c25fa1acb9faa81a467b04a873210d9f0a957863307a1e09743d2a97c0d215ee04591934a6ee2cc4a5de62858e8a31c70f3be0f0e065b2369321b03f908deb20989cbb96b7a779b9496120b2cc1e2d354b6693079970bdf730bb717e238012a58df5e9396ddc00ed0063123485e1054c8ad118260c7f0360bb55f8a969a7e3349e3a0fcdc92a9a15f281ecd48c23f5f5ec3f435b5083906539e4516bfd9bc8907e19bf4c73a3030825bbaebeb9583bafc4bef603fefad22693fc36ac4b39b68f7728491c8ff7f5e1808b93471f6e8a3ce56770f4b737c64ce973e04f809fcf7089a09528a5378a55d911ea4a30d1540d995f5dfcf294f2b91bcb3d5c3604fef6f6a588bd5b3c47a288b863c4140a0673b343e6a17b3c1c7e5f561353f0faf86a3fed72a86aefb05563ddef2e1172166e47908daea492e602462aef659e4695f7150cd089d510b6971ed665864b5d8e40ed06436ccc01ddad567e83ef134b6fb6694d092f4c52b680aba9f010b481a4f25673c6dc67cc14039484240c1888f5d6ca1b97620a0fcdcb62dba021eb8e10af12517a535b9cb17ddf5aa7dbf46c09bbf2e2f821b54b57f0d61ebfca557dbae2039726c5fe4edd45afaa5c908dc52dddaf76cfb4543c2dd4fedb8728075898ad5f21df4042008891a292cf08464a729660eebf3fe29c99ba13a5da083c5f5453bee7147ac7285d78197eef93a5f76ac8301e22cdb418432d0f5d27a8170d2fa0435075e82a6d80bbcd9042d8faa148db6d96f7ea2b136e3531e55abcebf5b08ba810207c686d8fc23079763d654ca9379b21c41e035fe677f82f086ccc34636e01d03659d2d7c3293a6ac180e8d5563a37e78e910cc22d286c744f1b04abea7a09114a4dfd6b326d6023f93ed4a44b6df6a577e9636dd2515d24499354dbac2eae91e83756b9f0a71ab6c614342b6e19a1649877a623f683143365bae704aba5a9289aaa5983ca90ac7ae6007ffc8af60797b3d240110d5bac7483fcb99c68ec786e85c983ddca8461e5853568fc30367d19e2f3fbd3ef17c06d14063c1d8f65fa14bd9c5efc722e842c5e9a515adcd73955bb3863d06ae65a5a72aad9f8b58e44f9bedcb66a32d984d8db6bf07ad05e7613bc441c701ba604abbb8a47b595ed8e4ce0bd2561ddbc75b5fb2fcc9b2c4691d922c9f7bf90c170dc99de28c02b37cf0d7c68d5320f3e9861310c2f010a9090fb49d50864a9fdd597d9010599e31a2d9d01694681c0bf92abef0757cd5f023d13ed7ae2ff19cc59e4eab8903a013a4c041478d0b45fc4422d5347bfaaef0cfe2ec0f6588b281bd6a0a0e50238255f75b44f6d204362fee97c4d7cd7aea8c69b483380da08ccd10ef98e3532224650e55dd80e0cc83cdfa878cd384b94634e0da59a89cb041bd41f4342893ed261e1192b128d7c61d22b5d9f2bd612a0c569fbe5730d0c6276993e98e635820220a1320dd1fd2ca3f25f03d7ff93c808c5643951eaec3305b9641319364f6bf3280759f32d1851e6f4fa6620c8ca0cf38be111ddb83a0160ef90b22d3626d59998a499a09161e3f8d9cd9e4c1eb8246374530167b442d4b4fee120c93422e263c5c33cfde046c09ea6ce73e505e813324e438280e11ab2b78cd37e99187f450030c3ed3024420fc3ba4b9ec452389016c06d375763d09693c485aa65f7517ca477d30e879266cec98d95d856b9c7996628ed735c01cb3d06fa0f83fe72d0a9456a01c93d59530664b8a62ccbcaab285110890e0b59ed407db1cf17d01c318b2985bd282879aa69ef95e5a46f1319da120b4fd94e3b1a433dfe2400c7b9921e5cacb5f4c5511a2f79b82f0823419dd17d9a0307366a40a44e4938b6aba4f9cfd3ef6d771b08a7fd766064b8231f941a313c54131408f10bc0d10dfce43903787883e731eb55fed4728a0ba684614e6a911714cad3277553ac88534222dc657dd87ee6db315a00cebd0cb59588ea044d5176bc0cae094df1d8c3f80f431e9c1b9ce2f9f336088ca3a6a69507f042dc84ed22286b670701c7b4a24ceedf637f94c644e9532e11da5971cc08b9a9b96de57110c6ec792f23d60c48020e2bafc565156ce639dad28bc3c95b74a32e8fe9334d64cc11c07161d277b5b4c6d8ff7ccf61c3fad4ba4d06072499aaad6b268a8ebb1ea53e13e5ac158afb736f7da3110e059ab78b62cd8a1edb7c7eb6edfe8512230730dc97c9c96ca5025a1953479db5dc00d61b5b1e3723574cbb5c6a740edd69276738a111f4ded93b0ba2c4a41cae0f2d953aa452d78b98ee5e8dbf0610f2969243d473df6605ed3cdf1e83fe262f2b0a269043f123b5fb4b80761a69fb4600b8eb31c7204c3327e9d618070db0371e3d24bee7dd59c152c88846899356b75ea3fb07efeb358de5a98e1b168dcda35eef7476c42e50cccb48e2a318a8291f4210ccfc499de13cd6e9e8d2b9049511f5bdd83ace4d8033311050299d17a2d03e02f2359008bf0dcd3cd26cdbb1d825c0ef7883da501e28e49fc1dcb10c2bcd082addd080b8d4e8c03aeff63aa7ee665367bfedf9ca36d5ffceb2cb915ee8cd40fcdffd41d287415fbdb21432f3cfcd5cefdde744f48ae871384e6bbc707e6d07c366c8820ea78afe5043bc4c6f330063e5afc0ed2d5440ea1870f927b18588a2978048f316218c3c278faa235ed4f9ab692ab76a58926c61c1dde0bc40a7f9a39a71b4333be7b41f4c39319be3a065dfc278571966a1222b4a162df32f6b54d48de660b50f08872260b62adac13cf51c594e9334e72f0973809d9709d041d9a7b88ccb5bd7f61dd5fba00afc3426bf40685d397035abc227d4520d295d566ed9fa0a4c1ee47964ed9279e2538c64d02cbd6abe83b6f68eaa94116ea8412bdeab89739365541471c2287c0439d328a4e73ef39be027a824654b968ded2f149cb1de7fb26e4aedafa7a4ed78400a3507eb2482ae23b722a867512cb2748b40d6300d7aa4f2df38b6eb68a811ca03eff8aeaccfb006423f39954ec7adb7dd89ce17ba56e2d9e4e3d651063ca8e1ca722156e89eb1f18bad91bbe546424162f5c406c6b02e044d9bd622117e4f800ddc643af7a31ec28de7bf2dde058061c0a14920f296bf3c6045ee6bb76a818cad590a35c87e7b3a7fc9d7651078d6bb166337b20dea4220224d2133f15dc732f3d97d3d43fedc4b9cd40e5482bb99a457d8a75d7dff19d144a21312cc5e6a5172620050d78ac3512f4cb2e0a1fc8c9beec07b484386fc73331ade65a8beea4dc82d3e1d13f2721c9eddd307cd6eafc61cb41f4679279e70df14513de20136b8ad3adaa922acd4a39f8a13d963a5116343fdd161fd94030e8ea7d4a283eb2571d26c8b6a9ad01a49d2354a96dc3828ad3dd0ad557427b1489e5f7d0c39a9d2439379bc6ba27d62f328610f551a8b7240873fba6d1a2bc01f474569cc3416ce7df6dd87ac55ca71082e50dda3f1c4d1eef82669fed65f288b5c000ad9e824a93aa292f46d9e2a734170f773f0a36920e89d8e8c00c31f0821e60dbb3ba330c50e9ca640b60f7e5003bff2faa2835d0e18dad0cc13a425d77c7c7832717420cc9d8a6923d2e9d812a9cc5760d57a660440200f80226d5272e89f0a9a14ed82385c6e53787bc7a214382f12b30ff64e86fdade610e8f5ae24b66d95bb1ebe20cf61cb85558c5731ed9f5d12c4aa785d21114fb697ffe6e77b790c694177a87dcb1710b0d4fd3f48164d49290b307051ce373dd833569c5f3fdafa45b07b875cc50f5b71aa262cd62b4a2bd89140a7e0d1f083c44a6c764175b3cf1425fe941d510ee26925e4db3f6ae8088b16bdd76c8a5b86143db64c5c9e5090f3f9e8278b5829ea8cd153c41142fb5755c37341d8b979ca02b7ef78f9cda6720e797906fea709c756607a6f4c412a85915ad338b87da52c08df1fca1df1fc8ea228f4c218c163424740f23ae24fbd156c471398eb2dfd61183a8b597cdb821c98a2c4a43d3ba50cb9fb810c11cc049e38fdf0aea17e0f522260d143febbdc2ce8e32f4d9c7cb99f431bc85ba5ec68ef8b7ee96ea62028bf26a9d0757213e7659f878749fe3ec838d1c3627f25a48ca62662f708acba9d143162c7de0d5fe95d1a43cf2f1af649fd85cc6c7c59001ddf1da39bd328e837a870272f4dcf57c2e2b992f10f4e19dd1aed48c0d305d0bad7747176ea3b80fe563b6a825c1d91ebd23ddc93bec14d99993a036a8d16722d95ea9fe0adb6abfb1c4ce7fe70e070afbb125cf4908a8f3a2f5300657ea6124981d6735fbff1f7d693c9c5f18abda4dc4e00225816d2246d3350e9d9849dc8922edd01c87b9d297e73ad10d5e6a1d8bc6973c958a7e787096998f933f58a3715afc79fbad75edfc064854eda4adb8ad4a82f6ee284728cdb4fc763dcba13cc7aea98b413983aa976d6838b9614b00bd22b91a2ddf54083c70b8536c41f33d839e41cbc8e8a8f3b962f001a6cbd732ffdf1b2e02f3198375f63378ba1a0aa55daf44cfc3c718821dbc815136a95c684fc270b15e0c78091e68280816f24eba9821475da1ebbd8d26dc3abe019e23c666ea461dfd47666d58221c360197d1dfda7aeb3987b07ad675f3a9465aa3494f5cbf2ba5cfbcee42faebd6383c6eaabe3f77224f3bd60e1f31945879b842b5c099ffbcf791437f80c0a84eb0ffc704dab0a3dfae2bafebbcff0a1cf5c77e01fcb2037e193767cdf04776f461b9ed0d05dae2dae0c3f4d1b844f3306525798d8cee0f15bea0783c4e65d6587ef9548e0240b9eac64cb5f04b9be1a278744f53524be836a794f0bee31b917a6cd9437a9664f2320895f2024dcf6f9f221439b8f3b86a97ff370c336c15f7a6e12a83736ed3288ccb87721fcb1f23345d10e8baac04e2b85d7351f32c982b90a26266f874b2effdf0920566f4d8466b873cb4fc45ab03b36a4d466558845b1b4d894d33bee005adc95749692376179ea7a92ba7b15198e863d76e35edab80936af3595ebc9127e191c8a8ff6789c15ebb06c431eaba6945be858aa3b398289d1155286d6d5dba0fd46138b7f17f87a066a42d93d01e517bbd34fadd4c69fee75d726fdbd3ddb3726460604d57853e708c4f5ad17b77cdd1bf4c0c40d47bfae913e49b62885ba0dee0a20b7d97b6a1dcc4e9b3f26ae6437259f10b27e2ce730fb2bdb8639f61539c38b5726d57c9f716efa93c1a858a025a0fc2a498135289a62946904d863135f2cd36589766144a20334228015aaea1f542675b74b2c1be9e3e4e4875a2a763c103050345ae4f2b2995638ce1c5243f374474e2d407cb03b2ff41a761e7ed86f5a57975be854663185c69cc1e6210c08c3ac4bb1a32b4731257f459875944165bf48247d3187d3e24b9b6e3eef5a50ab264a6df468f221f4f531fc97cc5f77ebf3489ad4343805d26547c3059341a00f4a7ceeb3afb05f3330ca2a7e407a4ce469dfcbcd9a838195c0ce94c4105cb323884e1c978df1f3c77eea90bed540aaa6f2e896d920be0d5470d0f67b1519ea60f9a42b1da367119493de2ca799988c9e2377179408701a9be178f1d6d3166e667f5e301e5926e4394ede5702d45a063ef7e850b42b57fc46acb4388e3bf1c1a325bf8a95a449214de4e833bd8d863134c5c243a0a066d8304d3a0ca793caedf092ea50ee524eef3cc024c53080fafa04027295dcfb20720c6939e38be28f66f093e664207039b3981bdbef8a7b2370bb379832c4ceeffe9a9e67017c77752d245e23d2ebbbdff6686091aecc026bf0a25038c80409b25ad4faf556d74cf1a538aba6da0681a5a65ef2ca390c1118d9ea338c98f7c949157ed43593db5955841df1177bd2aba10c27bdfa9d9cb5bd258bce4f378ab2a4b409280c56ed3a1e7b9354b3a1f1531cdb6e2e897b3799a389d8da5f8d8b9b2cbf025038c0661c0ec341fd5d3b581b5cae5c9dca184c713a67f5541618741e4f38c9fec853623877ffac24e43a4ab65cded7734e773133aa4f78bbd7e3063a62ee80de68872ab1ec0b8266a3bc127236df13a0c271492efd9adc2acd796bfa57c0beb390ec6adcced3025ad9ea1c9c84e99136b089602ec22be4f150f6557ca5b871f78b6a4dc8309d8b949ca9284dadfba092324dc46b7da3b1b1766b1f0ac172d48b1624dc93127f419678c796dcb38596c3f064a00e2f4beae957dc4d3c8fdcbd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode | 54. 螺旋矩阵 II</title>
      <link href="/2025/02/24/leetcode/54.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
      <url>/2025/02/24/leetcode/54.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-54- 螺旋矩阵"><a href="#LeetCode-54- 螺旋矩阵" class="headerlink" title="LeetCode | 54. 螺旋矩阵"></a>LeetCode | 54. 螺旋矩阵 </h1><h2 id="题目"><a href="# 题目" class="headerlink" title="题目"></a> 题目 </h2><p><a href="https://leetcode.cn/problems/spiral-matrix/description/"> 力扣题目链接</a></p><p>给定一个包含  <em>m</em> x <em>n</em>  个元素的矩阵（<em>m</em> 行, <em>n</em> 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。</p><p><strong>示例  1:</strong></p><pre><strong>输入:</strong>[[ 1, 2, 3], [4, 5, 6], [7, 8, 9]]<strong>输出:</strong> [1,2,3,6,9,8,7,4,5]</pre><p><strong>示例  2:</strong></p><pre><strong>输入:</strong>[[1, 2, 3, 4],  [5, 6, 7, 8],  [9,10,11,12]]<strong>输出:</strong> [1,2,3,4,8,12,11,10,9,5,6,7]</pre><h2 id="思路"><a href="# 思路" class="headerlink" title="思路"></a>思路 </h2><p> 紧接着 <a href="https://leetcode.cn/problems/spiral-matrix/description/"> 螺旋矩阵 II</a>的问题。模拟思路和 n 阶方阵是一样的，即使变为了 m 行 n 列矩阵，仍然是 <strong> 右下左上 </strong> 的规律，具体用了上题的官方思路。</p><h2 id="问题"><a href="# 问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p>第一次提交错误</p><p>  方向左和上的时候，循环判断为<code>for(;j &gt; offset; j--)</code>, 事实上应为<code>;j &gt; offset - 1; j--</code></p></li></ul><h2 id="AC 代码"><a href="#AC 代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; output;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = matrix[<span class="number">0</span>].<span class="built_in">size</span>(); </span><br><span class="line">        <span class="type">int</span> startX = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> startY = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> mid = <span class="built_in">min</span>(m, n);</span><br><span class="line">        <span class="type">int</span> loop = <span class="built_in">min</span>(m, n) / <span class="number">2</span>;   <span class="comment">// 循环次数</span></span><br><span class="line">        <span class="type">int</span> offset = <span class="number">1</span>; <span class="comment">// 定义边界应去掉 offset 个输出变量，每次循环此值加 1</span></span><br><span class="line">        <span class="keyword">while</span>(loop--)</span><br><span class="line">        &#123;</span><br><span class="line">            i = startX;</span><br><span class="line">            j = startY;</span><br><span class="line">            <span class="keyword">for</span>(;j &lt; n - offset; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                output.<span class="built_in">push_back</span>(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(;i &lt; m - offset; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                output.<span class="built_in">push_back</span>(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(;j &gt; offset - <span class="number">1</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                output.<span class="built_in">push_back</span>(matrix[i][j]);    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(;i &gt; offset - <span class="number">1</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                output.<span class="built_in">push_back</span>(matrix[i][j]);    </span><br><span class="line">            &#125;</span><br><span class="line">            startX++;</span><br><span class="line">            startY++;</span><br><span class="line">            offset++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mid % <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i = startX;</span><br><span class="line">            j = startY;</span><br><span class="line">            <span class="keyword">if</span>(m &lt;= n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(;j &lt; n - offset + <span class="number">1</span>; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    output.<span class="built_in">push_back</span>(matrix[i][j]);   </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(;i &lt; m - offset + <span class="number">1</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    output.<span class="built_in">push_back</span>(matrix[i][j]);   </span><br><span class="line">                &#125;                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode | 59. 螺旋矩阵 II</title>
      <link href="/2025/02/19/leetcode/59.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II/"/>
      <url>/2025/02/19/leetcode/59.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-59- 螺旋矩阵 II"><a href="#LeetCode-59- 螺旋矩阵 II" class="headerlink" title="LeetCode | 59. 螺旋矩阵 II"></a>LeetCode | 59. 螺旋矩阵 II</h1><h2 id="题目"><a href="# 题目" class="headerlink" title="题目"></a>题目 </h2><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/description/"> 力扣题目链接</a></p><p>给定一个正整数  <em>n</em>，生成一个包含 1 到  <em>n</em><sup>2</sup>  所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p><p><strong>示例:</strong></p><pre><strong>输入:</strong> 3<strong>输出:</strong>[[ 1, 2, 3], [8, 9, 4], [7, 6, 5]]</pre><h2 id="思路"><a href="# 思路" class="headerlink" title="思路"></a>思路 </h2><p> 首先思考螺旋规律。取 n&#x3D;1~5 尝试初步发现以下规律：</p><ul><li>第一次一定向右填 n 个数。</li><li>随后一定是按“下左”“上右”的顺序填数字。n&#x3D;2 时，只有一次下左，没有上右。</li><li>每进行一次“下左”&#x2F;“上右”，下次进行“上右”&#x2F;“下左”要填的数都比上一轮少 1</li><li>根据四种填数方向改变 i,j 值</li></ul><h2 id="问题"><a href="# 问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p>vector 二维数组的操作</p><p>  初始化一个 vector 二维数组如下：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">table</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>))  <span class="comment">// 定义了 m 个一维 vector 数组，每个数组长度为 n，初始化为 0</span></span><br><span class="line"><span class="type">int</span> row = table.<span class="built_in">size</span>();      <span class="comment">// 获取行数</span></span><br><span class="line"><span class="type">int</span> column = table[<span class="number">0</span>].<span class="built_in">size</span>();<span class="comment">// 获取列数</span></span><br></pre></td></tr></table></figure><p>  这样等效于定义了一个 m 行 n 列的数组。</p></li><li><p>第一次提交错误</p><p>  for 循环中需更换的变量错误。之前用当前 i,j 值作为循环变量并≤n，当螺旋越来越“向内部”时，此时 i,j 非零，可能 i,j 在循环开始已经超过 n（n 是递减的会越来越小）</p></li><li><p>另一种思路</p><p>  题解的思路是，每个循环都进行一次右下左上的操作，考虑边界时，注意每次少填一个数，例如 n&#x3D;3 时，每条边就一次填 2 个数。最后在考虑 n 为奇数时填中间数。</p></li></ul><h2 id="AC 代码"><a href="#AC 代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span> dir = <span class="number">0</span>;  <span class="comment">// 输入元素方向，下左对应 0, 上右对应 1</span></span><br><span class="line">        <span class="type">int</span> currentI = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> currentJ = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> value = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">output</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(currentJ = <span class="number">0</span>; currentJ &lt; n; currentJ++)</span><br><span class="line">        &#123;</span><br><span class="line">            output[<span class="number">0</span>][currentJ] = value++; </span><br><span class="line">        &#125;</span><br><span class="line">        n--;</span><br><span class="line">        currentJ --;</span><br><span class="line">        currentI ++;</span><br><span class="line">        <span class="keyword">for</span> (;n &gt; <span class="number">0</span>;)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!dir)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 如果 dir 为 0，则为下左，否则为上右</span></span><br><span class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    output[currentI++][currentJ] = value++;</span><br><span class="line">                &#125;</span><br><span class="line">                currentI--;</span><br><span class="line">                currentJ--;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    output[currentI][currentJ--] = value++;</span><br><span class="line">                &#125;</span><br><span class="line">                currentJ++;</span><br><span class="line">                currentI--;</span><br><span class="line">                dir = <span class="number">1</span>;</span><br><span class="line">                n--;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    output[currentI--][currentJ] = value++;</span><br><span class="line">                &#125;</span><br><span class="line">                currentI++;</span><br><span class="line">                currentJ++;</span><br><span class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    output[currentI][currentJ++] = value++;</span><br><span class="line">                &#125;</span><br><span class="line">                currentJ--;</span><br><span class="line">                currentI++;</span><br><span class="line">                dir = <span class="number">0</span>;</span><br><span class="line">                n--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode | 904. 水果成篮</title>
      <link href="/2025/02/14/leetcode/904.%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/"/>
      <url>/2025/02/14/leetcode/904.%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-904- 水果成篮"><a href="#LeetCode-904- 水果成篮" class="headerlink" title="LeetCode | 904. 水果成篮"></a>LeetCode | 904. 水果成篮 </h1><h2 id="题目"><a href="# 题目" class="headerlink" title="题目"></a> 题目 </h2><p><a href="https://leetcode.cn/problems/fruit-into-baskets/"> 力扣题目链接</a></p><p>在一排树中，第 <code>i</code> 棵树产生  <code>tree[i]</code> 型的水果。<br>你可以 <strong> 从你选择的任何树开始</strong>，然后重复执行以下步骤：</p><ol><li>把这棵树上的水果放进你的篮子里。如果你做不到，就停下来。</li><li>移动到当前树右侧的下一棵树。如果右边没有树，就停下来。</li></ol><p>请注意，在选择一颗树后，你没有任何选择：你必须执行步骤 1，然后执行步骤 2，然后返回步骤 1，然后执行步骤 2，依此类推，直至停止。</p><p>你有两个篮子，每个篮子可以携带任何数量的水果，但你希望每个篮子只携带一种类型的水果。</p><p>用这个程序你能收集的水果树的最大总量是多少？</p><p><strong>示例 1：</strong></p><pre><strong>输入：</strong>[1,2,1]<strong>输出：</strong>3<strong>解释：</strong>我们可以收集 [1,2,1]。</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>[0,1,2,2]<strong>输出：</strong>3<strong>解释：</strong>我们可以收集 [1,2,2]如果我们从第一棵树开始，我们将只能收集到 [0, 1]。</pre><p><strong>示例 3：</strong></p><pre><strong>输入：</strong>[1,2,3,2,2]<strong>输出：</strong>4<strong>解释：</strong>我们可以收集 [2,3,2,2]如果我们从第一棵树开始，我们将只能收集到 [1, 2]。</pre><p><strong>示例 4：</strong></p><pre><strong>输入：</strong>[3,3,3,1,2,1,1,2,3,3,4]<strong>输出：</strong>5<strong>解释：</strong>我们可以收集 [1,2,1,1,2]如果我们从第一棵树或第八棵树开始，我们将只能收集到 4 棵水果树。</pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= tree.length &lt;= 40000</code></li><li><code>0 &lt;= tree[i] &lt; tree.length</code></li></ul><h2 id="思路"><a href="# 思路" class="headerlink" title="思路"></a>思路 </h2><p> 题目的本质是：找到最长的一个子数组，此子数组的元素种类≤2。</p><p>基于 <strong> 双指针 </strong> 的思想实现。定义快慢两个指针，再定义两个 int 变量 <code>fruit_first</code> 和<code>fruit_second</code>分别存放当前子数组的两类水果，初始化为 -1 代表还没摘水果。再定义两个 <code>output_first</code> 和<code>output_second</code>存放输出数组长度。</p><p>然后让判断每个快指针对应值是否等于当前存放的两类水果，如果有，说明当前子数组种类仍然≤2，令 <code>output_first</code> 加 1。</p><p>一旦快指针发现第三种水果，此时将当前子数组长度存到 <code>output_second</code> 中，修改当前存放的两种水果类型为 fast 指针和 fast-1 指针的水果。（此时 fast 指针和 fast-1 指针一定是两种水果）并令 slow 指针指向 fast-1。重新令 <code>output_first = 1</code>，令 slow 指针向左移动，直到出现不同种类的水果为止之前都令<code>output_first</code> 自增。</p><p>如此一来，发现第三种水果并经过如上处理后，在快指针重新向右移动前，就可以得到新的子数组的当前长度。</p><h2 id="AC 代码"><a href="#AC 代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">totalFruit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; fruits)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> output_first = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> output_second = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> point_slow = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> point_fast = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> fruit_first = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> fruit_second = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;point_fast &lt; fruits.<span class="built_in">size</span>();)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(fruit_first == <span class="number">-1</span> || fruits[point_fast] == fruit_first)</span><br><span class="line">            &#123;</span><br><span class="line">                fruit_first = fruits[point_slow];</span><br><span class="line">                output_first = output_first + <span class="number">1</span>;</span><br><span class="line">                point_fast++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (fruit_second == <span class="number">-1</span> || fruits[point_fast] == fruit_second)</span><br><span class="line">            &#123;</span><br><span class="line">                fruit_second = fruits[point_fast++];</span><br><span class="line">                output_first = output_first + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                    fruit_first = fruits[point_fast - <span class="number">1</span>];</span><br><span class="line">                    fruit_second = fruits[point_fast];</span><br><span class="line">                    output_second = <span class="built_in">max</span>(output_first,output_second);</span><br><span class="line"></span><br><span class="line">                    point_slow = point_fast - <span class="number">1</span>;</span><br><span class="line">                    output_first = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">do</span>&#123;</span><br><span class="line">                        output_first = output_first + <span class="number">1</span>;</span><br><span class="line">                        point_slow--;</span><br><span class="line">                    &#125;<span class="keyword">while</span>(fruits[point_slow] == fruit_first);</span><br><span class="line">                    point_fast++;</span><br><span class="line">                    point_slow++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(output_first,output_second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/01/03/jourial_24_01/"/>
      <url>/2025/01/03/jourial_24_01/</url>
      
        <content type="html"><![CDATA[<h3 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h3><p>A test.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计网基础</title>
      <link href="/2024/10/21/%E8%AE%A1%E7%BD%91%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/10/21/%E8%AE%A1%E7%BD%91%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章 - 计网体系结构"><a href="# 第一章 - 计网体系结构" class="headerlink" title="第一章 计网体系结构"></a>第一章 计网体系结构 </h1><h2 id="1-1- 概念 - 功能"><a href="#1-1- 概念 - 功能" class="headerlink" title="1.1 概念 &amp; 功能"></a>1.1 概念 &amp; 功能</h2><h3 id="1-1-1- 计算机网络的概念"><a href="#1-1-1- 计算机网络的概念" class="headerlink" title="1.1.1 计算机网络的概念"></a>1.1.1 计算机网络的概念</h3><p> 计算机网络：是一个将分散的、具有独立功能的 <font color=red> 计算机系统 </font>，通过<font color=red> 通信设备 </font> 和<font color=red>线路 </font> 连接起来，由功能完善的 <font color=red> 软件 </font> 实现 <font color=green> 资源共享 </font> 和<font color=green>信息传递 </font> 的系统。</p><ul><li>计算机网络是 <strong> 互联 </strong> 的，<strong>自治 </strong> 的计算机集合。</li></ul><h3 id="1-1-2- 计算机网络的功能"><a href="#1-1-2- 计算机网络的功能" class="headerlink" title="1.1.2 计算机网络的功能"></a>1.1.2 计算机网络的功能</h3><ol><li><strong>资源通信</strong></li><li><strong>资源共享 </strong>  （可共享<strong> 硬件，软件，数据</strong>）</li><li>分布式处理</li><li>提高可靠性</li><li>负载均衡</li></ol><h3 id="1-1-3- 计算机网络的发展"><a href="#1-1-3- 计算机网络的发展" class="headerlink" title="1.1.3 计算机网络的发展"></a>1.1.3 计算机网络的发展 </h3><p> 第一阶段：ARPAnet 阿帕网→internet 互联网→Internet 因特网</p><ul><li>因特网是世界上最大的互联网。</li></ul><p>第二阶段——三级结构：NSFNET</p><p>第三阶段——多层次 ISP 结构</p><blockquote><p>ISP：因特网服务提供者</p></blockquote><h2 id="1-2 组成 - 分类"><a href="#1-2 组成 - 分类" class="headerlink" title="1.2 组成 &amp; 分类"></a>1.2 组成 &amp; 分类</h2><h3 id="1-2-1 计算机网络的组成"><a href="#1-2-1 计算机网络的组成" class="headerlink" title="1.2.1 计算机网络的组成"></a>1.2.1 计算机网络的组成</h3><ol><li><strong>组成部分</strong> 硬件、软件、协议</li><li><strong><font color=red>工作方式</font></strong><ul><li>边缘部分<ul><li>C&#x2F;S 方式</li><li>P2P 方式</li></ul></li><li>核心部分 <font size=2>为边缘提供服务</font></li></ul></li><li><strong><font color=red>功能组成</font></strong><ul><li>通信子网——实现数据通信（下三层）</li><li>资源子网——实现数据共享（上三层）</li></ul></li></ol><table><thead><tr><th>分层</th><th>备注</th></tr></thead><tbody><tr><td>应用层</td><td></td></tr><tr><td>表示层</td><td></td></tr><tr><td>会话层</td><td></td></tr><tr><td>传输层</td><td></td></tr><tr><td>网络层</td><td>路由器</td></tr><tr><td>数据链路层</td><td>交换机、网桥</td></tr><tr><td>物理层</td><td>集线器、中继器</td></tr></tbody></table><h3 id="1-2-2- 计算机网络的分类"><a href="#1-2-2- 计算机网络的分类" class="headerlink" title="1.2.2 计算机网络的分类"></a>1.2.2 计算机网络的分类</h3><ol><li>按分布范围分<ul><li>广域网 WAN<font color=red><font size=2>交换技术</font></font></li><li>城域网 MAN</li><li>局域网 LAN<font color=red><font size=2>广播技术</font></font></li><li>个人区域网 PAN</li></ul></li><li>按使用者分<ul><li>公用网</li><li>专用网</li></ul></li><li>按交换技术分<font size=2> 电路交换 报文交换 分组交换</font></li><li>按拓扑结构分<font size=2> 总线型 星型 环型 网状型</font></li><li>按传输技术分<ul><li>广播式网络<font size=2> 共享公共通信信道</font></li><li>点对点网络 <font size=2> 使用 <strong> 分组存储转发 </strong> 和<strong>路由选择 </strong> 机制</font></li></ul></li></ol><h2 id="1-3- 性能指标"><a href="#1-3- 性能指标" class="headerlink" title="1.3 性能指标"></a>1.3 性能指标</h2><h3 id="1-3-1- 速率"><a href="#1-3-1- 速率" class="headerlink" title="1.3.1 速率"></a>1.3.1 速率</h3><ul><li>即数据率 &#x2F; 数据传输率 &#x2F; 比特率。</li><li>单位 b&#x2F;s,kb&#x2F;s,Mb&#x2F;s······和存储容量不同，存储容量单位 KB,MB······ 1Byte(字节)&#x3D;8bit(比特)</li><li>1kb&#x2F;s&#x3D;10<sup>3</sup>b&#x2F;s  而 1KB&#x3D;2<SUP>10</SUP>B&#x3D;1024B&#x3D;1024*8b</li></ul><h3 id="1-3-2- 带宽"><a href="#1-3-2- 带宽" class="headerlink" title="1.3.2 带宽"></a>1.3.2 带宽 </h3><p> 用来表示网络的通信线路传送数据的能力。“<strong>最高数据率</strong>” b&#x2F;s</p><h3 id="1-3-3- 吞吐量"><a href="#1-3-3- 吞吐量" class="headerlink" title="1.3.3 吞吐量"></a>1.3.3 吞吐量 </h3><p><strong> 单位时间 </strong> 内通过 <strong> 某个网络（信道、接口</strong>）的数据量。b&#x2F;s</p><ul><li>受带宽、网络额定速率的限制。</li></ul><h3 id="1-3-4- 时延（延迟、迟延）"><a href="#1-3-4- 时延（延迟、迟延）" class="headerlink" title="1.3.4 时延（延迟、迟延）"></a>1.3.4 时延（延迟、迟延）</h3><p>数据从网络一端传送到另一端的时间。单位 s</p><ul><li>发送时延→传播时延→排队时延→处理时延</li><li>发送时延 &#x3D; 数据长度 &#x2F; 信道带宽（发送速率）；传播时延 &#x3D; 信道长度 &#x2F; 电磁波在信道上的传播速率</li></ul><h3 id="1-3-5- 时延带宽积"><a href="#1-3-5- 时延带宽积" class="headerlink" title="1.3.5 时延带宽积"></a>1.3.5 时延带宽积 </h3><p> 时延带宽积＝传播时延×带宽</p><p>bit&emsp;&emsp;&emsp;&emsp;&emsp;s&emsp;&emsp;&emsp;&emsp;b&#x2F;s</p><ul><li>即某段链路现在有多少比特。（<strong>容量</strong>）</li></ul><h3 id="1-3-6- 往返时延 RTT"><a href="#1-3-6- 往返时延 RTT" class="headerlink" title="1.3.6 往返时延 RTT"></a>1.3.6 往返时延 RTT</h3><p>从发送方发送数据开始，到发送方收到接收方的确认总共经历的时延。包括：</p><ul><li>往返传播时延 &#x3D; 传播时延×2</li><li>末端处理时间</li></ul><h3 id="1-3-7- 利用率"><a href="#1-3-7- 利用率" class="headerlink" title="1.3.7 利用率"></a>1.3.7 利用率</h3><ul><li>信道利用率——有数据通过时间 &#x2F; 数据通过时间</li><li>网络利用率——信道利用率加权平均值</li><li>利用率 U⬆→时延急剧增大</li></ul><h2 id="1-4- 分层结构"><a href="#1-4- 分层结构" class="headerlink" title="1.4 分层结构"></a>1.4 分层结构</h2><h3 id="1-4-1- 协议、接口、服务"><a href="#1-4-1- 协议、接口、服务" class="headerlink" title="1.4.1 协议、接口、服务"></a>1.4.1 协议、接口、服务</h3><ol><li>实体<ul><li>n 层实体——第 n 层中的活动元素</li><li>对等实体——同一层的实体</li></ul></li><li>协议——为 <strong> 对等实体 </strong> 数据交换建立的规则、标准或约定<ul><li>语法</li><li>语义</li><li>同步</li></ul></li><li>接口（访问服务点 SAP）——上层使用下层服务的入口</li><li>服务——下层为相邻上层提供的功能调用。（垂直）</li></ol><p> <img src="https://raw.githubusercontent.com/EngineHeating/MyPicGo/main/cdb01baf6ee019a6acbf8ff48abf415cbbce4c25fd6c71a5448ba7b66934edf7.png" alt="图 1"></p><p>分层结构包含——<strong>7 层</strong>OSI 参考模型（法定标准）、<strong>4 层</strong>TCP&#x2F;IP 参考模型（事实标准）</p><h3 id="1-4-2-OSI 参考模型"><a href="#1-4-2-OSI 参考模型" class="headerlink" title="1.4.2 OSI 参考模型"></a>1.4.2 OSI 参考模型</h3><blockquote><p>为了支持异构 <font color=red> 网络系统 </font> 的互联互通。</p></blockquote><h3 id="1-4-3-ISO-OSI 参考模型解释通信过程"><a href="#1-4-3-ISO-OSI 参考模型解释通信过程" class="headerlink" title="1.4.3 ISO&#x2F;OSI 参考模型解释通信过程"></a>1.4.3 ISO&#x2F;OSI 参考模型解释通信过程</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/MyPicGo/main/33a47b539b6dc2be3879a5fea7901cf795a1d9c75e46f3f5c73a0a99965f7ee5.png" alt="图 2">  </p><p><img src="https://raw.githubusercontent.com/EngineHeating/MyPicGo/main/cf6fdc6ea8f5e9ccba0527892825df0997e8e8fcb414af9273753655996ff13b.png" alt="图 3">  </p><h3 id="1-4-4- 各层简介"><a href="#1-4-4- 各层简介" class="headerlink" title="1.4.4 各层简介"></a>1.4.4 各层简介</h3><ol><li>应用层——所有能和用户交互产生网络流量的程序</li><li>用于处理两个通信系统中交换信息的表示方式<ul><li>数据格式交换（翻译官）</li><li>数据加密解密</li><li>数据压缩和恢复</li></ul></li><li>会话层——向用户进程提供 <strong> 建立连接 </strong> 并在连接上 <strong> 有序 </strong> 地<strong>传输 </strong> 数据。</li><li>传输层——负责主机中 <strong> 两个进程 </strong> 的通信，即 <strong> 端到端 </strong> 通信。</li><li>网络层——把 <strong> 分组 </strong> 从源端传到目的端，为分组交换网上的不同主机提供通信服务。单位 <strong> 数据报</strong>。</li><li>数据链路层——把网络层传下来的数据报 <strong> 组装成帧 </strong>。单位<strong> 帧</strong>。</li><li>物理层——在物理媒体上实现比特流的 <strong> 透明传输 </strong>。单位<strong> 比特</strong>。</li></ol><h3 id="1-4-5-TCP-IP 模型 -5 层参考模型"><a href="#1-4-5-TCP-IP 模型 -5 层参考模型" class="headerlink" title="1.4.5 TCP&#x2F;IP 模型 &amp;5 层参考模型"></a>1.4.5 TCP&#x2F;IP 模型 &amp;5 层参考模型</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/MyPicGo/main/51248ac10db8175939f50280bba99ff0f3886eee1a1fe264a6927963f3545b6b.png" alt="图 4">  </p><p><img src="https://raw.githubusercontent.com/EngineHeating/MyPicGo/main/8db1c2ac5d38b8757443273867c143d0496d7286f8f10dd7ed972dae44c88bd7.png" alt="图 5">  </p><p><img src="https://raw.githubusercontent.com/EngineHeating/MyPicGo/main/668c098fbf9dedc275ca9b670cb8fb588dd8dc0ec72c8d4da159b21d0d8ee3ce.png" alt="图 6">  </p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="第二章 - 物理层"><a href="# 第二章 - 物理层" class="headerlink" title="第二章 物理层"></a>第二章 物理层 </h1><h2 id="2-1- 基本概念"><a href="#2-1- 基本概念" class="headerlink" title="2.1 基本概念"></a>2.1 基本概念</h2><p> 物理层解决如何在连接各种计算机的传输媒体上 <strong> 传输数据比特流</strong>，而非具体的传输媒体。</p><p>主要任务：确定与传输媒体 <strong> 接口 </strong> 有关的一些特性。——&gt;<font color=purple>定义标准</font></p><ol><li>机械特性</li><li>电气特性</li><li>功能特性</li><li>规程特性</li></ol><h2 id="2-2 数据通信基础知识"><a href="#2-2 数据通信基础知识" class="headerlink" title="2.2 数据通信基础知识"></a>2.2 数据通信基础知识 </h2><p> 源系统——传输系统——目的系统</p><h3 id="2-2-1 数据通信相关术语"><a href="#2-2-1 数据通信相关术语" class="headerlink" title="2.2.1 数据通信相关术语"></a>2.2.1 数据通信相关术语</h3><ul><li>数据——传送信息的实体</li><li>信号——数据传输过程中的 <strong> 存在形式</strong><ul><li>数字信号 &#x2F; 离散信号</li><li>模拟信号 &#x2F; 连续信号</li></ul></li><li>信源——产生、发送数据的源头</li><li>信宿——接收数据的重点</li><li>信道——信号的传输媒介<ul><li>按传输信号分：模拟信道、数字信道</li><li>按传输介质分：无线信道、有线信道</li></ul></li></ul><h3 id="2-2-2 三种通信方式"><a href="#2-2-2 三种通信方式" class="headerlink" title="2.2.2 三种通信方式"></a>2.2.2 三种通信方式</h3><ol><li>单工通信——1 条信道</li><li>半双工通信——2 条</li><li>全双工通信——2 条</li></ol><h3 id="2-2-3- 串行传输 - 并行传输"><a href="#2-2-3- 串行传输 - 并行传输" class="headerlink" title="2.2.3 串行传输 &amp; 并行传输"></a>2.2.3 串行传输 &amp; 并行传输</h3><ol><li>串行传输——由低到高依次发送<ul><li>速度慢，费用低，适合远距离</li></ul></li><li>并行传输——8 条信道同时发送<ul><li>速度快，费用高，适合近距离</li></ul></li></ol><h3 id="2-2-4- 同步传输 - 异步传输"><a href="#2-2-4- 同步传输 - 异步传输" class="headerlink" title="2.2.4 同步传输 &amp; 异步传输"></a>2.2.4 同步传输 &amp; 异步传输</h3><ol><li>同步传输——数据传送以一个 <strong> 数据区块 </strong> 为单位</li><li>异步传输——将比特分成小组进行传送。<ul><li>可在任意时候发送数据。</li><li>传送数据时加一个字符起始位和一个字符终止位。</li></ul></li></ol><h3 id="2-2-5- 码元"><a href="#2-2-5- 码元" class="headerlink" title="2.2.5 码元"></a>2.2.5 码元 </h3><p> 用一个 <strong> 固定时长 </strong> 的<strong>信号波形 </strong> 代表不同离散数值的基本波形，是数字通信中数字信号的计量单位。</p><ul><li>M 进制码元：有 M 个离散状态</li><li>1 码元可携带多个比特的信息量<blockquote><p>4 进制码元→码元离散状态有 4 个→4 中信号波形 00、01、10、11</p></blockquote></li></ul><h3 id="2-2-6- 速率"><a href="#2-2-6- 速率" class="headerlink" title="2.2.6 速率"></a>2.2.6 速率 </h3><p> 数据的传输速率，表示单位时间内传输的数据量。</p><ol><li>码元传输速率——<font color=orange>1s 传输多少个码元</font><ul><li>码元速率与进制数无关，只和马原长度 T 有关。</li></ul></li><li>信息传输速率——<font color=orange>1s 传输多少个比特</font></li></ol><p><font color=red>关系：</font>若一个码元携带 n bit 的信息量，则 M Baud 的码元传输速率所对应的信息传输速率为 M×n bit&#x2F;s.</p><h3 id="2-2-7- 带宽"><a href="#2-2-7- 带宽" class="headerlink" title="2.2.7 带宽"></a>2.2.7 带宽</h3><ol><li>模拟信号系统中：单位 Hz。</li><li>数字设备中：点对点能通过的“<strong>最高数据率 </strong>” &#x2F; 单位时间内通过链路的数量。单位<strong> 比特每秒（bps）</strong></li></ol><h2 id="2-3- 奈氏准则 - 香农定理"><a href="#2-3- 奈氏准则 - 香农定理" class="headerlink" title="2.3 奈氏准则 &amp; 香农定理"></a>2.3 奈氏准则 &amp; 香农定理</h2><h3 id="2-3-1- 失真"><a href="#2-3-1- 失真" class="headerlink" title="2.3.1 失真"></a>2.3.1 失真</h3><ul><li>有失真但可识别</li><li>失真大无法识别</li><li>影响因素：码元传输速率、信号传输距离、噪声干扰、传输媒体质量</li><li>码间串扰：<strong>接收端 </strong> 收到的信号波形 <font color=red> 失去了码元之间清晰界限 </font> 的<strong>现象</strong>。</li></ul><h3 id="2-3-2- 奈氏准则（奈奎斯特定理）"><a href="#2-3-2- 奈氏准则（奈奎斯特定理）" class="headerlink" title="2.3.2 奈氏准则（奈奎斯特定理）"></a>2.3.2 奈氏准则（奈奎斯特定理）</h3><p>在理想低通条件下，为避免码间串扰，极限码元传输速率为 2W Baud，W 是信道带宽，单位是 Hz。</p><p><strong>理想低通信道下极限数据传输率</strong>&#x3D;<font color=red><strong>2Wlog<sub>2</sub>V</strong></font>(b&#x2F;s)</p><ul><li>W: 带宽 &emsp;&emsp;log<sub>2</sub>V: 几种码元的离散电平数目</li><li>码元传输速率有上限，超过则会出现码间串扰问题。</li><li>信道 <strong> 频带越宽</strong>，就可用更高速率进行马原的有效传输。</li><li><font color=green>奈氏准则给出了码元传输速率的限制，但并没有对信息传输速率给出限制。</font></li><li>要设法提高每个码元能携带更多个比特的信息量（多元制的解调方法）</li></ul><h3 id="2-3-3- 香农定理"><a href="#2-3-3- 香农定理" class="headerlink" title="2.3.3 香农定理"></a>2.3.3 香农定理 </h3><p> 在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值。</p><p><strong>信道的极限数据传输速率</strong>&#x3D;<font color=green><strong>Wlog<sub>2</sub>(1+S&#x2F;N)</strong></font>(b&#x2F;s)</p><ul><li>S&#x2F;N: 信噪比 &emsp; 信噪比（dB）&#x3D;10log<sub>10</sub>(S&#x2F;N)</li><li>信道的 <strong> 带宽 </strong> 或信道中 <strong> 信噪比 </strong> 越大，信息的极限传输速率 <strong> 越高</strong>。</li><li>信息的传输速率低于极限信息传输速率时，一定有方法做到 <font color=red> 无差错的传输</font>。</li><li>奈氏准则（内）和香农定理（外），二者取小值为最大数据速率。</li></ul><h2 id="2-4- 编码 - 调制"><a href="#2-4- 编码 - 调制" class="headerlink" title="2.4 编码 &amp; 调制"></a>2.4 编码 &amp; 调制 </h2><h3 id="2-4-1- 基带信号与宽带信号"><a href="#2-4-1- 基带信号与宽带信号" class="headerlink" title="2.4.1 基带信号与宽带信号"></a>2.4.1 基带信号与宽带信号</h3><p> 信道：信号的传输媒介</p><ul><li>按传输信号分：模拟信道、数字信道</li><li>按传输介质分：无线信道、有线信道</li><li>信道上传送的信号：<ul><li>基带信号：发出的 <strong> 直接表达了要传输的信息的信号</strong>（传输距离近）</li><li>宽带信号：把基带信号经过 <strong> 载波调制 </strong> 后，把信号的 <strong> 频率范围搬移 </strong> 到<strong>较高的频段 </strong> 以便在信道中传输。（传输距离远）</li></ul></li></ul><h3 id="2-4-2- 编码与调制"><a href="#2-4-2- 编码与调制" class="headerlink" title="2.4.2 编码与调制"></a>2.4.2 编码与调制 </h3><p> 数据→数字信号：编码</p><p>数据→模拟信号：调制</p><h3 id="2-4-3- 数字数据编码为数字信号"><a href="#2-4-3- 数字数据编码为数字信号" class="headerlink" title="2.4.3 数字数据编码为数字信号"></a>2.4.3 数字数据编码为数字信号</h3><ol><li><strong>非归零编码【NRZ】</strong><ul><li><font color=orange><strong>高 1 低 0</strong></font>&emsp; 双方 <strong> 难以保持同步</strong></li></ul></li><li><strong>曼彻斯特编码</strong><ul><li>将一个码元分成两个相等间隔，前低后高为 1；反之为 0.</li><li><font color=orange>数据传输速率只有调制速率的 1&#x2F;2.</font></li></ul></li><li><strong>差分曼彻斯特编码</strong><ul><li><font color=orange><strong>同 1 异 0</strong></font></li><li>将一个码元分成两个相等间隔。</li><li>抗干扰性 <strong> 强</strong>于曼彻斯特编码。</li></ul></li><li>归零编码【RZ】<ul><li>将一个码元分成两个相等间隔。</li><li>每前半个码元恢复到 0.</li></ul></li><li>反向不归零编码【NRZI】</li><li>4B&#x2F;5B 编码</li></ol><h3 id="2-4-4 数字数据调制为模拟信号"><a href="#2-4-4 数字数据调制为模拟信号" class="headerlink" title="2.4.4 数字数据调制为模拟信号"></a>2.4.4 数字数据调制为模拟信号 </h3><p> 数字数据调制技术在发送端将<strong> 数字信号 </strong> 转换为 <strong> 模拟信号</strong></p><ul><li>调制：调幅、调频、调相、调幅＋调相</li></ul><h3 id="2-4-5- 模拟数据编码为数字信号"><a href="#2-4-5- 模拟数据编码为数字信号" class="headerlink" title="2.4.5 模拟数据编码为数字信号"></a>2.4.5 模拟数据编码为数字信号</h3><ul><li><strong>PCM 编码</strong>：对音频信号进行编码的脉码调制。</li><li>包括三步：抽样、量化、编码。</li><li><font color=red>f<sub>采样频率 </sub>≥2f<sub> 信号最高频率</sub></font> !</li></ul><h3 id="2-4-6- 模拟数据调制为模拟信号"><a href="#2-4-6- 模拟数据调制为模拟信号" class="headerlink" title="2.4.6 模拟数据调制为模拟信号"></a>2.4.6 模拟数据调制为模拟信号</h3><ul><li>在电话机和本地交换机所传输的信号是采用模拟信号传输模拟数据的方式；</li></ul><h2 id="2-5- 数据交换方式"><a href="#2-5- 数据交换方式" class="headerlink" title="2.5 数据交换方式"></a>2.5 数据交换方式</h2><ul><li>分为 <strong>1</strong> 电路交换、<strong>2</strong>报文交换、<strong>3</strong>分组交换。</li><li>2、3 是存储转发交换方式，分组交换包含数据报方式和虚电路方式。</li></ul><h3 id="2-5-1- 电路交换"><a href="#2-5-1- 电路交换" class="headerlink" title="2.5.1 电路交换"></a>2.5.1 电路交换</h3><ul><li>电路交换的阶段：建立连接（呼叫 &#x2F; 电路建立）→通信（数据传输）→释放连接（拆除电路）</li><li>特点：<strong>独占资源</strong>，适用于远程批处理信息传输或系统间实时性要求搞得大量数据传输情况。</li></ul><h3 id="2-5-2- 报文交换"><a href="#2-5-2- 报文交换" class="headerlink" title="2.5.2 报文交换"></a>2.5.2 报文交换 </h3><p> 报文：站点 <strong> 一次性要发送的数据块</strong>。</p><p>原理：无需在两个站点之间建立一条专用通路，其数据传输的单位是报文，传送过程采用 <font color=red><strong> 存储转发方式</strong></font>.</p><ul><li>无建立连接时延，可随时发送报文。</li><li>动态分配线路。</li><li>只适用于数字信号，实时性差。</li></ul><h3 id="2-5-3- 分组交换"><a href="#2-5-3- 分组交换" class="headerlink" title="2.5.3 分组交换"></a>2.5.3 分组交换 </h3><p> 分组：网络系统把数据分割成小块，然后逐块发送，这种小块称为分组。</p><ul><li>分组：小数据块＋控制信息 &#x3D; 分组</li><li>分组交换网中要 <strong> 限制所传输的数据单位的长度</strong>，一般 128B.</li></ul><h3 id="2-5-4- 数据交换方式的选择"><a href="#2-5-4- 数据交换方式的选择" class="headerlink" title="2.5.4 数据交换方式的选择"></a>2.5.4 数据交换方式的选择</h3><ol><li>传送数据量大，传送时间远大于呼叫时，选择 <strong> 电路交换</strong>。电路交换传输时延最小。</li><li>端到端通路有很多段链路组成时，采用 <strong> 分组交换</strong>。</li><li>从信道利用率看，<strong>报文交换 </strong> 和<strong>分组交换 </strong> 优于电路交换，其中分组交换的时延更小，适合突发式数据通信。</li></ol><h2 id="2-6- 物理层传输介质"><a href="#2-6- 物理层传输介质" class="headerlink" title="2.6 物理层传输介质"></a>2.6 物理层传输介质 </h2><p> 传输介质：数据传输系统中在发送设备和接收设备之间的 <strong> 物理通路</strong>。</p><ul><li><font color=red>传输媒体不是物理层。</font></li><li>传输介质：<ul><li>导向性传输介质</li><li>非导向性传输介质</li></ul></li></ul><h3 id="2-6-1 导向型传输介质"><a href="#2-6-1 导向型传输介质" class="headerlink" title="2.6.1 导向型传输介质"></a>2.6.1 导向型传输介质</h3><ol><li>双绞线</li></ol><ul><li><strong>绞合可减少对相邻导线的电磁干扰。</strong></li><li>加上一个由 <font color=orange><strong> 金属丝 </strong></font> 编织成的屏蔽层——屏蔽双绞线（STP），无屏蔽层的是非屏蔽双绞线（UTP）。</li></ul><ol start="2"><li>同轴电缆<ul><li>基带同轴电缆——传送基带数字信号（局域网）</li><li>宽带同轴电缆——传送宽带信号（有线电视系统）</li></ul></li></ol><ul><li>同轴电缆 <strong> 抗干扰特性 </strong> 更好，<strong>传输距离 </strong> 更远，但价格更贵。</li></ul><ol start="3"><li>光纤</li></ol><ul><li>利用光导纤维传递 <strong> 光脉冲 </strong> 来进行通信。出现 <strong> 全反射 </strong> 原理，损耗 <strong> 低</strong>，适合远距离传输。</li><li>分类<ul><li>单模光纤——<strong>横向模式 </strong> 传输，损耗小，远距离传输</li><li>多模光纤——<strong>多种 </strong> 传输光信号模式的光纤，<strong>容易失真</strong>，近距离传输。</li></ul></li></ul><h3 id="2-6-2 非导向型传输介质"><a href="#2-6-2 非导向型传输介质" class="headerlink" title="2.6.2 非导向型传输介质"></a>2.6.2 非导向型传输介质</h3><ol><li>无线电波——信号向 <strong> 所有方向 </strong> 传播</li></ol><p>穿透能力强。<br>2. 微波——<strong>固定方向 </strong> 传播</p><p>   通信频率较高、数据率高。</p><ul><li>地面微波接力通信</li><li>卫星通信</li></ul><ol start="3"><li>红外线、激光——<strong>固定方向 </strong> 传播</li></ol><p>要把要传输的信号分别转换为各自的信号格式。</p><h2 id="2-7- 物理层设备"><a href="#2-7- 物理层设备" class="headerlink" title="2.7 物理层设备"></a>2.7 物理层设备</h2><h3 id="2-7-1- 中继器"><a href="#2-7-1- 中继器" class="headerlink" title="2.7.1 中继器"></a>2.7.1 中继器</h3><ul><li>功能：对信号进行 <strong> 再生（数字信号）和还原</strong>。</li><li>中继器两端：适用于完全相同的 <font color=blue> 两类 </font> 网络的互连。傻瓜层，不会存储转发。</li><li>5-4-3 规则：不超过 5 个网段，最多只能有 4 个物理层网络设备，只有 3 个段可连接计算机。</li></ul><h3 id="2-7-2- 集线器（多口中继器）"><a href="#2-7-2- 集线器（多口中继器）" class="headerlink" title="2.7.2 集线器（多口中继器）"></a>2.7.2 集线器（多口中继器）</h3><ul><li>功能：**<font color=orange>再生，放大信号</font>**</li><li>集线器不能分割冲突域。→连载集线器上的工作主机平分带宽。</li></ul><h1 id="第三章 - 数据链路层"><a href="# 第三章 - 数据链路层" class="headerlink" title="第三章 数据链路层"></a>第三章 数据链路层</h1><h2 id="3-1- 数据链路层的功能"><a href="#3-1- 数据链路层的功能" class="headerlink" title="3.1 数据链路层的功能"></a>3.1 数据链路层的功能</h2><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241021204143.png" alt="20241021204143"></p><h2 id="3-2- 组帧"><a href="#3-2- 组帧" class="headerlink" title="3.2 组帧"></a>3.2 组帧</h2><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241021204244.png" alt="20241021204244"></p><h2 id="3-3- 差错控制"><a href="#3-3- 差错控制" class="headerlink" title="3.3 差错控制"></a>3.3 差错控制</h2><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241021204413.png" alt="20241021204413"></p><h3 id="3-3-1- 奇偶校验码"><a href="#3-3-1- 奇偶校验码" class="headerlink" title="3.3.1 奇偶校验码"></a>3.3.1 奇偶校验码</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241021204457.png" alt="20241021204457"></p><h3 id="3-3-2- 循环冗余校验码"><a href="#3-3-2- 循环冗余校验码" class="headerlink" title="3.3.2 循环冗余校验码"></a>3.3.2 循环冗余校验码</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241021204601.png" alt="20241021204601"></p><h3 id="3-3-3- 纠错控制——海明码"><a href="#3-3-3- 纠错控制——海明码" class="headerlink" title="3.3.3 纠错控制——海明码"></a>3.3.3 纠错控制——海明码</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241021204715.png" alt="20241021204715"></p><h2 id="3-4- 流量控制和可靠传输"><a href="#3-4- 流量控制和可靠传输" class="headerlink" title="3.4 流量控制和可靠传输"></a>3.4 流量控制和可靠传输</h2><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241022203047.png" alt="20241022203047"></p><h3 id="3-4-1- 停止等待协议"><a href="#3-4-1- 停止等待协议" class="headerlink" title="3.4.1 停止等待协议"></a>3.4.1 停止等待协议</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241022203225.png" alt="20241022203225"></p><h3 id="3-4-2- 后退 N 帧协议"><a href="#3-4-2- 后退 N 帧协议" class="headerlink" title="3.4.2 后退 N 帧协议"></a>3.4.2 后退 N 帧协议</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241022214755.png" alt="20241022214755"></p><h3 id="3-4-3- 选择重传协议"><a href="#3-4-3- 选择重传协议" class="headerlink" title="3.4.3 选择重传协议"></a>3.4.3 选择重传协议</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241022214825.png" alt="20241022214825"></p><h3 id="3-4-4- 三种协议的信道利用率分析"><a href="#3-4-4- 三种协议的信道利用率分析" class="headerlink" title="3.4.4 三种协议的信道利用率分析"></a>3.4.4 三种协议的信道利用率分析</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241023135639.png" alt="20241023135639"></p><h2 id="3-5- 介质访问控制"><a href="#3-5- 介质访问控制" class="headerlink" title="3.5 介质访问控制"></a>3.5 介质访问控制</h2><h3 id="3-5-1- 信道划分介质访问控制"><a href="#3-5-1- 信道划分介质访问控制" class="headerlink" title="3.5.1 信道划分介质访问控制"></a>3.5.1 信道划分介质访问控制</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241024103100.png" alt="20241024103100"></p><h3 id="3-5-2- 随机访问介质访问控制——ALOHA、CSMA"><a href="#3-5-2- 随机访问介质访问控制——ALOHA、CSMA" class="headerlink" title="3.5.2 随机访问介质访问控制——ALOHA、CSMA"></a>3.5.2 随机访问介质访问控制——ALOHA、CSMA</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241024105544.png" alt="20241024105544"></p><h3 id="3-5-3- 随机访问介质访问控制——CSMA-CD"><a href="#3-5-3- 随机访问介质访问控制——CSMA-CD" class="headerlink" title="3.5.3 随机访问介质访问控制——CSMA&#x2F;CD"></a>3.5.3 随机访问介质访问控制——CSMA&#x2F;CD</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241024105733.png" alt="20241024105733"></p><h3 id="3-5-4- 随机访问介质访问控制——CSMA-CA 协议"><a href="#3-5-4- 随机访问介质访问控制——CSMA-CA 协议" class="headerlink" title="3.5.4 随机访问介质访问控制——CSMA&#x2F;CA 协议"></a>3.5.4 随机访问介质访问控制——CSMA&#x2F;CA 协议</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241024110059.png" alt="20241024110059"></p><h3 id="3-5-5- 令牌传递协议"><a href="#3-5-5- 令牌传递协议" class="headerlink" title="3.5.5 令牌传递协议"></a>3.5.5 令牌传递协议</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241024131122.png" alt="20241024131122"></p><h2 id="3-6- 局域网与 IEEE"><a href="#3-6- 局域网与 IEEE" class="headerlink" title="3.6 局域网与 IEEE"></a>3.6 局域网与 IEEE</h2><h3 id="3-6-1-802-3"><a href="#3-6-1-802-3" class="headerlink" title="3.6.1 802.3"></a>3.6.1 802.3</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241024200829.png" alt="20241024200829"></p><h3 id="3-6-2-VLAN 虚拟局域网"><a href="#3-6-2-VLAN 虚拟局域网" class="headerlink" title="3.6.2 VLAN 虚拟局域网"></a>3.6.2 VLAN 虚拟局域网</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241024200951.png" alt="20241024200951"></p><h3 id="3-6-3-IEEE-802-11 无线局域网"><a href="#3-6-3-IEEE-802-11 无线局域网" class="headerlink" title="3.6.3 IEEE 802.11 无线局域网"></a>3.6.3 IEEE 802.11 无线局域网</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241024201100.png" alt="20241024201100"></p><h2 id="3-7- 广域网"><a href="#3-7- 广域网" class="headerlink" title="3.7 广域网"></a>3.7 广域网</h2><ul><li>PPP 协议</li><li>HDLC 协议</li></ul><p>二者只支持全双工链路，都可实现透明传输，都可实现差错检测，但不纠正差错。</p><h2 id="3-8- 以太网交换机"><a href="#3-8- 以太网交换机" class="headerlink" title="3.8 以太网交换机"></a>3.8 以太网交换机</h2><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241024201415.png" alt="20241024201415"></p><h1 id="第四章 - 网络层"><a href="# 第四章 - 网络层" class="headerlink" title="第四章 网络层"></a>第四章 网络层</h1><h2 id="4-1- 网络层的功能"><a href="#4-1- 网络层的功能" class="headerlink" title="4.1 网络层的功能"></a>4.1 网络层的功能</h2><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241029172923.png" alt="20241029172923"></p><h2 id="4-2-IPv4"><a href="#4-2-IPv4" class="headerlink" title="4.2 IPv4"></a>4.2 IPv4</h2><h3 id="4-2-1-IPv4 分组"><a href="#4-2-1-IPv4 分组" class="headerlink" title="4.2.1 IPv4 分组"></a>4.2.1 IPv4 分组</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241029173210.png" alt="20241029173210"></p><h3 id="4-2-2-IP 地址（最初分类方案）"><a href="#4-2-2-IP 地址（最初分类方案）" class="headerlink" title="4.2.2 IP 地址（最初分类方案）"></a>4.2.2 IP 地址（最初分类方案）</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241029173635.png" alt="20241029173635"></p><h3 id="4-2-3- 子网划分和子网掩码"><a href="#4-2-3- 子网划分和子网掩码" class="headerlink" title="4.2.3 子网划分和子网掩码"></a>4.2.3 子网划分和子网掩码</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241029201047.png" alt="20241029201047"></p><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241029201153.png" alt="20241029201153"></p><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241029201223.png" alt="20241029201223"></p><h3 id="4-2-4- 无分类编址"><a href="#4-2-4- 无分类编址" class="headerlink" title="4.2.4 无分类编址"></a>4.2.4 无分类编址</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241104162727.png" alt="20241104162727"></p><h3 id="4-2-5- 路由聚合"><a href="#4-2-5- 路由聚合" class="headerlink" title="4.2.5 路由聚合"></a>4.2.5 路由聚合</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241104164525.png" alt="20241104164525"></p><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20241104164615.png" alt="20241104164615"></p><h3 id="4-2-6- 网络地址转换 NAT"><a href="#4-2-6- 网络地址转换 NAT" class="headerlink" title="4.2.6 网络地址转换 NAT"></a>4.2.6 网络地址转换 NAT</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20250209172842.png" alt="20250209172842"></p><h3 id="4-2-7- 地址解析协议 ARP"><a href="#4-2-7- 地址解析协议 ARP" class="headerlink" title="4.2.7 地址解析协议 ARP"></a>4.2.7 地址解析协议 ARP</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20250209173113.png" alt="20250209173113"></p><h3 id="4-2-8- 动态主机配置协议 DHCP"><a href="#4-2-8- 动态主机配置协议 DHCP" class="headerlink" title="4.2.8 动态主机配置协议 DHCP"></a>4.2.8 动态主机配置协议 DHCP</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20250209173316.png" alt="20250209173316"></p><h2 id="4-3-IPV6"><a href="#4-3-IPV6" class="headerlink" title="4.3 IPV6"></a>4.3 IPV6</h2><h2 id="4-4- 路由算法与路由协议"><a href="#4-4- 路由算法与路由协议" class="headerlink" title="4.4 路由算法与路由协议"></a>4.4 路由算法与路由协议 </h2><h2 id="4-5-IP 组播"><a href="#4-5-IP 组播" class="headerlink" title="4.5 IP 组播"></a>4.5 IP 组播</h2><h2 id="4-6- 移动 IP"><a href="#4-6- 移动 IP" class="headerlink" title="4.6 移动 IP"></a>4.6 移动 IP</h2><h1 id="第五章 - 传输层"><a href="# 第五章 - 传输层" class="headerlink" title="第五章 传输层"></a> 第五章 传输层</h1><h2 id="5-1- 传输层提供的服务"><a href="#5-1- 传输层提供的服务" class="headerlink" title="5.1 传输层提供的服务"></a>5.1 传输层提供的服务</h2><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20250210203026.png" alt="20250210203026"></p><h2 id="5-2-UDP 协议"><a href="#5-2-UDP 协议" class="headerlink" title="5.2 UDP 协议"></a>5.2 UDP 协议</h2><h3 id="5-2-1-UDP 数据报"><a href="#5-2-1-UDP 数据报" class="headerlink" title="5.2.1 UDP 数据报"></a>5.2.1 UDP 数据报</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20250210203142.png" alt="20250210203142"></p><h3 id="5-2-2-UDP 检验"><a href="#5-2-2-UDP 检验" class="headerlink" title="5.2.2 UDP 检验"></a>5.2.2 UDP 检验</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20250210203311.png" alt="20250210203311"></p><h2 id="5-3-TCP 协议"><a href="#5-3-TCP 协议" class="headerlink" title="5.3 TCP 协议"></a>5.3 TCP 协议</h2><h3 id="5-3-1-TCP 报文段"><a href="#5-3-1-TCP 报文段" class="headerlink" title="5.3.1 TCP 报文段"></a>5.3.1 TCP 报文段</h3><p><img src="https://raw.githubusercontent.com/EngineHeating/picgo_2/main/20250210203514.png" alt="20250210203514"></p><ul><li>序号：标记数据部分第一个字节在原始字节流中的位置</li><li>确认号：“累计确认” ，反馈：序号在该确认号之前的所有字节都已经正确收到</li><li>只有握手 1、握手 2 的 SYN&#x3D;1</li><li>只有挥手 1、挥手 3 的 FIN&#x3D;1</li><li>窗口：接收窗口大小。从 ack_seq 算起还能接受多少数据。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MTALAB 中 commsrc.combinedjitter 构造组合抖动生成器对象</title>
      <link href="/2024/07/08/Matlab%E6%B7%BB%E5%8A%A0%E7%BB%84%E5%90%88%E6%8A%96%E5%8A%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2024/07/08/Matlab%E6%B7%BB%E5%8A%A0%E7%BB%84%E5%90%88%E6%8A%96%E5%8A%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="MTALAB- 中 -commsrc-combinedjitter- 构造组合抖动生成器对象"><a href="#MTALAB- 中 -commsrc-combinedjitter- 构造组合抖动生成器对象" class="headerlink" title="MTALAB 中 commsrc.combinedjitter 构造组合抖动生成器对象"></a>MTALAB 中 commsrc.combinedjitter 构造组合抖动生成器对象</h1><h2 id="1- 两种函数"><a href="#1- 两种函数" class="headerlink" title="1. 两种函数"></a>1. 两种函数</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">combJitt = commsrc.combinedjitter</span><br><span class="line">combJitt = commsrc.combinedjitter(Name,Value)</span><br></pre></td></tr></table></figure><h2 id="2- 定义"><a href="#2- 定义" class="headerlink" title="2. 定义"></a>2. 定义</h2><p>combJitt &#x3D; commsrc.combinedjitter 构造一个默认的组合抖动生成器对象 combJitt，所有的抖动组件都被禁用。</p><p>使用该对象可生成抖动样本，其中包括随机、周期性和狄拉克分量的任意组合。</p><hr><p>combJitt &#x3D; commsrc.combinedjitter(Name,Value)创建一个组合抖动生成器对象，并将指定的属性 Name 设置为指定的 Value。可以任意顺序指定附加的名称 - 值对参数，如(Name1,Value1，…，NameN,ValueN)。</p><h2 id="3- 案例"><a href="#3- 案例" class="headerlink" title="3. 案例"></a>3. 案例 </h2><h3 id="3-1- 生成 500 个由随机和周期抖动组成的抖动样本"><a href="#3-1- 生成 500 个由随机和周期抖动组成的抖动样本" class="headerlink" title="3.1 生成 500 个由随机和周期抖动组成的抖动样本"></a>3.1 生成 500 个由随机和周期抖动组成的抖动样本</h3><p> 创建一个 commsrc.combinedjitter 对象，配置为应用随机和周期性抖动组件的组合。使用名称 - 值对来启用 RandomJitter 和 PeriodicJitter，并分配抖动设置。设置随机抖动的标准差为 2e-4 秒，周期抖动的幅度为 5e-4 秒，周期抖动的频率为 2hz。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% step1: 创建一个 commsrc.combinedjitter 对象，对抖动成分进行设置</span></span><br><span class="line">numSamples = <span class="number">500</span>;</span><br><span class="line">combJitt = commsrc.combinedjitter(...</span><br><span class="line">    <span class="string">&#x27;RandomJitter&#x27;</span>,<span class="string">&#x27;on&#x27;</span>, ...</span><br><span class="line">    <span class="string">&#x27;RandomStd&#x27;</span>,<span class="number">2e-4</span>, ...</span><br><span class="line">    <span class="string">&#x27;PeriodicJitter&#x27;</span>,<span class="string">&#x27;on&#x27;</span>, ...</span><br><span class="line">    <span class="string">&#x27;PeriodicAmplitude&#x27;</span>,<span class="number">5e-4</span>, ...</span><br><span class="line">    <span class="string">&#x27;PeriodicFrequencyHz&#x27;</span>,<span class="number">200</span>);  </span><br><span class="line"><span class="comment">% step2: 使用生成方法 generate 创建组合抖动样本。</span></span><br><span class="line">y = generate(combJitt,numSamples);</span><br><span class="line">x = [<span class="number">0</span>:numSamples<span class="number">-1</span>];</span><br><span class="line"><span class="comment">% step3: 绘制抖动样本</span></span><br><span class="line"><span class="built_in">plot</span>(x/combJitt.SamplingFrequency,y);</span><br><span class="line">xlabel(<span class="string">&#x27;Time (seconds)&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;Jitter (seconds)&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="3-2- 生成一个 PRBS7 信号并添加 RJ 和 DJ"><a href="#3-2- 生成一个 PRBS7 信号并添加 RJ 和 DJ" class="headerlink" title="3.2 生成一个 PRBS7 信号并添加 RJ 和 DJ"></a>3.2 生成一个 PRBS7 信号并添加 RJ 和 DJ</h3><p>可运行的代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 利用模式生成器对象生成一个二进制非归零 (NRZ) 信号。查看 NRZ 信号与不抖动应用到信号。</span></span><br><span class="line"><span class="comment">% 初始化系统参数</span></span><br><span class="line">Fs = <span class="number">10000</span>; <span class="comment">% Sample rate 采样率</span></span><br><span class="line">Rs = <span class="number">50</span>; <span class="comment">% Symbol rate 符号率</span></span><br><span class="line">sps = Fs / Rs; <span class="comment">% Number of samples per symbol 每个符号的样本数</span></span><br><span class="line">Trise = <span class="number">1</span> / (<span class="number">5</span> * Rs); <span class="comment">% Rise time of the NRZ signal NRZ 信号的上升时间</span></span><br><span class="line">Tfall = <span class="number">1</span> / (<span class="number">5</span> * Rs); <span class="comment">% Fall time of the NRZ signal NRZ 信号的下降时间</span></span><br><span class="line">frameLen = <span class="number">100</span>; <span class="comment">% Number of symbols in a frame 一帧中的符号数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 创建无抖动的 PRBS 信号源对象</span></span><br><span class="line">src_no_jitter = commsrc.pattern(<span class="string">&#x27;SamplingFrequency&#x27;</span>, Fs, ...</span><br><span class="line">    <span class="string">&#x27;SamplesPerSymbol&#x27;</span>, sps, <span class="string">&#x27;RiseTime&#x27;</span>, Trise, <span class="string">&#x27;FallTime&#x27;</span>, Tfall, ...</span><br><span class="line">    <span class="string">&#x27;DataPattern&#x27;</span>, <span class="string">&#x27;PRBS7&#x27;</span>); <span class="comment">% 使用 PRBS7 作为数据模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 生成无抖动的 PRBS 信号</span></span><br><span class="line">message_no_jitter = generate(src_no_jitter, frameLen);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 创建一个包含随机抖动和周期抖动的抖动对象</span></span><br><span class="line">jitter = commsrc.combinedjitter(<span class="string">&#x27;RandomJitter&#x27;</span>, <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;RandomStd&#x27;</span>, <span class="number">2e-4</span>, ...</span><br><span class="line">                                <span class="string">&#x27;PeriodicJitter&#x27;</span>, <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;PeriodicAmplitude&#x27;</span>, <span class="number">1e-4</span>, ...</span><br><span class="line">                                <span class="string">&#x27;PeriodicFrequency&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 创建一个带抖动的 PRBS 信号源对象</span></span><br><span class="line">src_with_jitter = commsrc.pattern(<span class="string">&#x27;SamplingFrequency&#x27;</span>, Fs, ...</span><br><span class="line">    <span class="string">&#x27;SamplesPerSymbol&#x27;</span>, sps, <span class="string">&#x27;RiseTime&#x27;</span>, Trise, <span class="string">&#x27;FallTime&#x27;</span>, Tfall, ...</span><br><span class="line">    <span class="string">&#x27;DataPattern&#x27;</span>, <span class="string">&#x27;PRBS7&#x27;</span>, <span class="string">&#x27;Jitter&#x27;</span>, jitter); <span class="comment">% 使用 PRBS7 作为数据模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 生成带抖动的 PRBS 信号</span></span><br><span class="line">message_with_jitter = generate(src_with_jitter, frameLen);</span><br><span class="line">message_with_jitter = message_with_jitter(<span class="number">1</span>:<span class="number">20000</span>);</span><br><span class="line"><span class="comment">% 创建时间向量</span></span><br><span class="line">t = (<span class="number">0</span>:<span class="built_in">length</span>(message_no_jitter)<span class="number">-1</span>) / Fs;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 绘制时域图</span></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"><span class="built_in">plot</span>(t, message_no_jitter, <span class="string">&#x27;b&#x27;</span>); <span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>(t, message_with_jitter, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27; 无抖动 &#x27;</span>, <span class="string">&#x27; 带抖动 &#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;PRBS 信号时域图对比 &#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27; 时间 (秒)&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27; 幅度 &#x27;</span>);</span><br><span class="line">grid on;</span><br><span class="line"><span class="built_in">hold</span> off;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 求 TIE 图 -------------</span></span><br><span class="line">signal_out = [t&#x27;,message_no_jitter];</span><br><span class="line">signal_in = [t&#x27;,message_with_jitter];</span><br><span class="line"></span><br><span class="line"><span class="comment">% 求上升沿下降沿与中线的交点</span></span><br><span class="line">[edge_interp_in,piont_index_in]=func_sig_edge(signal_in,<span class="number">0.5</span>,<span class="number">5</span>);</span><br><span class="line">[edge_interp_out,piont_index_out]=func_sig_edge(signal_out,<span class="number">0.5</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">TIE_length = <span class="built_in">min</span>(<span class="built_in">length</span>(edge_interp_in), <span class="built_in">length</span>(edge_interp_out));</span><br><span class="line"><span class="comment">% 求交点的时间差，即 TIE</span></span><br><span class="line">TIE = <span class="built_in">zeros</span>(TIE_length, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:TIE_length</span><br><span class="line">    TIE(<span class="built_in">i</span>) = edge_interp_out(<span class="built_in">i</span>) - edge_interp_in(<span class="built_in">i</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%TIE 直方图分布</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">5</span>);</span><br><span class="line">histogram(TIE, <span class="number">200</span>);</span><br><span class="line"><span class="comment">%TIE 趋势图</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">4</span>);</span><br><span class="line">t_TIE =  <span class="number">1</span> : <span class="number">1</span> : <span class="built_in">length</span>(TIE);</span><br><span class="line"><span class="built_in">plot</span>(t_TIE,TIE);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目前发现添加抖动是通过 generate 函数进行添加，该 generate 方法在 pattern201 行下。调试进入该函数如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">y</span> = <span class="title">generate</span><span class="params">(this, N)</span></span></span><br><span class="line"><span class="comment">%GENERATE  Generate a modulated pattern</span></span><br><span class="line"><span class="comment">%   Y = GENERATE(H, N) generates an N symbol modulated pattern based on the</span></span><br><span class="line"><span class="comment">%   pattern generator object H.</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">%   See also COMMSRC.PATTERN, COMMSRC.PATTERN/STD181TOIDEAL,</span></span><br><span class="line"><span class="comment">%   COMMSRC.PATTERN/IDEALTOSTD181, COMMSRC.PATTERN/RESET,</span></span><br><span class="line"><span class="comment">%   COMMSRC.PATTERN/COMPUTEDCD, COMMSRC.PATTERN/DISP. </span></span><br><span class="line"></span><br><span class="line">            <span class="comment">% Check input arguments</span></span><br><span class="line">            narginchk(<span class="number">2</span>, <span class="number">2</span>);    <span class="comment">% 检查输入参数个数为 2-2</span></span><br><span class="line">            sigdatatypes.checkFinitePosIntScalar(<span class="string">&#x27;GENERATE&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, N);  <span class="comment">% 检查 N 是否为有限正整数标量</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">% Get data bits</span></span><br><span class="line">            <span class="keyword">if</span> strncmp(this.DataPattern, <span class="string">&#x27;U&#x27;</span>, <span class="number">1</span>)    <span class="comment">% 判断信号数据是不是 User Defined</span></span><br><span class="line">                <span class="comment">% Get bits from user data</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">% Get data vector and counter</span></span><br><span class="line">                userDataPattern = this.UserDataPattern(:);</span><br><span class="line">                cnt = this.UserDataCnt;</span><br><span class="line">                len = <span class="built_in">length</span>(userDataPattern);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> len &lt; N</span><br><span class="line">                    <span class="comment">% Length of user data is less than requested length</span></span><br><span class="line">                    data = <span class="built_in">repmat</span>(userDataPattern, <span class="built_in">ceil</span>((N+cnt)/len), <span class="number">1</span>);</span><br><span class="line">                    data = data(cnt:cnt+N<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">% Length of user data is greater than or equal to the</span></span><br><span class="line">                    <span class="comment">% requested length </span></span><br><span class="line">                    <span class="keyword">if</span> (cnt+N) &gt; len</span><br><span class="line">                        data = [userDataPattern(cnt:<span class="keyword">end</span>); ...</span><br><span class="line">                            userDataPattern(<span class="number">1</span>:N+cnt-len<span class="number">-1</span>)];</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        data = userDataPattern(cnt:cnt+N<span class="number">-1</span>);</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">% Update counter</span></span><br><span class="line">                this.UserDataCnt = <span class="built_in">mod</span>(cnt + N - <span class="number">1</span>, len) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">% Get bits from PRBS generator</span></span><br><span class="line">                hDataGen = this.DataPatternGen;</span><br><span class="line">                data = hDataGen(N);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> this.SamplingFrequency ~= this.Jitter.SamplingFrequency</span><br><span class="line">              this.Jitter.SamplingFrequency = this.SamplingFrequency;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">% Generate jitter samples</span></span><br><span class="line">            jitter = generate(this.Jitter, N);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">% Generate the jitter injected pulse.  Note that the pulse generator</span></span><br><span class="line">            <span class="comment">% requires jitter values to be in samples.</span></span><br><span class="line">            y = generate(this.PulseGenerator, data, ...</span><br><span class="line">                jitter*this.SamplingFrequency);<span class="comment">% *** 产生抖动注入脉冲</span></span><br><span class="line">        <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>上面最后一行 generate 函数进入如下，这里是如何将产生的抖动成分添加到 PRBS 信号的核心成分。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span> = <span class="title">generate</span><span class="params">(this, data, varargin)</span></span></span><br><span class="line"><span class="comment">%GENERATE   Generate NRZ modulated signal</span></span><br><span class="line"><span class="comment">%   GENERATE(H, DATA) modulates input data bits, DATA, using NRZ modulated</span></span><br><span class="line"><span class="comment">%   signaling.  DATA must be a column vector with element values 0 or 1.  The</span></span><br><span class="line"><span class="comment">%   NRZ pulse properties are defined by the NRZ pulse generator object H.  </span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">%   GENERATE(H, DATA, JITTER) generates NRZ modulated signals as in the previous</span></span><br><span class="line"><span class="comment">%   case but also injects jitter.  JITTER is a column vector of real jitter</span></span><br><span class="line"><span class="comment">%   values.  Jitter values are normalized with sampling frequency.  The length</span></span><br><span class="line"><span class="comment">%   of DATA and JITTER vectors must be equal.  The difference of consecutive</span></span><br><span class="line"><span class="comment">%   jitter values must be less than the symbol duration. </span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">%   EXAMPLES:</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">%     % Create an NRZ pulse generator object</span></span><br><span class="line"><span class="comment">%     h = commsrc.nrz;</span></span><br><span class="line"><span class="comment">%     % Generate binary data</span></span><br><span class="line"><span class="comment">%     data = rand(20, 1) &gt; 0.5;</span></span><br><span class="line"><span class="comment">%     % Generate NRZ modulated signal</span></span><br><span class="line"><span class="comment">%     y = generate(h, data);</span></span><br><span class="line"><span class="comment">%     plot(y)</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">%     % Generate random jitter</span></span><br><span class="line"><span class="comment">%     jitter = randn(20, 1)/50;</span></span><br><span class="line"><span class="comment">%     % Generate NRZ modulated signal and inject jitter</span></span><br><span class="line"><span class="comment">%     y = generate(h, data, jitter);</span></span><br><span class="line"><span class="comment">%     hold on; plot(y, &#x27;r&#x27;); hold off;</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">%   See also COMMSRC.NRZ, COMMSRC.NRZ/DISP, COMMSRC.NRZ/RESET.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Copyright 2008-2009 The MathWorks, Inc.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Parse and validate input arguments</span></span><br><span class="line">[jitter dataLen] = parseGenerateArgs(this, data, varargin&#123;:&#125;);<span class="comment">% 这里进入函数，检查一些问题，最终得到抖动成分数据和 jitter 原输入信号长度 dataLen</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Gather needed information to generate the output</span></span><br><span class="line">sqrtEps = <span class="built_in">sqrt</span>(<span class="built_in">eps</span>);</span><br><span class="line">riseRate = this.RiseRate;</span><br><span class="line">fallRate = this.FallRate;</span><br><span class="line">numRiseSamps = this.NumRiseSamps;</span><br><span class="line">numFallSamps = this.NumFallSamps;</span><br><span class="line">high = this.HighLevel;</span><br><span class="line">low = this.LowLevel;</span><br><span class="line"></span><br><span class="line"><span class="comment">% Append the last transmitted data symbol index to DATA</span></span><br><span class="line">data = [this.LastData; data];</span><br><span class="line"></span><br><span class="line"><span class="comment">% Obtain symbols from symbol numbers</span></span><br><span class="line">symbols = this.OutputLevels(data+<span class="number">1</span>);<span class="comment">% 这里把 01 信号变成了 -1 和 1 信号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Get jittered clock ******** 核心部分，将抖动成分掺入时钟 *********</span></span><br><span class="line">[clk nClk rClk] = getJitteredClock(this, dataLen, jitter);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Determine difference between adjacent data levels.  We will use this vector to</span></span><br><span class="line"><span class="comment">% decide if we have a falling transition, a rising transition, or no transition.</span></span><br><span class="line">change = diff(symbols);<span class="comment">% 确定相邻数据电平之间的差异。我们将使用这个向量来判断是下降过渡、上升过渡还是没有过渡。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Generate output. </span></span><br><span class="line">y = <span class="built_in">zeros</span>(nClk(<span class="keyword">end</span>)<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> p=<span class="number">1</span>:<span class="built_in">length</span>(clk)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> change(p) &lt; -sqrtEps</span><br><span class="line">        <span class="comment">% This is a high-to-low transition</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Calculate the end time of the integer part of the fall time</span></span><br><span class="line">        t1 = <span class="built_in">floor</span>(clk(p)+numFallSamps);</span><br><span class="line">        </span><br><span class="line">        y(nClk(p)) = high + fallRate*rClk(p);</span><br><span class="line">        <span class="keyword">for</span> q=nClk(p)+<span class="number">1</span>:t1</span><br><span class="line">            y(q) = y(q<span class="number">-1</span>) + fallRate;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        y(t1+<span class="number">1</span>:nClk(p+<span class="number">1</span>)<span class="number">-1</span>) = low;</span><br><span class="line">    <span class="keyword">elseif</span> change(p) &gt; sqrtEps</span><br><span class="line">        <span class="comment">% This is a low-to-high transition</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">% Calculate the end time of the integer part of the rise time</span></span><br><span class="line">        t1 = <span class="built_in">floor</span>(clk(p)+numRiseSamps);</span><br><span class="line">        </span><br><span class="line">        y(nClk(p)) = low + riseRate*rClk(p);</span><br><span class="line">        <span class="keyword">for</span> q=nClk(p)+<span class="number">1</span>:t1</span><br><span class="line">            y(q) = y(q<span class="number">-1</span>) + riseRate;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        y(t1+<span class="number">1</span>:nClk(p+<span class="number">1</span>)<span class="number">-1</span>) = high;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">% No transition</span></span><br><span class="line">        y(nClk(p):nClk(p+<span class="number">1</span>)<span class="number">-1</span>) = symbols(p+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Store state</span></span><br><span class="line">this.LastData = data(p+<span class="number">1</span>);</span><br><span class="line">this.LastJitter = jitter(<span class="keyword">end</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 信号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> MATLAB </tag>
            
            <tag> 研究生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常频时钟恢复方式原理</title>
      <link href="/2024/06/11/%E5%B8%B8%E9%A2%91%E6%97%B6%E9%92%9F%E6%81%A2%E5%A4%8D%E6%96%B9%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
      <url>/2024/06/11/%E5%B8%B8%E9%A2%91%E6%97%B6%E9%92%9F%E6%81%A2%E5%A4%8D%E6%96%B9%E5%BC%8F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="常频时钟恢复方式原理"><a href="# 常频时钟恢复方式原理" class="headerlink" title="常频时钟恢复方式原理"></a>常频时钟恢复方式原理</h1><blockquote><p>本文来自 KEYSIGHT 官方文档。</p></blockquote><p>时钟恢复方法的恒定频率设置允许从这些选项中进行选择:</p><ul><li><p>全自动：全自动恒频时钟恢复不需要输入有关信号的任何信息。</p><p>该算法寻找时间上最窄的脉冲，并假定它是孤立的 1 或 0。(对于有大量符号间干扰 (ISI) 的信号，特别窄的脉冲宽度会使该算法失效，从而导致名义数据速率过快。)</p><p>然后，该算法根据该时间确定其他脉冲宽度中的比特数，以确定每个宽度中的比特数。</p></li><li><p>半自动：半自动恒频时钟恢复允许通过输入标称数据速率自己“播种”算法。这使得算法运行得更快，因为它不需要两次遍历数据。</p><p>  然后，该算法计算出平均实际位宽，并准确地计算出每个脉冲的位数。</p><p>  输入的 <strong> 标称数据速率 </strong> 是算法的种子。</p></li><li><p>手动：使用用户提供的数据速率。</p><p>  用户输入的标称数据速率应该是串行数据流的单位间隔的倒数。</p><p>  在全自动或半自动选项中，测量实际数据速率和时钟相位，使平均时间间隔误差 (TIE) 为 0。由此创建恢复的时钟。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 信号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研究生 </tag>
            
            <tag> 时钟恢复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外文文献检索</title>
      <link href="/2024/04/09/%E5%A4%96%E6%96%87%E6%96%87%E7%8C%AE%E6%A3%80%E7%B4%A2/"/>
      <url>/2024/04/09/%E5%A4%96%E6%96%87%E6%96%87%E7%8C%AE%E6%A3%80%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="外文文献检索"><a href="# 外文文献检索" class="headerlink" title="外文文献检索"></a>外文文献检索 </h1><p> 外文文献检索主要基于以下三个网站展开：</p><ol><li>web of science：<a href="https://webofscience.clarivate.cn/wos/alldb/basic-search">https://webofscience.clarivate.cn/wos/alldb/basic-search</a> </li><li>IEEE：<a href="https://ieeexplore.ieee.org/Xplore/home.jsp">https://ieeexplore.ieee.org/Xplore/home.jsp</a></li><li>Engineering Village：<a href="https://www.engineeringvillage.com/search/quick.url">https://www.engineeringvillage.com/search/quick.url</a></li></ol><p>网站 1 类似于知网的检索，库最全，适合首要考虑。网站 2 是 IEEE 检索，专门定向 IEEE，网站 3 是 EI 检索，含金量相对前二者较低。</p><p>以网站 1 为例，找到一篇文章主要关注 3 个点：影响因子，分区（Q1），中科院分区</p>]]></content>
      
      
      <categories>
          
          <category> 信号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研究生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保存并读取 N9030A 波形数据并作图</title>
      <link href="/2024/03/20/%E4%BF%9D%E5%AD%98%E5%B9%B6%E8%AF%BB%E5%8F%96N9030%E6%B3%A2%E5%BD%A2%E6%95%B0%E6%8D%AE%E5%B9%B6%E4%BD%9C%E5%9B%BE/"/>
      <url>/2024/03/20/%E4%BF%9D%E5%AD%98%E5%B9%B6%E8%AF%BB%E5%8F%96N9030%E6%B3%A2%E5%BD%A2%E6%95%B0%E6%8D%AE%E5%B9%B6%E4%BD%9C%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="保存并读取 N9030A 波形数据并作图"><a href="# 保存并读取 N9030A 波形数据并作图" class="headerlink" title="保存并读取 N9030A 波形数据并作图"></a>保存并读取 N9030A 波形数据并作图 </h1><p> 本例用到 QCustomPlot 库，用于绘制二维图，基础配置见上文。</p><blockquote><p>一开始希望保存为 CSV 文件，但查找帮助文档后发现唯独保存为 DATA（CSV）格式没有对应的 SPCI 指令。多次尝试无果后换为保存为 state 格式尝试，最终可以实现。</p><ul><li><strong>state 格式 </strong> 可以保存观测点、mark 点、中心频率等分析仪的设置参数，并且可 recall 后加载到分析仪上原封不动的显示。<strong>csv 格式 </strong> 基本为用逗号隔开的纯文本格式。</li></ul></blockquote><p>下面是一个可运行的函数，点击按钮后，QWidegt 控件会进行绘图。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_TextButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 连接 N9030A 并加载 State 文件</span></span><br><span class="line">        status = <span class="built_in">viOpenDefaultRM</span>(&amp;defaultRM);</span><br><span class="line">        <span class="built_in">viOpen</span>(defaultRM,<span class="string">&quot;TCPIP0::192.168.80.69::inst0::INSTR&quot;</span>,VI_NULL,VI_NULL,&amp;instrument);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存文件</span></span><br><span class="line">        QString str = <span class="string">&quot;:MMEMory:STORe:STATe &#x27;state2.state&#x27;&quot;</span>;</span><br><span class="line">        <span class="type">char</span>*  ch;</span><br><span class="line">        QByteArray ba = str.<span class="built_in">toLatin1</span>(); <span class="comment">// QString 类型转 char</span></span><br><span class="line">        ch=ba.<span class="built_in">data</span>();</span><br><span class="line">        status = <span class="built_in">viWrite</span>(instrument,(ViBuf)ch,<span class="built_in">strlen</span>(ch),&amp;writeCount);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        str = <span class="string">&quot;:MMEMory:LOAD:STATe &#x27;state2.state&#x27;&quot;</span>;</span><br><span class="line">        ba = str.<span class="built_in">toLatin1</span>();</span><br><span class="line">        ch=ba.<span class="built_in">data</span>();</span><br><span class="line">        status = <span class="built_in">viWrite</span>(instrument,(ViBuf)ch,<span class="built_in">strlen</span>(ch),&amp;writeCount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取波形数据</span></span><br><span class="line">        str = <span class="string">&quot;:TRACe:DATA? TRACE1&quot;</span>;</span><br><span class="line">        ba = str.<span class="built_in">toLatin1</span>();</span><br><span class="line">        ch = ba.<span class="built_in">data</span>();</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> buffer[<span class="number">20000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        status = <span class="built_in">viWrite</span>(instrument,(ViBuf)ch,<span class="built_in">strlen</span>(ch),&amp;writeCount);</span><br><span class="line">        status = <span class="built_in">viRead</span>(instrument, buffer,<span class="number">30000</span>, &amp;readCount);</span><br><span class="line">        str = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(buffer);</span><br><span class="line">        <span class="keyword">if</span> (status == VI_SUCCESS) &#123;</span><br><span class="line">            buffer[readCount] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Read Error!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换波形数据</span></span><br><span class="line">        QStringList strList = str.<span class="built_in">split</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        QVector&lt;<span class="type">double</span>&gt; x, y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;strList.<span class="built_in">count</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            QString s = strList.<span class="built_in">at</span>(i);</span><br><span class="line">            <span class="type">double</span> d = s.<span class="built_in">toDouble</span>();</span><br><span class="line">            y.<span class="built_in">append</span>(d);</span><br><span class="line">            x.<span class="built_in">append</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制波形</span></span><br><span class="line">        QCustomPlot *plot = ui-&gt;plot;</span><br><span class="line">        plot-&gt;<span class="built_in">addGraph</span>();</span><br><span class="line">        plot-&gt;<span class="built_in">graph</span>(<span class="number">0</span>)-&gt;<span class="built_in">setData</span>(x, y);</span><br><span class="line">        plot-&gt;<span class="built_in">graph</span>(<span class="number">0</span>)-&gt;<span class="built_in">setPen</span>(<span class="built_in">QPen</span>(Qt::red));<span class="comment">// 曲线为红色</span></span><br><span class="line">        plot-&gt;xAxis-&gt;<span class="built_in">setLabel</span>(<span class="string">&quot;X&quot;</span>);</span><br><span class="line">        plot-&gt;yAxis-&gt;<span class="built_in">setLabel</span>(<span class="string">&quot;Y&quot;</span>);</span><br><span class="line">        plot-&gt;<span class="built_in">rescaleAxes</span>();</span><br><span class="line">        plot-&gt;<span class="built_in">setInteractions</span>(QCP::iRangeDrag|QCP::iRangeZoom|QCP::iSelectPlottables); <span class="comment">// 交互：可鼠标拖动，可滚轮缩放，可选中波形</span></span><br><span class="line">        plot-&gt;<span class="built_in">replot</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭连接</span></span><br><span class="line">        <span class="built_in">viClose</span>(instrument);</span><br><span class="line">        <span class="built_in">viClose</span>(defaultRM);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里最初尝试时，经常遇到程序崩溃异常退出，最终将 <code>buffer</code> 数组拉大后得以正常，原因未知。</p><p>运行后发现波形可以显示，但横轴值不对，原因是根据代码中的 <code>x.append(i);</code> 语句，横轴数据是从 <code>0</code> 开始，步长为 <code>1</code> 的连续整数序列，因此横轴范围是 <code>0</code> 到<code>1000</code>，步长为<code>1</code>。</p><p>对转换波形数据部分进行如下修改：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转换波形数据</span></span><br><span class="line">QStringList strList = str.<span class="built_in">split</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">QVector&lt;<span class="type">double</span>&gt; x, y;</span><br><span class="line"></span><br><span class="line">QString start = ui-&gt;StartfreqEdit-&gt;<span class="built_in">text</span>();</span><br><span class="line">QString stop = ui-&gt;StopfreqEdit_2-&gt;<span class="built_in">text</span>();</span><br><span class="line"><span class="type">double</span> startX = start.<span class="built_in">toDouble</span>();<span class="comment">//  设置起始值</span></span><br><span class="line"><span class="type">double</span> stopX = stop.<span class="built_in">toDouble</span>();</span><br><span class="line"><span class="type">double</span> step = (stopX-startX)/<span class="number">1000</span>;</span><br><span class="line"><span class="built_in">qDebug</span>()&lt;&lt;startX;</span><br><span class="line"><span class="built_in">qDebug</span>()&lt;&lt;stopX;</span><br><span class="line"><span class="built_in">qDebug</span>()&lt;&lt;step;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;strList.<span class="built_in">count</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">    QString s = strList.<span class="built_in">at</span>(i);</span><br><span class="line">    <span class="type">double</span> d = s.<span class="built_in">toDouble</span>();</span><br><span class="line">    y.<span class="built_in">append</span>(d);</span><br><span class="line">    x.<span class="built_in">append</span>(startX + i*step);<span class="comment">// 设置步长</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里默认设置产生 1000 个数据点，如需修改后续可进行修改。修改后如图所示：</p><p><img src="https://raw.githubusercontent.com/EngineHeating/MyPicGo/main/20230424134447.png" alt="20230424134447"> </p>]]></content>
      
      
      <categories>
          
          <category> 信号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Qt </tag>
            
            <tag> QCustomPlot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QCustomPlot 库的使用——绘制曲线</title>
      <link href="/2024/03/20/QCustomPlot%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%BB%98%E5%88%B6%E6%9B%B2%E7%BA%BF/"/>
      <url>/2024/03/20/QCustomPlot%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%BB%98%E5%88%B6%E6%9B%B2%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="1- 配置库"><a href="#1- 配置库" class="headerlink" title="1. 配置库"></a>1. 配置库</h1><h2 id="1-1- 下载与预配置"><a href="#1-1- 下载与预配置" class="headerlink" title="1.1 下载与预配置"></a>1.1 下载与预配置</h2><ul><li>下载压缩包，然后吧 .cpp 和 .h 文件放入工程目录中</li><li>在 mainwindow.h 中引用下载的 .h 文件<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;qcustomplot.h&quot;</span></span></span><br></pre></td></tr></table></figure></li><li>Q4.0 以上版本需要在 .pro 文件中加入：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QT += printsupport</span><br></pre></td></tr></table></figure></li><li>在 UI 设计界面，拖入 <strong>Widget</strong>, 然后右键 -&gt; 提升为…然后在弹出的对话框中，在 <strong> 提升为类名 </strong> 那里输入 QCustomPlot，然后头文件那里会自动填充为 qcustomplot.h。单击添加按钮将 QCustomPlot 加入提升类列表中，最后单击提升就可以了。</li></ul><p> <img src="https://raw.githubusercontent.com/EngineHeating/MyPicGo/main/20230405212452.png" alt="20230405212452"> </p><p> 可见，类中已经显示为 QCustomPlot。预配置完成，<strong>这个可以用来作为坐标轴画图。</strong></p><h2 id="1-2- 第一个 demo：画一个简单抛物线"><a href="#1-2- 第一个 demo：画一个简单抛物线" class="headerlink" title="1.2 第一个 demo：画一个简单抛物线"></a>1.2 第一个 demo：画一个简单抛物线 </h2><p> 代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成数据，画出的是抛物线</span></span><br><span class="line"><span class="function">QVector&lt;<span class="type">double</span>&gt; <span class="title">x</span><span class="params">(<span class="number">101</span>)</span>, <span class="title">y</span><span class="params">(<span class="number">101</span>)</span></span>; <span class="comment">// 初始化向量 x 和 y</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">101</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">  x[i] = i/<span class="number">50.0</span> - <span class="number">1</span>; <span class="comment">// x 范围[-1,1]</span></span><br><span class="line">  y[i] = x[i]*x[i]; <span class="comment">// y=x*x</span></span><br><span class="line">&#125;</span><br><span class="line">ui-&gt;customPlot-&gt;<span class="built_in">addGraph</span>();<span class="comment">// 添加数据曲线（一个图像可以有多个数据曲线）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// graph(0); 可以获取某个数据曲线（按添加先后排序）</span></span><br><span class="line"><span class="comment">// setData(); 为数据曲线关联数据</span></span><br><span class="line">ui-&gt;customPlot-&gt;<span class="built_in">graph</span>(<span class="number">0</span>)-&gt;<span class="built_in">setData</span>(x, y);</span><br><span class="line">ui-&gt;customPlot-&gt;<span class="built_in">graph</span>(<span class="number">0</span>)-&gt;<span class="built_in">setName</span>(<span class="string">&quot; 第一个示例 &quot;</span>);<span class="comment">// 设置图例名称</span></span><br><span class="line"><span class="comment">// 为坐标轴添加标签</span></span><br><span class="line">ui-&gt;customPlot-&gt;xAxis-&gt;<span class="built_in">setLabel</span>(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">ui-&gt;customPlot-&gt;yAxis-&gt;<span class="built_in">setLabel</span>(<span class="string">&quot;y&quot;</span>);</span><br><span class="line"><span class="comment">// 设置坐标轴的范围，以看到所有数据</span></span><br><span class="line">ui-&gt;customPlot-&gt;xAxis-&gt;<span class="built_in">setRange</span>(<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">ui-&gt;customPlot-&gt;yAxis-&gt;<span class="built_in">setRange</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">ui-&gt;customPlot-&gt;legend-&gt;<span class="built_in">setVisible</span>(<span class="literal">true</span>); <span class="comment">// 显示图例</span></span><br><span class="line"><span class="comment">// 重画图像, 类似于 plot 函数</span></span><br><span class="line">ui-&gt;customPlot-&gt;<span class="built_in">replot</span>();</span><br></pre></td></tr></table></figure><p>1</p>]]></content>
      
      
      <categories>
          
          <category> 信号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Qt </tag>
            
            <tag> QCustomPlot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态链接库的使用</title>
      <link href="/2024/03/20/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
      <url>/2024/03/20/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="动态链接库的使用"><a href="# 动态链接库的使用" class="headerlink" title="动态链接库的使用"></a>动态链接库的使用 </h1><h2 id="一、在 VS 中创建动态链接库"><a href="# 一、在 VS 中创建动态链接库" class="headerlink" title="一、在 VS 中创建动态链接库"></a> 一、在 VS 中创建动态链接库 </h2><p> 首先生成的 main 文件无需改动，要做的是创建自己的 DLL 文件。分别创建头文件 .h 和源文件 .cpp。</p><p>.h 文件中如下例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>extern “C”：作用是告诉编译器代码按 C 语言的方式进行编译</li><li>_declspec(dllexport)：此修饰符告诉编译器和链接器被它修饰的函数或变量需要从 DLL 导出。与其相对的代码是_declspec(dllimport) 此修饰符告诉编译器和链接器被它修饰的函数或变量需要从 DLL 导入。</li><li>int Add(int a, int b) 需要被其他程序调用的函数</li></ul><p>.cpp 文件如下例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TestDLL.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后进行编译，这里无法运行是正常的。</p><h2 id="二、创建需要调用的 CPP 项目"><a href="# 二、创建需要调用的 CPP 项目" class="headerlink" title="二、创建需要调用的 CPP 项目"></a>二、创建需要调用的 CPP 项目 </h2><p> 将上步生成的 .dll 文件和 .lib 文件放入此项目根目录，将上步的 .h 文件添加进本项目。编写本 CPP 项目时，须有如下调用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TestDLL.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;Dlldemo.lib&quot;</span>)</span></span><br></pre></td></tr></table></figure><p>main 函数如下例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TestDLL.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;DLL1.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> c = <span class="built_in">add</span>(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;5+3=%d&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、动态库与静态库"><a href="# 三、动态库与静态库" class="headerlink" title="三、动态库与静态库"></a>三、动态库与静态库 </h2><p> 库有两种：<strong>静态库 </strong>（.a、.lib）和<strong> 动态库 </strong>（.so、.dll）。所谓静态、动态是指<br> 链接。</p><p>lib 是编译时需要的，dll 是运行时需要的。</p><p>如果要完成源代码的编译，有 lib 就够了。</p><p>如果也使动态连接的程序运行起来，有 dll 就够了。</p><p>在开发和调试阶段，当然最好都有。</p>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 课后练习留档</title>
      <link href="/2024/03/20/C++%20Primer%20%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E7%95%99%E6%A1%A3/"/>
      <url>/2024/03/20/C++%20Primer%20%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0%E7%95%99%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="C-Primer-Essential-C- 课后练习留档"><a href="#C-Primer-Essential-C- 课后练习留档" class="headerlink" title="C++ Primer&#x2F;Essential C++ 课后练习留档"></a>C++ Primer&#x2F;Essential C++ 课后练习留档 </h1><h2 id="第 1 章开始"><a href="# 第 1 章开始" class="headerlink" title="第 1 章开始"></a> 第 1 章开始 </h2><h3 id="练习 1-3"><a href="# 练习 1-3" class="headerlink" title="练习 1.3"></a> 练习 1.3</h3><blockquote><p>编写程序，在标准输出上打印 Hello World.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Hello, World&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习 1-4"><a href="# 练习 1-4" class="headerlink" title="练习 1.4"></a>练习 1.4</h3><blockquote><p>我们的程序使用加法运算符 + 将两个数相加。编写程序使用乘法运算符 * 打印两个数的积。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> mul1, mul2;</span><br><span class="line">std::cin &gt;&gt; mul1 &gt;&gt; mul2;</span><br><span class="line">std::cout &lt;&lt; mul1 * mul2 &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习 1-5"><a href="# 练习 1-5" class="headerlink" title="练习 1.5"></a>练习 1.5</h3><blockquote><p>我们将所有输出操作放在一条很长的语句中。重写程序，将每个运算对象的打印操作放在一条独立的语句中。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Enter two numbers:&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="type">int</span> v1 = <span class="number">0</span>, v2 = <span class="number">0</span>;</span><br><span class="line">std::cin &gt;&gt; v1 &gt;&gt; v2;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;The number of &quot;</span>;</span><br><span class="line">std::cout &lt;&lt; v1;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot; and &quot;</span>;</span><br><span class="line">std::cout &lt;&lt; v2;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot; is &quot;</span>;</span><br><span class="line">std::cout &lt;&lt; v1 + v2 &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习 1-6"><a href="# 练习 1-6" class="headerlink" title="练习 1.6"></a>练习 1.6</h3><blockquote><p>(非书上题)输出所有三位数的水仙花数。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> m = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((i * <span class="number">100</span> + j * <span class="number">10</span> + k) == (i*i*i + j*j*j + k*k*k))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">m++;</span><br><span class="line">k++;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (m &lt; <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习 -1-7"><a href="# 练习 -1-7" class="headerlink" title="练习 1.7"></a>练习 1.7</h3><blockquote><p>创建一个 txt 文件，输入两行文字并保存。编写一个程序，打开该文本文件，将其中每个字都读取到一个 vector<string>对象中。遍历 vector，将内容显示到 cout。利用泛型算法 sort()，对所有文字排序，再将排序结果输出至另一文件。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">infile</span><span class="params">(<span class="string">&quot;D:\\CODE\\CPPProject\\Data\\Exercise 1.6_IN.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">outfile</span><span class="params">(<span class="string">&quot;D:\\CODE\\CPPProject\\Data\\Exercise 1.6_OUT.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (! infile)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Can&#x27;t find infile.&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (! outfile)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Can&#x27;t find outfile.&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;string&gt; PrintInformation;</span><br><span class="line">string word;</span><br><span class="line"><span class="keyword">while</span> (infile &gt;&gt; word)</span><br><span class="line">&#123;</span><br><span class="line">PrintInformation.<span class="built_in">push_back</span>(word);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PrintInformation.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; PrintInformation[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(PrintInformation.<span class="built_in">begin</span>(), PrintInformation.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; PrintInformation.<span class="built_in">size</span>(); j++)</span><br><span class="line">&#123;</span><br><span class="line">outfile &lt;&lt; PrintInformation[j] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">outfile &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二章 - 面向过程的编程风格"><a href="# 第二章 - 面向过程的编程风格" class="headerlink" title="第二章 面向过程的编程风格"></a>第二章 面向过程的编程风格 </h2><h3 id="练习 -2-1"><a href="# 练习 -2-1" class="headerlink" title="练习 2.1"></a> 练习 2.1</h3><blockquote><p>编写一个函数，该函数返回斐波那契数列中用户指定的某个位置的元素。改写 main()使其允许用户不断输入位置值直到用户希望停止为止。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">fibon_elem</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span>&amp; elem)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> pos;</span><br><span class="line"><span class="type">bool</span> more = <span class="literal">true</span>;</span><br><span class="line"><span class="type">char</span> change;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (more)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Please enter a position: &quot;</span>;</span><br><span class="line">cin &gt;&gt; pos;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> elem;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">fibon_elem</span>(pos, elem))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;element # &quot;</span> &lt;&lt; pos</span><br><span class="line">&lt;&lt; <span class="string">&quot; is &quot;</span> &lt;&lt; elem &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Sorry.Could not calculate element # &quot;</span></span><br><span class="line">&lt;&lt; pos &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;try again?(Y/N)&quot;</span>;</span><br><span class="line">cin &gt;&gt; change;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((change != <span class="string">&#x27;Y&#x27;</span>) &amp;&amp; (change != <span class="string">&#x27;y&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">more = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">fibon_elem</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span>&amp; elem)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 检查位置是否合理</span></span><br><span class="line"><span class="keyword">if</span> (pos &lt;= <span class="number">0</span> || pos &gt;= <span class="number">1024</span>)</span><br><span class="line">&#123;</span><br><span class="line">elem = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 位置为 1、2 时 elem 值为 1</span></span><br><span class="line">elem = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n2 = <span class="number">1</span>, n1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= pos; i++)</span><br><span class="line">&#123;</span><br><span class="line">elem = n2 + n1;</span><br><span class="line">n2 = n1;</span><br><span class="line">n1 = elem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习 -2-2"><a href="# 练习 -2-2" class="headerlink" title="练习 2.2"></a>练习 2.2</h3><blockquote><p>Pentagonal 数列的求值公式是 $P(n)&#x3D;\frac{n(3n-1)}{2}$, 借此产生 1，5，12，22，35 等值。定义一函数，将产生的元素放到用户传入的 vector 中，元素个数由用户指定。注意检查元素个数的有效性。再编写一个函数，能将给定 vector 的所有元素一一打印出来。此函数第二参数接受一个表示数列类型的字符串。最后编写 main()测试上述两个函数。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 练习写的，和参考答案有出入</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> vector&lt;<span class="type">int</span>&gt;* <span class="title">pent_seq</span><span class="params">(<span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> max_size = <span class="number">1024</span>;</span><br><span class="line"><span class="type">static</span> vector&lt;<span class="type">int</span>&gt; elems;</span><br><span class="line"><span class="keyword">if</span> (size &lt;= <span class="number">0</span> || size &gt; max_size)</span><br><span class="line">&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&quot; pent_seq(): oops: invalid size: &quot;</span> &lt;&lt; size &lt;&lt; <span class="string">&quot; --can&#x27;t fulfill request.\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果 size 小于 elems.size 就不用重新计算了</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = elems.<span class="built_in">size</span>(); i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">elems.<span class="built_in">push_back</span>((i + <span class="number">1</span>) * (<span class="number">3</span> * (i + <span class="number">1</span>) - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;elems;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display_message</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; vec, <span class="type">const</span> string &amp;vectype)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; vectype;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vec.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; vec[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> string vect = <span class="string">&quot;int : &quot;</span>;</span><br><span class="line"><span class="type">const</span> vector&lt;<span class="type">int</span>&gt;* pseq = <span class="built_in">pent_seq</span>(<span class="number">5</span>);</span><br><span class="line">pseq = <span class="built_in">pent_seq</span>(<span class="number">7</span>);</span><br><span class="line"><span class="built_in">display_message</span>(*pseq, vect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="练习 -2-3"><a href="# 练习 -2-3" class="headerlink" title="练习 2.3"></a>练习 2.3</h3><blockquote><p>将练习 2.2 中的 Pentagonal 数列求值函数拆分为两个函数，其中之一为 inline, 用来检验元素个数是否合理。如果合理且尚未被计算便执行第二个函数，执行求值工作。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">is_size_ok</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; elems, <span class="type">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pent_seq</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; elems, <span class="type">int</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">is_size_ok</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; elems, <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> max_size = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">if</span> (size &lt;= <span class="number">0</span> || size &gt; max_size)</span><br><span class="line">&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&quot; pent_seq(): oops: invalid size: &quot;</span> &lt;&lt; size &lt;&lt; <span class="string">&quot; --can&#x27;t fulfill request.\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (size &lt; elems.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pent_seq</span>(elems, size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pent_seq</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; elems, <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 size 小于 elems.size 就不用重新计算了</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = elems.<span class="built_in">size</span>(); i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">elems.<span class="built_in">push_back</span>((i + <span class="number">1</span>) * (<span class="number">3</span> * (i + <span class="number">1</span>) - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display_message</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; vec, <span class="type">const</span> string &amp;vectype)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; vectype;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vec.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; vec[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; elems;</span><br><span class="line"><span class="type">const</span> string vect = <span class="string">&quot;int : &quot;</span>;</span><br><span class="line"><span class="built_in">pent_seq</span>(elems, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">display_message</span>(elems, vect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习 -2-4"><a href="# 练习 -2-4" class="headerlink" title="练习 2.4"></a>练习 2.4</h3><blockquote><p>写一个函数，以局部静态的 vector 存储数列元素，返回一个 const 指针指向该 vector。若 vector 的大小小于指定元素个数，就扩充 vector 大小。接下来在事先第二个函数，接受一个位置值，返回该位置上的元素。最后编写 main 测试。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> vector&lt;<span class="type">int</span>&gt;* <span class="title">save_vec</span><span class="params">(<span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> vector&lt;<span class="type">int</span>&gt; vect;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = vect.<span class="built_in">size</span>(); i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">vect.<span class="built_in">push_back</span>((i + <span class="number">1</span>) * (<span class="number">3</span> * (i + <span class="number">1</span>) - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;vect;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pent_elem</span><span class="params">(<span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> vector&lt;<span class="type">int</span>&gt;* pseq = <span class="built_in">save_vec</span>(pos);</span><br><span class="line"><span class="keyword">if</span> (!pseq)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (*pseq)[pos - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">pent_elem</span>(<span class="number">6</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span> &lt;&lt; <span class="string">&quot;The number is &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP 基础</title>
      <link href="/2024/03/20/CPP%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/03/20/CPP%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="# 基础知识" class="headerlink" title="基础知识"></a>基础知识 </h2><p> 在基础知识部分，好像只有头文件的引用和输入输出函数发生了变化。</p><p>头文件下加入<code>using namespace std;</code></p><p><code>#include&lt;stdio.h&gt;——&gt;#include&lt; iostream&gt;</code></p><p><code>printf——&gt;cout</code></p><p><code>scanf——&gt;cin</code></p><p>C++ 有字符串类型 string , 这是 C 语言所不具备的。</p><h2 id="数组——Array 和 Vector"><a href="# 数组——Array 和 Vector" class="headerlink" title="数组——Array 和 Vector"></a>数组——Array 和 Vector</h2><ul><li>Array 即为常用数组，Vector 需要包含 vector 头文件。</li><li>为 Vector 赋值时，不能用初始化列表，必须一个一个赋值。</li><li>Vector 可以使用 <code>.size</code> 返回数组大小。</li></ul><h2 id="指针"><a href="# 指针" class="headerlink" title="指针"></a>指针 </h2><h3 id="基础概念"><a href="# 基础概念" class="headerlink" title="基础概念"></a> 基础概念</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;             <span class="comment">// 假设 a 的地址为 1000</span></span><br><span class="line"><span class="type">int</span> *p = &amp;a;</span><br></pre></td></tr></table></figure><p>这是定义了一个指向 int 形变量 a 的指针。此时<code>p = &amp;a = 1000</code>,<code>*p = a = 10</code>。</p><blockquote><p>&amp;：取址运算符，取 &amp; 后面的变量的地址值。</p><p>*： 取值运算符：取 * 后面的地址里保存的变量值。</p></blockquote><h3 id="指针传入函数"><a href="# 指针传入函数" class="headerlink" title="指针传入函数"></a>指针传入函数 </h3><p> 调用一个函数时，通常不会将变量直接传入函数，而是将调用的变量复制一份副本传入函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 没用指针，交换失败</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">swap</span>(a, b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a:10</span></span><br><span class="line"><span class="comment">//b:20</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">swap</span>(&amp;a, &amp;b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a:20</span></span><br><span class="line"><span class="comment">//b:10</span></span><br></pre></td></tr></table></figure><h3 id="指针和数组"><a href="# 指针和数组" class="headerlink" title="指针和数组"></a>指针和数组 </h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> b[<span class="number">5</span>];   <span class="comment">// 假设 b[0] 地址为 1500，则 b[1]地址为 1504……</span></span><br></pre></td></tr></table></figure><p>不能对 b 进行别的操作，想要用指针对数组进行操作，需定义一个新的指针指向这个数组，如：<code>int *pb = &amp;b[0];</code>. 如果此时进行<code>pb++</code>，则<code>pb = &amp;b[1]</code>。</p><h2 id="文件的读写"><a href="# 文件的读写" class="headerlink" title="文件的读写"></a>文件的读写 </h2><p> 对文件读写首先需要包含 <code>fstream</code> 头文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br></pre></td></tr></table></figure><p>然后是定义输入 &#x2F; 输出对象，传入文件名（地址）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">infile</span><span class="params">(<span class="string">&quot;D:\\Exercise 1.6_IN.txt&quot;</span>)</span></span>;<span class="comment">// 文件读入</span></span><br><span class="line"><span class="function">ofstream <span class="title">outfile</span><span class="params">(<span class="string">&quot;D:\\Exercise 1.6_OUT.txt&quot;</span>)</span></span>;<span class="comment">// 文件输出</span></span><br><span class="line">   <span class="function">fstream <span class="title">iofile</span><span class="params">(<span class="string">&quot;D:\\Exercise 1.6_IO.txt&quot;</span>)</span></span>;<span class="comment">// 同时读写一个文件</span></span><br></pre></td></tr></table></figure><p>这种情况下，如果没有该文件，会自动创建；如果有该文件，会自动清空并写入新内容。如果不想清空，需要设置追加模式（append mode）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ofstream <span class="title">outfile</span><span class="params">(<span class="string">&quot;D:\\Exercise 1.6_OUT.txt&quot;</span>,ios_base::app)</span></span>;<span class="comment">// 文件输出, 追加模式</span></span><br></pre></td></tr></table></figure><ul><li>练习 1.7</li></ul>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP 核心编程</title>
      <link href="/2024/03/20/CPP%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/03/20/CPP%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一章内容基于视频 84-90 节内容，第二章后内容基于 Essential C++.</p></blockquote><h2 id="1- 内存分区模型"><a href="#1- 内存分区模型" class="headerlink" title="1 内存分区模型"></a>1 内存分区模型</h2><p>C++ 程序执行时，将内存大致分为 4 个区域：</p><ul><li>代码区</li><li>全局区</li><li>栈区</li><li>堆区</li></ul><h3 id="1-1- 程序运行前"><a href="#1-1- 程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前 </h3><p> 程序编译后，生成了 exe 可执行文件，未执行该程序前分为两个区域：</p><p>代码区：</p><ul><li>存放 CPU 执行的机器指令</li><li>代码区是 <strong> 共享 </strong> 的。对于被频繁执行的程序，只需存储一份代码</li><li>代码区是 <strong> 只读 </strong> 的。防止程序意外修改它的指令。</li></ul><p>全局区：</p><ul><li>存放全局变量(函数外定义的变量)、静态变量（static）、常量（3 种）</li><li>该区域数据程序结束后由操作系统释放。</li></ul><h3 id="1-2- 程序运行后"><a href="#1-2- 程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后 </h3><p> 栈区：</p><ul><li>编译器自动分配释放，存放函数的参数值，局部变量等；</li><li>注：不要返回局部变量的地址。</li></ul><p>堆区：</p><ul><li>堆区数据由程序员管理和释放</li><li>堆区数据由 new 关键字开辟内存<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-3-new 运算符"><a href="#1-3-new 运算符" class="headerlink" title="1.3 new 运算符"></a>1.3 new 运算符 </h3><p> 在堆区开辟数据，由 delete 释放。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *arr = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>]; <span class="comment">// 分配 10 个 int 数据组成的数组，arr 指针指向第一个 Int</span></span><br><span class="line"><span class="keyword">delete</span>[] arr;   <span class="comment">//arr 必须指向一个动态分配的数组或者为空</span></span><br></pre></td></tr></table></figure><h3 id="1-4- 引用"><a href="#1-4- 引用" class="headerlink" title="1.4 引用"></a>1.4 引用 </h3><h4 id="1-4-1- 基本操作"><a href="#1-4-1- 基本操作" class="headerlink" title="1.4.1 基本操作"></a>1.4.1 基本操作</h4><p> 作用：给变量起别名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a; <span class="comment">// 给 a 起一个别名为 b</span></span><br></pre></td></tr></table></figure><ul><li>引用必须初始化</li><li>引用一经初始化后不可更改</li></ul><h4 id="1-4-2- 引用做函数参数及返回值"><a href="#1-4-2- 引用做函数参数及返回值" class="headerlink" title="1.4.2 引用做函数参数及返回值"></a>1.4.2 引用做函数参数及返回值 </h4><p><strong> 作用</strong>：函数传参时，可以用引用让形参修饰实参，简化指针修改实参。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> *<span class="title">find</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;vec, <span class="type">int</span> value)</span><span class="comment">//vec 代表对 vec 这个 vector 的引用，避免拷贝整个 vector</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> ix = <span class="number">0</span>; ix &lt; vec.size; ++ix)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vec[ix] == value)</span><br><span class="line">            <span class="keyword">return</span> &amp;vec[ix];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：不要返回局部变量引用</p><h2 id="2- 面向过程的编程风格"><a href="#2- 面向过程的编程风格" class="headerlink" title="2 面向过程的编程风格"></a>2 面向过程的编程风格 </h2><h3 id="2-1- 编写函数"><a href="#2-1- 编写函数" class="headerlink" title="2.1 编写函数"></a>2.1 编写函数</h3><p> 函数必须先被声明，然后才能被调用。</p><p>如果函数返回类型不为 void，那它必须在每个可能的退出点上将值返回。</p><h3 id="2-2- 调用函数"><a href="#2-2- 调用函数" class="headerlink" title="2.2 调用函数"></a>2.2 调用函数 </h3><p> 当调用一个函数时，会在内存中建立起一块特殊区域，称为“<strong>程序堆栈</strong>”。这块区域提供了每个函数参数的存储空间。他也提供了函数所定义的每个对象的内存空间，称为局部对象。一旦函数完成，这块内存会被释放掉。</p><h4 id="2-2-1-Pass-by-Reference 语义"><a href="#2-2-1-Pass-by-Reference 语义" class="headerlink" title="2.2.1 Pass by Reference 语义"></a>2.2.1 Pass by Reference 语义</h4><p><strong>reference</strong>: 引用，见 1.4 节。</p><p>当我们以 by reference 方式将对象作为函数参数传入时，对象本身并不会复制出另一份，<strong>复制的是对象的地址。</strong></p><p>将函数声明为 reference (引用)的理由：</p><ul><li>希望直接对传入对象进行修改</li><li>降低复制大型对象的额外负担</li></ul><p>例如，将 vector 以传值方式传入 display() 中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;···&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">display</span>(vec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本例中由于函数中不会更改 vector 的内容，故少了 const 不会有错误，但加上 const 可以让阅读程序的人了解，我们用传址的方式传递 vector。</p><p><strong>pointer</strong>: 以 pointer 形式传递的效果相同，唯一差别在于用法不同。如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; *vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;···&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">display</span>(&amp;vec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2- 作用域及范围"><a href="#2-2-2- 作用域及范围" class="headerlink" title="2.2.2 作用域及范围"></a>2.2.2 作用域及范围 </h4><p> 为对象分配的内存，其存活时间称为 <strong> 储存期 </strong> 或<strong>范围 </strong>。每次函数执行，会为函数内变量分配内存，函数结束便会释放。我们称此对象具有<strong> 局部性范围</strong>。</p><p>对象在程序内的存活区域称为该对象的 <strong> 作用域</strong>(scope)。</p><ul><li>局部作用域(local scope)：名称在 local scope 以外不可见。</li><li>file scope：从其声明点至文件末尾都可见。</li></ul><h4 id="2-2-3- 动态内存管理"><a href="#2-2-3- 动态内存管理" class="headerlink" title="2.2.3 动态内存管理"></a>2.2.3 动态内存管理 </h4><p> 见第 1 章。</p><h3 id="2-3- 提供默认参数值"><a href="#2-3- 提供默认参数值" class="headerlink" title="2.3 提供默认参数值"></a>2.3 提供默认参数值</h3><p>C++ 允许我们为全部或部分参数设定默认值。如下例所示，指定 ofstream 指针默认值为 0。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(vector&lt;<span class="type">int</span> &amp;vec&gt;, ofstream *ofil = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;···&#125;<span class="comment">// 必须是 pointer 而非 reference，因为 reference 无法被设置为 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种让 cout 称为默认的 ofstream 参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;vec, ofstream &amp;os = cout)</span></span></span><br><span class="line"><span class="function"></span>&#123;···&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值操作必须由最右边开始进行，即提供默认值参数的右侧参数必须具有默认值。</li><li>默认值只能指定一次。为了更高可见性，一般可将默认值放在开头的函数声明处而非定义处。</li></ul><h3 id="2-4- 使用局部静态对象"><a href="#2-4- 使用局部静态对象" class="headerlink" title="2.4 使用局部静态对象"></a>2.4 使用局部静态对象 </h3><p> 定义在函数中的局部静态对象，其所处的内存空间，即使在不同的函数调用过程中，依然持续存在。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fibon_seq</span>(<span class="type">int</span> size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> vector&lt;<span class="type">int</span>&gt; elems;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5- 声明 inline 函数"><a href="#2-5- 声明 inline 函数" class="headerlink" title="2.5 声明 inline 函数"></a>2.5 声明 inline 函数 </h3><p> 将函数声明为 <strong>inline（内联）</strong>，表示要求编译器在每个函数调用点上将函数的内容展开。对一个 inline 函数，编译器可 <strong> 选择 </strong> 将该函数的调用操作改为以一份函数代码副本代替。相当于将函数写入进来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">fibon_elem</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> &amp;elem)</span></span></span><br><span class="line"><span class="function"></span>&#123;···&#125;</span><br></pre></td></tr></table></figure><p>适合声明为 inline 的函数：体积小，常被调用，所从事的计算不复杂。</p><h3 id="2-6- 提供重载函数"><a href="#2-6- 提供重载函数" class="headerlink" title="2.6 提供重载函数"></a>2.6 提供重载函数 </h3><p> 有时我们需要一个通用的函数，其传入的参数的类型和数量可能不尽相同，此时需要通过 <strong> 函数重载 </strong> 机制实现。</p><p>参数列表不相同的多个函数，可以拥有相同的函数名称。编译器会将调用者提供的实际参数拿来和每个重载函数的参数比对，找出其中最合适的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">display_message</span><span class="params">(<span class="type">char</span> ch)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display_message</span><span class="params">(<span class="type">const</span> string&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display_message</span><span class="params">(<span class="type">const</span> string&amp;, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display_message</span><span class="params">(<span class="type">const</span> string&amp;, <span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>编译器 <strong> 无法根据函数的不同的返回类型 </strong> 来区分两个相同名称的函数。</p><p>将一组实现代码不同但工作内容相似的函数加以重载，可以让函数用户更容易使用这些函数，也使得我们不需要对类似函数进行多个命名。</p><h3 id="2-7- 定义模板函数"><a href="#2-7- 定义模板函数" class="headerlink" title="2.7 定义模板函数"></a>2.7 定义模板函数 </h3><p> 如果我们希望程序代码的主体不变，仅仅改变其中用到的数据类型，可以通过 <strong> 函数模板 </strong>(function template) 将参数列表中的指定参数的类型信息抽离出来。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> elemType&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display_message</span><span class="params">(<span class="type">const</span> string&amp; msg, <span class="type">const</span> vector&lt;elemType&gt;&amp; vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cont &lt;&lt; msg;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vec.size; i++)</span><br><span class="line">&#123;</span><br><span class="line">elemType t = vec[i];</span><br><span class="line">cout &lt;&lt; t &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用函数模板时，只需将 elemType 换为对应的类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt; ivec;</span><br><span class="line">string msg;</span><br><span class="line"><span class="built_in">display_message</span>(msg, ivec);</span><br></pre></td></tr></table></figure><h3 id="2-8- 函数指针"><a href="#2-8- 函数指针" class="headerlink" title="2.8 函数指针"></a>2.8 函数指针 </h3><p> 现在假如有一组“通过 vector 返回六种数列”的函数如：<code>const vector&lt;int&gt; *fibon_seq(int size)</code>，现在需要实现找到指定数列的指定数值的函数。如果我们不想再定义 6 个不同的函数，那就需要使用 <strong> 函数指针 </strong> 实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> vector&lt;<span class="type">int</span>&gt;* (*seq_ptr)(<span class="type">int</span>)</span><br></pre></td></tr></table></figure><p>函数指针必须指明函数的返回类型 <code>const vector&lt;int&gt;*</code> 和参数列表 <code>int</code>。（*seq_ptr) 中 * 表示是一个指针变量，seq_ptr 是这个变量的名称。</p><p>要取得函数的地址，直接赋值函数的名称即可。</p><h3 id="2-9- 设定头文件"><a href="#2-9- 设定头文件" class="headerlink" title="2.9 设定头文件"></a>2.9 设定头文件 </h3><p> 把函数声明放在头文件中，以供多个程序文件调用。</p><p>对象的定义需要前加关键字 <strong>extern</strong>。</p><h2 id="3- 泛型编程风格"><a href="#3- 泛型编程风格" class="headerlink" title="3 泛型编程风格"></a>3 泛型编程风格 </h2><h3 id="3-1- 指针的算术运算"><a href="#3-1- 指针的算术运算" class="headerlink" title="3.1 指针的算术运算"></a>3.1 指针的算术运算</h3><p> 我们希望在一个函数中可以处理任意数据类型，包括 vector 和 array。</p><p>当数组被传递给函数，或从函数中返回时，仅有第一个元素的地址会被传递。因此一般都是传入指向数组的指针，以便对 array 进行读取操作。<br>如：<code>int min(int *array)&#123;···&#125;</code></p><p>当我们以指针指向 array 第一个元素的方式传入函数时，仍然可以通过下标运算符 [] 访问每个元素，<strong>就如同此 array 是个对象一般。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array[<span class="number">2</span>];</span><br><span class="line">*(array + <span class="number">2</span>);<span class="comment">// 两种方式都返回 array 第三个元素</span></span><br></pre></td></tr></table></figure><p>注意，vector 可以为空，array 则不然。</p><p>指针的算数运算 <strong> 必须先假设所有元素存储在连续空间里</strong>，然后才能根据当前的指针，加上元素大小后，指向下一个元素。</p><p><strong>list</strong> 也是一个容器，其连接方式为双向链表。</p><p>但由于 list 存储的元素并不处在一片连续的空间，假设要实现 find()函数，原有的指针操作在 list 容器无法实现。由此引出 <strong>Iterator 泛型指针</strong> 概念，把底层指针的处理放在此抽象层中，让用户无须直接面对指针操作。</p><h3 id="3-2- 了解 Iterator- 泛型指针"><a href="#3-2- 了解 Iterator- 泛型指针" class="headerlink" title="3.2 了解 Iterator(泛型指针)"></a>3.2 了解 Iterator(泛型指针)</h3><p>泛型指针（iterator）（又称迭代器）很像指针，但又有一些新特性。我们需要 <code>iterator</code> 在被定义时有看到如下特性：</p><ul><li>迭代对象（某个容器）的类型，这可以决定如何访问下一个元素。（比如 vector 和 list 的区别）</li><li>iteraotr 所指的元素类型，这可以决定 iterator 提领操作（*）的返回值。</li></ul><p>定义 iterator：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;string&gt; svec;</span><br><span class="line">vector&lt;string&gt;::iterator iter = svec.<span class="built_in">begin</span>();   <span class="comment">// 双冒号代表此 iterator 是位于 string vector 定义内的嵌套类型。</span></span><br></pre></td></tr></table></figure><p>对于对 const vector 进行遍历操作：注意 const_iterator 指针值是可变的，但其指向的元素不可变。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> vector&lt;string&gt; cs_vec;</span><br><span class="line">vector&lt;string&gt;::const_iterator iter = cs_vec.<span class="built_in">begin</span>();</span><br></pre></td></tr></table></figure><p>欲通过 iterator 取得元素值，和指针一样进行提领操作即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; *iter;</span><br></pre></td></tr></table></figure><p>根据以上规则，重写 display 函数，使 iterator 代替 subscript（下标）（ps: 就是数组后的[]）:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> elemType&gt; <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> vector&lt;elemType&gt;&amp; vec, ostream&amp; os)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;elemType&gt;::const_iterator iter = vec.<span class="built_in">begin</span>();</span><br><span class="line">vector&lt;elemType&gt;::const_iterator end_it = vec.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; iter != end_it; ++iter)</span><br><span class="line">&#123;</span><br><span class="line">os &lt;&lt; *iter &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">os &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在重新实现<code>find()</code>, 使其同时支持两种形式：一对指针，或是一对指向某种容器的 iterator.</p><blockquote><p>假如用户希望赋予 equaily 运算符不同的意义，需要增强 find()的弹性。为此，下一步要将现有的 find()演化为泛型算法。</p></blockquote><h3 id="3-3- 所有容器的共通操作"><a href="#3-3- 所有容器的共通操作" class="headerlink" title="3.3 所有容器的共通操作"></a>3.3 所有容器的共通操作 </h3><p> 共通操作：</p><ul><li><code>==</code>和<code>！=</code></li><li><code>=</code></li><li><code>empty()</code></li><li><code>size()</code></li><li><code>clear()</code></li></ul><p>除此之外，每个容器还包括：<code>begin()</code>和 <code>end()</code>;<code>insert()</code> 和<code>erase()</code>.</p><h3 id="3-4- 使用顺序性容器"><a href="#3-4- 使用顺序性容器" class="headerlink" title="3.4 使用顺序性容器"></a>3.4 使用顺序性容器 </h3><p> 顺序性容器主要有<code>vector</code>,<code>list</code>,<code>deque</code>（双端队列，类似于 vector, 但可对头元素进行插入、删除操作）。</p><p>上三种容器均有两个特别操作函数：<code>push_back()</code>和 <code>pop_back()</code>. 用来在末端插入 &#x2F; 删除一个元素。其中 list 和 deque 还有针对头部的<code>push_front()</code> 和<code>pop_front</code></p><h3 id="3-5- 使用泛型算法"><a href="#3-5- 使用泛型算法" class="headerlink" title="3.5 使用泛型算法"></a>3.5 使用泛型算法 </h3><p> 使用算法需要包含 algorithm 头文件。</p><h3 id="3-6- 如何设计一个泛型算法"><a href="#3-6- 如何设计一个泛型算法" class="headerlink" title="3.6 如何设计一个泛型算法"></a>3.6 如何设计一个泛型算法</h3><blockquote><p>新任务是，在原有的找到小于某个数的函数的基础上，能使用户指定不同的比较操作。为此需要将“比较操作”参数化。</p></blockquote><p><code>function object</code> : 某种 class 的实例对象，这类 class 对 function call 运算符做了重载操作（？），<strong>可使 function object 被当作一般函数来使用。</strong></p><p><code>function object Adapter</code>: 函数对象适配器（？）</p><p>这里以 less<type>为例，取代了原本的函数指针，使用时 <code>less&lt;int&gt;</code> 和 bind1st&#x2F;bind2nd 结合使用，如 bind2nd 会指定值 (是 val?) 绑定至第二操作数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">filter_ver2</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; vec, <span class="type">int</span> val,<span class="type">const</span> less&lt;<span class="type">int</span>&gt;&amp; lt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; nvec;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::const_iterator iter = vec.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((iter = <span class="built_in">find_if</span>(iter, vec.<span class="built_in">end</span>(), <span class="built_in">bind2nd</span>(lt, val))) != vec.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">nvec.<span class="built_in">push_back</span>(*iter);</span><br><span class="line">iter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nvec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7- 使用 Map"><a href="#3-7- 使用 Map" class="headerlink" title="3.7 使用 Map"></a>3.7 使用 Map</h3><p>Map 类型是多个一对值，即 key-value 的组合。</p><h3 id="3-8- 使用 Set"><a href="#3-8- 使用 Set" class="headerlink" title="3.8 使用 Set"></a>3.8 使用 Set</h3><p>Set 类型一群 key 组合而成。</p><h3 id="3-9- 如何使用 Iterator-Inserter"><a href="#3-9- 如何使用 Iterator-Inserter" class="headerlink" title="3.9 如何使用 Iterator Inserter"></a>3.9 如何使用 Iterator Inserter</h3><p>这节主要讲了三个 insertion adapter，用来取代 assignment（赋值）操作符，如 back_inserter，他用 push.back()函数取代赋值操作符，这样就不用一开始就指定好目标容器（可能是用于存放复制后的数据）。</p><h3 id="3-10- 使用 iostream-Iterator"><a href="#3-10- 使用 iostream-Iterator" class="headerlink" title="3.10 使用 iostream Iterator"></a>3.10 使用 iostream Iterator</h3><p>这节主要讲了两个有关输入输出的 Iterator:istream_iterator 和 ostream_iterator，可支持单一类型的元素读取和写入。</p><p>对于输入，其 last <strong>iterator</strong>不指定对象即可，这可以代表 last 是“要读取的最后一个元素的下一位置”。</p><h2 id="4- 基于对象的编程风格"><a href="#4- 基于对象的编程风格" class="headerlink" title="4 基于对象的编程风格"></a>4 基于对象的编程风格 </h2><h3 id="4-1- 如何实现一个 Class"><a href="#4-1- 如何实现一个 Class" class="headerlink" title="4.1 如何实现一个 Class"></a>4.1 如何实现一个 Class</h3><p> 本节以实现一个 Stack 类为引子介绍如何写一个最简单的 Class. 实现一个 Class 主要分为两部分：.h 文件和.cpp 文件。其中，.h 文件包含对该 Class 的定义；.cpp 包含了 member function 的具体定义。（当然也可以在 class 主体内定义）</p><p>Stack Class 定义的主体壳子如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(<span class="type">const</span> string&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(string&amp; elem)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">peek</span><span class="params">(string&amp; elem)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _stack.<span class="built_in">size</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">const</span> string &amp;value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">const</span> string &amp;value)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">vector&lt;string&gt; _stack;<span class="comment">// 习惯上给 private 变量加下划线</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在.cpp 定义 member function 时，要注意使用如下语法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack::<span class="built_in">pop</span>(); <span class="comment">//:: 类作用域解析符告诉了编译器这是 Stack class 的一个 member。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/20/hello-world/"/>
      <url>/2024/03/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
